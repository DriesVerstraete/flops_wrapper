 FlopsWrapper 'my_flops'    req: (1, 1)  usize:109  psize:0  commsize:1
      unknowns:
      ERROR: {
        'pass_by_obj': True,
         'pathname': 'my_flops.ERROR',
         'promoted_name': 'my_flops.ERROR',
         'size': 0,
         'top_promoted_name': 'my_flops.ERROR',
         'val': 'none'}
      HINT: {
        'pass_by_obj': True,
         'pathname': 'my_flops.HINT',
         'promoted_name': 'my_flops.HINT',
         'size': 0,
         'top_promoted_name': 'my_flops.HINT',
         'val': 'none'}
      output:Weight:Wing:w: {
        'desc': 'Bending material factor. For detailed wing definition, '
                 'this factor is calculated by numerical integration along '
                 'the specified load path to determine the amount of bending '
                 'material required to support an elliptical load '
                 'distribution.  The wing is treated as an idealized beam '
                 'with dimensions proportional to the wing local chord and '
                 'thickness. The bending factor is modified for aeroelastic '
                 'penalties (flutter, divergence, and aeroelastic loads) '
                 'depending on wing sweep (including forward), aspect ratio, '
                 'degree of aeroelastic tailoring, and strut bracing, if '
                 'any.  These modifications are based on a curve fit of the '
                 'results of a study performed using the Aeroelastic '
                 'Tailoring and Structural Optimization (ATSO) code to '
                 'structurally optimize a large matrix of wings.\n'
                 '\n'
                 'If the detailed wing definition is not used, an equivalent '
                 'bending factor is computed assuming a trapezoidal wing '
                 'with constant t/c.',
         'pathname': 'my_flops.output:Weight:Wing:w',
         'promoted_name': 'my_flops.output:Weight:Wing:w',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:Wing:w',
         'typeVar': 'Float',
         'val': array([ 10.3601])}
      output:Weight:Wing:ew: {
        'desc': 'Engine inertia relief factor.',
         'pathname': 'my_flops.output:Weight:Wing:ew',
         'promoted_name': 'my_flops.output:Weight:Wing:ew',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:Wing:ew',
         'typeVar': 'Float',
         'val': array([ 0.94])}
      output:Weight:Wing:w1: {
        'desc': 'The first term in the wing weight is the bending factor. '
                 'It is adjusted for inertia relief for the wing itself and '
                 'for any engines on the wing.',
         'pathname': 'my_flops.output:Weight:Wing:w1',
         'promoted_name': 'my_flops.output:Weight:Wing:w1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:Wing:w1',
         'typeVar': 'Float',
         'val': array([ 9948.7])}
      output:Weight:Wing:w2: {
        'desc': 'The second term represents control surfaces and shear '
                 'material.  According to structural and statistical studies '
                 'conducted during weight module development, the weight of '
                 'spars and ribs depends almost entirely on control '
                 'surfaces.  The amount of shear material required to carry '
                 'structural loads is not critical.',
         'pathname': 'my_flops.output:Weight:Wing:w2',
         'promoted_name': 'my_flops.output:Weight:Wing:w2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:Wing:w2',
         'typeVar': 'Float',
         'val': array([ 10102.8])}
      output:Weight:Wing:w3: {
        'desc': 'The third term depends entirely on wing area and covers '
                 'multitude of miscellaneous items.',
         'pathname': 'my_flops.output:Weight:Wing:w3',
         'promoted_name': 'my_flops.output:Weight:Wing:w3',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:Wing:w3',
         'typeVar': 'Float',
         'val': array([ 3206.1])}
      output:Weight:Inertia:cgx: {
        'pathname': 'my_flops.output:Weight:Inertia:cgx',
         'promoted_name': 'my_flops.output:Weight:Inertia:cgx',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:cgx',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:cgy: {
        'pathname': 'my_flops.output:Weight:Inertia:cgy',
         'promoted_name': 'my_flops.output:Weight:Inertia:cgy',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:cgy',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:cgz: {
        'pathname': 'my_flops.output:Weight:Inertia:cgz',
         'promoted_name': 'my_flops.output:Weight:Inertia:cgz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:cgz',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:ixxroll: {
        'pathname': 'my_flops.output:Weight:Inertia:ixxroll',
         'promoted_name': 'my_flops.output:Weight:Inertia:ixxroll',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:ixxroll',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:ixxptch: {
        'pathname': 'my_flops.output:Weight:Inertia:ixxptch',
         'promoted_name': 'my_flops.output:Weight:Inertia:ixxptch',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:ixxptch',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:ixxyaw: {
        'pathname': 'my_flops.output:Weight:Inertia:ixxyaw',
         'promoted_name': 'my_flops.output:Weight:Inertia:ixxyaw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:ixxyaw',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:Inertia:ixz: {
        'pathname': 'my_flops.output:Weight:Inertia:ixz',
         'promoted_name': 'my_flops.output:Weight:Inertia:ixz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:Inertia:ixz',
         'typeVar': 'Array,Float',
         'val': array([], dtype=float64)}
      output:Weight:dowe: {
        'pathname': 'my_flops.output:Weight:dowe',
         'promoted_name': 'my_flops.output:Weight:dowe',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:dowe',
         'typeVar': 'Float',
         'val': array([ 129967.1])}
      output:Weight:paylod: {
        'pathname': 'my_flops.output:Weight:paylod',
         'promoted_name': 'my_flops.output:Weight:paylod',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:paylod',
         'typeVar': 'Float',
         'val': array([ 41000.])}
      output:Weight:fuel: {
        'pathname': 'my_flops.output:Weight:fuel',
         'promoted_name': 'my_flops.output:Weight:fuel',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:fuel',
         'typeVar': 'Float',
         'val': array([ 52561.8])}
      output:Weight:rampwt: {
        'pathname': 'my_flops.output:Weight:rampwt',
         'promoted_name': 'my_flops.output:Weight:rampwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:rampwt',
         'typeVar': 'Float',
         'val': array([ 223528.9])}
      output:Weight:wsr: {
        'pathname': 'my_flops.output:Weight:wsr',
         'promoted_name': 'my_flops.output:Weight:wsr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wsr',
         'typeVar': 'Float',
         'val': array([ 110.])}
      output:Weight:thrso: {
        'pathname': 'my_flops.output:Weight:thrso',
         'promoted_name': 'my_flops.output:Weight:thrso',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:thrso',
         'typeVar': 'Float',
         'val': array([ 42470.5])}
      output:Weight:esf: {
        'pathname': 'my_flops.output:Weight:esf',
         'promoted_name': 'my_flops.output:Weight:esf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:esf',
         'typeVar': 'Float',
         'val': array([ 0.9719])}
      output:Weight:twr: {
        'pathname': 'my_flops.output:Weight:twr',
         'promoted_name': 'my_flops.output:Weight:twr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:twr',
         'typeVar': 'Float',
         'val': array([ 0.38])}
      output:Weight:wldg: {
        'pathname': 'my_flops.output:Weight:wldg',
         'promoted_name': 'my_flops.output:Weight:wldg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wldg',
         'typeVar': 'Float',
         'val': array([ 201176.])}
      output:Weight:fultot: {
        'pathname': 'my_flops.output:Weight:fultot',
         'promoted_name': 'my_flops.output:Weight:fultot',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:fultot',
         'typeVar': 'Float',
         'val': array([ 68221.8])}
      output:Weight:exsful: {
        'pathname': 'my_flops.output:Weight:exsful',
         'promoted_name': 'my_flops.output:Weight:exsful',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:exsful',
         'typeVar': 'Float',
         'val': array([ 15660.])}
      output:Weight:frwi: {
        'pathname': 'my_flops.output:Weight:frwi',
         'promoted_name': 'my_flops.output:Weight:frwi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frwi',
         'typeVar': 'Float',
         'val': array([ 23258.])}
      output:Weight:frht: {
        'pathname': 'my_flops.output:Weight:frht',
         'promoted_name': 'my_flops.output:Weight:frht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frht',
         'typeVar': 'Float',
         'val': array([ 1640.])}
      output:Weight:frvt: {
        'pathname': 'my_flops.output:Weight:frvt',
         'promoted_name': 'my_flops.output:Weight:frvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frvt',
         'typeVar': 'Float',
         'val': array([ 1414.])}
      output:Weight:frfin: {
        'pathname': 'my_flops.output:Weight:frfin',
         'promoted_name': 'my_flops.output:Weight:frfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frfin',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Weight:frcan: {
        'pathname': 'my_flops.output:Weight:frcan',
         'promoted_name': 'my_flops.output:Weight:frcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frcan',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Weight:frfu: {
        'pathname': 'my_flops.output:Weight:frfu',
         'promoted_name': 'my_flops.output:Weight:frfu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frfu',
         'typeVar': 'Float',
         'val': array([ 31048.])}
      output:Weight:wlg: {
        'pathname': 'my_flops.output:Weight:wlg',
         'promoted_name': 'my_flops.output:Weight:wlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wlg',
         'typeVar': 'Float',
         'val': array([ 11672.])}
      output:Weight:frna: {
        'pathname': 'my_flops.output:Weight:frna',
         'promoted_name': 'my_flops.output:Weight:frna',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frna',
         'typeVar': 'Float',
         'val': array([ 2756.])}
      output:Weight:wengt: {
        'pathname': 'my_flops.output:Weight:wengt',
         'promoted_name': 'my_flops.output:Weight:wengt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wengt',
         'typeVar': 'Float',
         'val': array([ 15583.])}
      output:Weight:wthr: {
        'pathname': 'my_flops.output:Weight:wthr',
         'promoted_name': 'my_flops.output:Weight:wthr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wthr',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Weight:wpmisc: {
        'pathname': 'my_flops.output:Weight:wpmisc',
         'promoted_name': 'my_flops.output:Weight:wpmisc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wpmisc',
         'typeVar': 'Float',
         'val': array([ 706.])}
      output:Weight:wfsys: {
        'pathname': 'my_flops.output:Weight:wfsys',
         'promoted_name': 'my_flops.output:Weight:wfsys',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wfsys',
         'typeVar': 'Float',
         'val': array([ 850.])}
      output:Weight:frsc: {
        'pathname': 'my_flops.output:Weight:frsc',
         'promoted_name': 'my_flops.output:Weight:frsc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:frsc',
         'typeVar': 'Float',
         'val': array([ 2518.])}
      output:Weight:wapu: {
        'pathname': 'my_flops.output:Weight:wapu',
         'promoted_name': 'my_flops.output:Weight:wapu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wapu',
         'typeVar': 'Float',
         'val': array([ 1200.])}
      output:Weight:win: {
        'pathname': 'my_flops.output:Weight:win',
         'promoted_name': 'my_flops.output:Weight:win',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:win',
         'typeVar': 'Float',
         'val': array([ 722.])}
      output:Weight:whyd: {
        'pathname': 'my_flops.output:Weight:whyd',
         'promoted_name': 'my_flops.output:Weight:whyd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:whyd',
         'typeVar': 'Float',
         'val': array([ 1704.])}
      output:Weight:welec: {
        'pathname': 'my_flops.output:Weight:welec',
         'promoted_name': 'my_flops.output:Weight:welec',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:welec',
         'typeVar': 'Float',
         'val': array([ 2343.])}
      output:Weight:wavonc: {
        'pathname': 'my_flops.output:Weight:wavonc',
         'promoted_name': 'my_flops.output:Weight:wavonc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wavonc',
         'typeVar': 'Float',
         'val': array([ 2151.])}
      output:Weight:wfurn: {
        'pathname': 'my_flops.output:Weight:wfurn',
         'promoted_name': 'my_flops.output:Weight:wfurn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wfurn',
         'typeVar': 'Float',
         'val': array([ 20322.])}
      output:Weight:wac: {
        'pathname': 'my_flops.output:Weight:wac',
         'promoted_name': 'my_flops.output:Weight:wac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wac',
         'typeVar': 'Float',
         'val': array([ 2292.])}
      output:Weight:wai: {
        'pathname': 'my_flops.output:Weight:wai',
         'promoted_name': 'my_flops.output:Weight:wai',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wai',
         'typeVar': 'Float',
         'val': array([ 238.])}
      output:Weight:wempty: {
        'pathname': 'my_flops.output:Weight:wempty',
         'promoted_name': 'my_flops.output:Weight:wempty',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wempty',
         'typeVar': 'Float',
         'val': array([ 122416.])}
      output:Weight:wflcrbw: {
        'pathname': 'my_flops.output:Weight:wflcrbw',
         'promoted_name': 'my_flops.output:Weight:wflcrbw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wflcrbw',
         'typeVar': 'Float',
         'val': array([ 675.])}
      output:Weight:wwstuab: {
        'pathname': 'my_flops.output:Weight:wwstuab',
         'promoted_name': 'my_flops.output:Weight:wwstuab',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wwstuab',
         'typeVar': 'Float',
         'val': array([ 1130.])}
      output:Weight:wuf: {
        'pathname': 'my_flops.output:Weight:wuf',
         'promoted_name': 'my_flops.output:Weight:wuf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wuf',
         'typeVar': 'Float',
         'val': array([ 589.])}
      output:Weight:woil: {
        'pathname': 'my_flops.output:Weight:woil',
         'promoted_name': 'my_flops.output:Weight:woil',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:woil',
         'typeVar': 'Float',
         'val': array([ 167.])}
      output:Weight:wsrv: {
        'pathname': 'my_flops.output:Weight:wsrv',
         'promoted_name': 'my_flops.output:Weight:wsrv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wsrv',
         'typeVar': 'Float',
         'val': array([ 3415.])}
      output:Weight:zfw: {
        'pathname': 'my_flops.output:Weight:zfw',
         'promoted_name': 'my_flops.output:Weight:zfw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:zfw',
         'typeVar': 'Float',
         'val': array([ 170967.])}
      output:Weight:wbomb: {
        'pathname': 'my_flops.output:Weight:wbomb',
         'promoted_name': 'my_flops.output:Weight:wbomb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Weight:wbomb',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Weight:thrsop: {
        'pathname': 'my_flops.output:Weight:thrsop',
         'promoted_name': 'my_flops.output:Weight:thrsop',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Weight:thrsop',
         'typeVar': 'Float',
         'val': array([], dtype=float64)}
      output:Performance:Segments:segment: {
        'pathname': 'my_flops.output:Performance:Segments:segment',
         'promoted_name': 'my_flops.output:Performance:Segments:segment',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:segment',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:weights: {
        'pathname': 'my_flops.output:Performance:Segments:weights',
         'promoted_name': 'my_flops.output:Performance:Segments:weights',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:weights',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:alts: {
        'pathname': 'my_flops.output:Performance:Segments:alts',
         'promoted_name': 'my_flops.output:Performance:Segments:alts',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:alts',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:machs: {
        'pathname': 'my_flops.output:Performance:Segments:machs',
         'promoted_name': 'my_flops.output:Performance:Segments:machs',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:machs',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:thrusts: {
        'pathname': 'my_flops.output:Performance:Segments:thrusts',
         'promoted_name': 'my_flops.output:Performance:Segments:thrusts',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:thrusts',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:totmaxs: {
        'pathname': 'my_flops.output:Performance:Segments:totmaxs',
         'promoted_name': 'my_flops.output:Performance:Segments:totmaxs',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:totmaxs',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:lods: {
        'pathname': 'my_flops.output:Performance:Segments:lods',
         'promoted_name': 'my_flops.output:Performance:Segments:lods',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:lods',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:sfcs: {
        'pathname': 'my_flops.output:Performance:Segments:sfcs',
         'promoted_name': 'my_flops.output:Performance:Segments:sfcs',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:sfcs',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:engparms: {
        'pathname': 'my_flops.output:Performance:Segments:engparms',
         'promoted_name': 'my_flops.output:Performance:Segments:engparms',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:engparms',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:weighte: {
        'pathname': 'my_flops.output:Performance:Segments:weighte',
         'promoted_name': 'my_flops.output:Performance:Segments:weighte',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:weighte',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:alte: {
        'pathname': 'my_flops.output:Performance:Segments:alte',
         'promoted_name': 'my_flops.output:Performance:Segments:alte',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:alte',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:mache: {
        'pathname': 'my_flops.output:Performance:Segments:mache',
         'promoted_name': 'my_flops.output:Performance:Segments:mache',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:mache',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:thruste: {
        'pathname': 'my_flops.output:Performance:Segments:thruste',
         'promoted_name': 'my_flops.output:Performance:Segments:thruste',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:thruste',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      output:Performance:Segments:totmaxe: {
        'pathname': 'my_flops.output:Performance:Segments:totmaxe',
         'promoted_name': 'my_flops.output:Performance:Segments:totmaxe',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:totmaxe',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:lode: {
        'pathname': 'my_flops.output:Performance:Segments:lode',
         'promoted_name': 'my_flops.output:Performance:Segments:lode',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:lode',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:sfce: {
        'pathname': 'my_flops.output:Performance:Segments:sfce',
         'promoted_name': 'my_flops.output:Performance:Segments:sfce',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:sfce',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Segments:engparme: {
        'pathname': 'my_flops.output:Performance:Segments:engparme',
         'promoted_name': 'my_flops.output:Performance:Segments:engparme',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Segments:engparme',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:constraint: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Performance:Constraints:constraint',
         'promoted_name': 'my_flops.output:Performance:Constraints:constraint',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:constraint',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:value: {
        'pathname': 'my_flops.output:Performance:Constraints:value',
         'promoted_name': 'my_flops.output:Performance:Constraints:value',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:value',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:units: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Performance:Constraints:units',
         'promoted_name': 'my_flops.output:Performance:Constraints:units',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:units',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:limit: {
        'pathname': 'my_flops.output:Performance:Constraints:limit',
         'promoted_name': 'my_flops.output:Performance:Constraints:limit',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:limit',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:weight: {
        'pathname': 'my_flops.output:Performance:Constraints:weight',
         'promoted_name': 'my_flops.output:Performance:Constraints:weight',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:weight',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:mach: {
        'pathname': 'my_flops.output:Performance:Constraints:mach',
         'promoted_name': 'my_flops.output:Performance:Constraints:mach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:mach',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:alt: {
        'pathname': 'my_flops.output:Performance:Constraints:alt',
         'promoted_name': 'my_flops.output:Performance:Constraints:alt',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:alt',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:g: {
        'pathname': 'my_flops.output:Performance:Constraints:g',
         'promoted_name': 'my_flops.output:Performance:Constraints:g',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:g',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:Constraints:location: {
        'pathname': 'my_flops.output:Performance:Constraints:location',
         'promoted_name': 'my_flops.output:Performance:Constraints:location',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.output:Performance:Constraints:location',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      output:Performance:fuel: {
        'pathname': 'my_flops.output:Performance:fuel',
         'promoted_name': 'my_flops.output:Performance:fuel',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:fuel',
         'typeVar': 'Float',
         'val': array([ 52561.8])}
      output:Performance:range: {
        'pathname': 'my_flops.output:Performance:range',
         'promoted_name': 'my_flops.output:Performance:range',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:range',
         'typeVar': 'Float',
         'val': array([ 2500.])}
      output:Performance:vapp: {
        'pathname': 'my_flops.output:Performance:vapp',
         'promoted_name': 'my_flops.output:Performance:vapp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:vapp',
         'typeVar': 'Float',
         'val': array([ 128.3])}
      output:Performance:taxofl: {
        'pathname': 'my_flops.output:Performance:taxofl',
         'promoted_name': 'my_flops.output:Performance:taxofl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:taxofl',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Performance:faroff: {
        'pathname': 'my_flops.output:Performance:faroff',
         'promoted_name': 'my_flops.output:Performance:faroff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:faroff',
         'typeVar': 'Float',
         'val': array([ 5485.])}
      output:Performance:farldg: {
        'pathname': 'my_flops.output:Performance:farldg',
         'promoted_name': 'my_flops.output:Performance:farldg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:farldg',
         'typeVar': 'Float',
         'val': array([ 5965.])}
      output:Performance:amfor: {
        'pathname': 'my_flops.output:Performance:amfor',
         'promoted_name': 'my_flops.output:Performance:amfor',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:amfor',
         'typeVar': 'Float',
         'val': array([ 6517.])}
      output:Performance:ssfor: {
        'pathname': 'my_flops.output:Performance:ssfor',
         'promoted_name': 'my_flops.output:Performance:ssfor',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:ssfor',
         'typeVar': 'Float',
         'val': array([ 15310.])}
      output:Performance:esf: {
        'pathname': 'my_flops.output:Performance:esf',
         'promoted_name': 'my_flops.output:Performance:esf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:esf',
         'typeVar': 'Float',
         'val': array([ 0.9719])}
      output:Performance:thrso: {
        'pathname': 'my_flops.output:Performance:thrso',
         'promoted_name': 'my_flops.output:Performance:thrso',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:thrso',
         'typeVar': 'Float',
         'val': array([ 42470.5])}
      output:Performance:vmmo: {
        'pathname': 'my_flops.output:Performance:vmmo',
         'promoted_name': 'my_flops.output:Performance:vmmo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Performance:vmmo',
         'typeVar': 'Float',
         'val': array([ 0.8])}
      output:Payload:npf: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:npf',
         'promoted_name': 'my_flops.output:Payload:npf',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:npf',
         'typeVar': 'Int',
         'val': 20}
      output:Payload:npb: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:npb',
         'promoted_name': 'my_flops.output:Payload:npb',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:npb',
         'typeVar': 'Int',
         'val': 0}
      output:Payload:npt: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:npt',
         'promoted_name': 'my_flops.output:Payload:npt',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:npt',
         'typeVar': 'Int',
         'val': 180}
      output:Payload:nstu: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:nstu',
         'promoted_name': 'my_flops.output:Payload:nstu',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:nstu',
         'typeVar': 'Int',
         'val': -1}
      output:Payload:ngalc: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:ngalc',
         'promoted_name': 'my_flops.output:Payload:ngalc',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:ngalc',
         'typeVar': 'Int',
         'val': -1}
      output:Payload:nflcr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:nflcr',
         'promoted_name': 'my_flops.output:Payload:nflcr',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:nflcr',
         'typeVar': 'Int',
         'val': 3}
      output:Payload:nstuag: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Payload:nstuag',
         'promoted_name': 'my_flops.output:Payload:nstuag',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Payload:nstuag',
         'typeVar': 'Int',
         'val': 7}
      output:Payload:wppass: {
        'pathname': 'my_flops.output:Payload:wppass',
         'promoted_name': 'my_flops.output:Payload:wppass',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Payload:wppass',
         'typeVar': 'Float',
         'val': array([ 165.])}
      output:Payload:bpp: {
        'pathname': 'my_flops.output:Payload:bpp',
         'promoted_name': 'my_flops.output:Payload:bpp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Payload:bpp',
         'typeVar': 'Float',
         'val': array([ 40.])}
      output:Payload:cargow: {
        'pathname': 'my_flops.output:Payload:cargow',
         'promoted_name': 'my_flops.output:Payload:cargow',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Payload:cargow',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Payload:cargof: {
        'pathname': 'my_flops.output:Payload:cargof',
         'promoted_name': 'my_flops.output:Payload:cargof',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Payload:cargof',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Payload:wcon: {
        'pathname': 'my_flops.output:Payload:wcon',
         'promoted_name': 'my_flops.output:Payload:wcon',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Payload:wcon',
         'typeVar': 'Float',
         'val': array([ 1.])}
      output:Noise:nsplot: {
        'msg': 'Noise output filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.output:Noise:nsplot',
         'promoted_name': 'my_flops.output:Noise:nsplot',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Noise:nsplot',
         'typeVar': 'Str',
         'val': ''}
      output:Geometry:BWB:xlp: {
        'desc': 'Length of centerline',
         'pathname': 'my_flops.output:Geometry:BWB:xlp',
         'promoted_name': 'my_flops.output:Geometry:BWB:xlp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:xlp',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:BWB:xlw: {
        'desc': 'Length of side wall',
         'pathname': 'my_flops.output:Geometry:BWB:xlw',
         'promoted_name': 'my_flops.output:Geometry:BWB:xlw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:xlw',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:BWB:wf: {
        'desc': 'Width of cabin',
         'pathname': 'my_flops.output:Geometry:BWB:wf',
         'promoted_name': 'my_flops.output:Geometry:BWB:wf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:wf',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:BWB:acabin: {
        'desc': 'Cabin area',
         'pathname': 'my_flops.output:Geometry:BWB:acabin',
         'promoted_name': 'my_flops.output:Geometry:BWB:acabin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:acabin',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': array([ 0.])}
      output:Geometry:BWB:nbaw: {
        'desc': 'Number of bays',
         'pass_by_obj': True,
         'pathname': 'my_flops.output:Geometry:BWB:nbaw',
         'promoted_name': 'my_flops.output:Geometry:BWB:nbaw',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:nbaw',
         'typeVar': 'Int',
         'val': 0}
      output:Geometry:BWB:bayw: {
        'desc': 'Width of bay',
         'pathname': 'my_flops.output:Geometry:BWB:bayw',
         'promoted_name': 'my_flops.output:Geometry:BWB:bayw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:bayw',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:BWB:nlava: {
        'desc': 'NUMBER OF LAVATORIES',
         'pass_by_obj': True,
         'pathname': 'my_flops.output:Geometry:BWB:nlava',
         'promoted_name': 'my_flops.output:Geometry:BWB:nlava',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:nlava',
         'typeVar': 'Int',
         'val': 0}
      output:Geometry:BWB:ngally: {
        'desc': 'Number of galleys',
         'pass_by_obj': True,
         'pathname': 'my_flops.output:Geometry:BWB:ngally',
         'promoted_name': 'my_flops.output:Geometry:BWB:ngally',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:ngally',
         'typeVar': 'Int',
         'val': 0}
      output:Geometry:BWB:nclset: {
        'desc': 'Number of closets',
         'pass_by_obj': True,
         'pathname': 'my_flops.output:Geometry:BWB:nclset',
         'promoted_name': 'my_flops.output:Geometry:BWB:nclset',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:nclset',
         'typeVar': 'Int',
         'val': 0}
      output:Geometry:BWB:xl: {
        'desc': 'Total fuselage length',
         'pathname': 'my_flops.output:Geometry:BWB:xl',
         'promoted_name': 'my_flops.output:Geometry:BWB:xl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:xl',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:BWB:df: {
        'desc': 'Fuselage maximum depth',
         'pathname': 'my_flops.output:Geometry:BWB:df',
         'promoted_name': 'my_flops.output:Geometry:BWB:df',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:BWB:df',
         'typeVar': 'Float',
         'units': 'ft',
         'val': array([ 0.])}
      output:Geometry:xl: {
        'pathname': 'my_flops.output:Geometry:xl',
         'promoted_name': 'my_flops.output:Geometry:xl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:xl',
         'typeVar': 'Float',
         'val': array([ 151.43])}
      output:Geometry:wf: {
        'pathname': 'my_flops.output:Geometry:wf',
         'promoted_name': 'my_flops.output:Geometry:wf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:wf',
         'typeVar': 'Float',
         'val': array([ 16.43])}
      output:Geometry:df: {
        'pathname': 'my_flops.output:Geometry:df',
         'promoted_name': 'my_flops.output:Geometry:df',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:df',
         'typeVar': 'Float',
         'val': array([ 17.33])}
      output:Geometry:xlp: {
        'pathname': 'my_flops.output:Geometry:xlp',
         'promoted_name': 'my_flops.output:Geometry:xlp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:xlp',
         'typeVar': 'Float',
         'val': array([ 111.43])}
      output:Geometry:ar: {
        'pathname': 'my_flops.output:Geometry:ar',
         'promoted_name': 'my_flops.output:Geometry:ar',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:ar',
         'typeVar': 'Float',
         'val': array([ 8.])}
      output:Geometry:sw: {
        'pathname': 'my_flops.output:Geometry:sw',
         'promoted_name': 'my_flops.output:Geometry:sw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:sw',
         'typeVar': 'Float',
         'val': array([ 2032.1])}
      output:Geometry:tr: {
        'pathname': 'my_flops.output:Geometry:tr',
         'promoted_name': 'my_flops.output:Geometry:tr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:tr',
         'typeVar': 'Float',
         'val': array([ 0.27])}
      output:Geometry:sweep: {
        'pathname': 'my_flops.output:Geometry:sweep',
         'promoted_name': 'my_flops.output:Geometry:sweep',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:sweep',
         'typeVar': 'Float',
         'val': array([ 32.])}
      output:Geometry:tca: {
        'pathname': 'my_flops.output:Geometry:tca',
         'promoted_name': 'my_flops.output:Geometry:tca',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:tca',
         'typeVar': 'Float',
         'val': array([ 0.11])}
      output:Geometry:span: {
        'pathname': 'my_flops.output:Geometry:span',
         'promoted_name': 'my_flops.output:Geometry:span',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:span',
         'typeVar': 'Float',
         'val': array([ 127.5])}
      output:Geometry:glov: {
        'pathname': 'my_flops.output:Geometry:glov',
         'promoted_name': 'my_flops.output:Geometry:glov',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:glov',
         'typeVar': 'Float',
         'val': array([ 0.])}
      output:Geometry:sht: {
        'pathname': 'my_flops.output:Geometry:sht',
         'promoted_name': 'my_flops.output:Geometry:sht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:sht',
         'typeVar': 'Float',
         'val': array([ 342.2])}
      output:Geometry:svt: {
        'pathname': 'my_flops.output:Geometry:svt',
         'promoted_name': 'my_flops.output:Geometry:svt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:svt',
         'typeVar': 'Float',
         'val': array([ 342.2])}
      output:Geometry:xnac: {
        'pathname': 'my_flops.output:Geometry:xnac',
         'promoted_name': 'my_flops.output:Geometry:xnac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:xnac',
         'typeVar': 'Float',
         'val': array([ 14.43])}
      output:Geometry:dnac: {
        'pathname': 'my_flops.output:Geometry:dnac',
         'promoted_name': 'my_flops.output:Geometry:dnac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:dnac',
         'typeVar': 'Float',
         'val': array([ 8.24])}
      output:Geometry:xmlg: {
        'pathname': 'my_flops.output:Geometry:xmlg',
         'promoted_name': 'my_flops.output:Geometry:xmlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:xmlg',
         'typeVar': 'Float',
         'val': array([ 132.96])}
      output:Geometry:xnlg: {
        'pathname': 'my_flops.output:Geometry:xnlg',
         'promoted_name': 'my_flops.output:Geometry:xnlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.output:Geometry:xnlg',
         'typeVar': 'Float',
         'val': array([ 93.07])}
      output:Engine:ofile: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Engine:ofile',
         'promoted_name': 'my_flops.output:Engine:ofile',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Engine:ofile',
         'typeVar': 'Str',
         'val': ''}
      output:Engine:eofile: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Engine:eofile',
         'promoted_name': 'my_flops.output:Engine:eofile',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Engine:eofile',
         'typeVar': 'Str',
         'val': ''}
      output:Engine:anopp: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Engine:anopp',
         'promoted_name': 'my_flops.output:Engine:anopp',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Engine:anopp',
         'typeVar': 'Str',
         'val': ''}
      output:Engine:footpr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Engine:footpr',
         'promoted_name': 'my_flops.output:Engine:footpr',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Engine:footpr',
         'typeVar': 'Str',
         'val': ''}
      output:Engine:pltfil: {
        'pass_by_obj': True,
         'pathname': 'my_flops.output:Engine:pltfil',
         'promoted_name': 'my_flops.output:Engine:pltfil',
         'size': 0,
         'top_promoted_name': 'my_flops.output:Engine:pltfil',
         'typeVar': 'Str',
         'val': ''}
      output:Econ:sl: {
        'pathname': 'my_flops.output:Econ:sl',
         'promoted_name': 'my_flops.output:Econ:sl',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:sl',
         'typeVar': 'Array',
         'val': array([ 2615.6,  2105.4])}
      output:Econ:blockt: {
        'pathname': 'my_flops.output:Econ:blockt',
         'promoted_name': 'my_flops.output:Econ:blockt',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:blockt',
         'typeVar': 'Array',
         'val': array([ 6.19,  5.09])}
      output:Econ:blockf: {
        'pathname': 'my_flops.output:Econ:blockf',
         'promoted_name': 'my_flops.output:Econ:blockf',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:blockf',
         'typeVar': 'Array',
         'val': array([ 48268.2,  38369.5])}
      output:Econ:blockNx: {
        'pathname': 'my_flops.output:Econ:blockNx',
         'promoted_name': 'my_flops.output:Econ:blockNx',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:blockNx',
         'typeVar': 'Array',
         'val': array([ 0.,  0.])}
      output:Econ:wpayl: {
        'pathname': 'my_flops.output:Econ:wpayl',
         'promoted_name': 'my_flops.output:Econ:wpayl',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:wpayl',
         'typeVar': 'Array',
         'val': array([ 41000.,  41000.])}
      output:Econ:wgross: {
        'pathname': 'my_flops.output:Econ:wgross',
         'promoted_name': 'my_flops.output:Econ:wgross',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:wgross',
         'typeVar': 'Array',
         'val': array([ 223528.9,  212685.8])}
      output:Econ:range: {
        'pathname': 'my_flops.output:Econ:range',
         'promoted_name': 'my_flops.output:Econ:range',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:range',
         'typeVar': 'Array',
         'val': array([ 2500.,  2000.])}
      output:Econ:vapp: {
        'pathname': 'my_flops.output:Econ:vapp',
         'promoted_name': 'my_flops.output:Econ:vapp',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:vapp',
         'typeVar': 'Array',
         'val': array([ 128.3,  125.2])}
      output:Econ:faroff: {
        'pathname': 'my_flops.output:Econ:faroff',
         'promoted_name': 'my_flops.output:Econ:faroff',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:faroff',
         'typeVar': 'Array',
         'val': array([ 5485.,  5060.])}
      output:Econ:farldg: {
        'pathname': 'my_flops.output:Econ:farldg',
         'promoted_name': 'my_flops.output:Econ:farldg',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:farldg',
         'typeVar': 'Array',
         'val': array([ 5965.,  5797.])}
      output:Econ:amfor: {
        'pathname': 'my_flops.output:Econ:amfor',
         'promoted_name': 'my_flops.output:Econ:amfor',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:amfor',
         'typeVar': 'Array',
         'val': array([ 6517.,  8318.])}
      output:Econ:ssfor: {
        'pathname': 'my_flops.output:Econ:ssfor',
         'promoted_name': 'my_flops.output:Econ:ssfor',
         'shape': (2,),
         'size': 2,
         'top_promoted_name': 'my_flops.output:Econ:ssfor',
         'typeVar': 'Array',
         'val': array([ 15310.,  16665.])}
      params:
      input:missin:Basic:npcon: {
        'desc': 'Number of PCONIN namelists to be created',
         'iotype': 'in',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:npcon',
         'promoted_name': 'input:missin:Basic:npcon',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:npcon',
         'val': 0}
      input:title: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:title',
         'promoted_name': 'input:title',
         'size': 0,
         'top_promoted_name': 'my_flops.input:title',
         'typeVar': 'Str',
         'val': 'SUBSONIC TRANSPORT EXAMPLE PROBLEM WITH COSTS AND RERUN'}
      input:aerin:Takeoff_Landing:wratio: {
        'desc': 'Ratio of maximum landing weight to maximum takeoff weight '
                 '(Default = WLDG/GW if WLDG is input, otherwise for '
                 'supersonic aircraft Default = 1. - .00009*DESRNG, for '
                 'subsonic aircraft Default = 1. - .00004*DESRNG)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:wratio',
         'promoted_name': 'input:aerin:Takeoff_Landing:wratio',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:wratio',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Takeoff_Landing:vappr: {
        'desc': 'Maximum allowable landing approach velocity',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:vappr',
         'promoted_name': 'input:aerin:Takeoff_Landing:vappr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:vappr',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': 150.0}
      input:aerin:Takeoff_Landing:flto: {
        'desc': 'Maximum allowable takeoff field length',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:flto',
         'promoted_name': 'input:aerin:Takeoff_Landing:flto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:flto',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 7000.0}
      input:aerin:Takeoff_Landing:flldg: {
        'desc': 'Maximum allowable landing field length',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:flldg',
         'promoted_name': 'input:aerin:Takeoff_Landing:flldg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:flldg',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:aerin:Takeoff_Landing:cltom: {
        'desc': 'Maximum CL in takeoff configuration',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:cltom',
         'promoted_name': 'input:aerin:Takeoff_Landing:cltom',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:cltom',
         'typeVar': 'Float',
         'val': 2.0}
      input:aerin:Takeoff_Landing:clldm: {
        'desc': 'Maximum CL in landing configuration',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:clldm',
         'promoted_name': 'input:aerin:Takeoff_Landing:clldm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:clldm',
         'typeVar': 'Float',
         'val': 3.0}
      input:aerin:Takeoff_Landing:clapp: {
        'desc': 'Approach CL',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:clapp',
         'promoted_name': 'input:aerin:Takeoff_Landing:clapp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:clapp',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Takeoff_Landing:dratio: {
        'desc': 'Takeoff and landing air density ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:dratio',
         'promoted_name': 'input:aerin:Takeoff_Landing:dratio',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:dratio',
         'typeVar': 'Float',
         'val': 1.0}
      input:aerin:Takeoff_Landing:elodss: {
        'desc': 'Lift-Drag ratio for second segment climb (Default is '
                 'internally computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:elodss',
         'promoted_name': 'input:aerin:Takeoff_Landing:elodss',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:elodss',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Takeoff_Landing:elodma: {
        'desc': 'Lift-Drag ratio for missed approach climb (Default is '
                 'internally computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:elodma',
         'promoted_name': 'input:aerin:Takeoff_Landing:elodma',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:elodma',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Takeoff_Landing:thrss: {
        'desc': 'Thrust per baseline engine for second segment climb '
                 '(Default = THRUST, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:thrss',
         'promoted_name': 'input:aerin:Takeoff_Landing:thrss',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:thrss',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:aerin:Takeoff_Landing:thrma: {
        'desc': 'Thrust per baseline engine for missed approach climb '
                 '(Default = THRSS)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:thrma',
         'promoted_name': 'input:aerin:Takeoff_Landing:thrma',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:thrma',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:aerin:Takeoff_Landing:throff: {
        'desc': 'Thrust per baseline engine for takeoff (Default = THRSS)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Takeoff_Landing:throff',
         'promoted_name': 'input:aerin:Takeoff_Landing:throff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Takeoff_Landing:throff',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:aerin:Internal_Aero:cam: {
        'desc': 'Maximum camber at 70% semispan, percent of local chord',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:cam',
         'promoted_name': 'input:aerin:Internal_Aero:cam',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:cam',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:sbase: {
        'desc': 'Aircraft base area (total exit cross-section area minus '
                 'inlet capture areas for internally mounted engines)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:sbase',
         'promoted_name': 'input:aerin:Internal_Aero:sbase',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:sbase',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:aerin:Internal_Aero:aitek: {
        'desc': 'Airfoil technology parameter.  Use 1 for conventional wing '
                 'and 2 for advanced technology wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:aitek',
         'promoted_name': 'input:aerin:Internal_Aero:aitek',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:aitek',
         'typeVar': 'Float',
         'val': 1.5}
      input:aerin:Internal_Aero:modaro: {
        'aliases': ('No', 'Yes'),
         'desc': 'Data tables in EDET are to be modified, Namelist &ARIDE '
                 'will be read in',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:modaro',
         'promoted_name': 'input:aerin:Internal_Aero:modaro',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:modaro',
         'typeVar': 'Enum',
         'val': 0}
      input:aerin:Internal_Aero:fcldes: {
        'desc': 'Fixed design lift coefficient.  If input, overrides design '
                 'CL computed by EDET.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:fcldes',
         'promoted_name': 'input:aerin:Internal_Aero:fcldes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:fcldes',
         'typeVar': 'Float',
         'val': -1.0}
      input:aerin:Internal_Aero:fmdes: {
        'desc': 'Fixed design Mach number.  If input, overrides design Mach '
                 'number computed by EDET.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:fmdes',
         'promoted_name': 'input:aerin:Internal_Aero:fmdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:fmdes',
         'typeVar': 'Float',
         'val': -1.0}
      input:aerin:Internal_Aero:xllam: {
        'aliases': ('Turbulent', 'Laminar'),
         'desc': 'Use 0 for Turbulent flow and 1 for Laminar Flow',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:xllam',
         'promoted_name': 'input:aerin:Internal_Aero:xllam',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:xllam',
         'typeVar': 'Enum',
         'val': 0}
      input:aerin:Internal_Aero:truw: {
        'desc': 'Percent LF wing upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:truw',
         'promoted_name': 'input:aerin:Internal_Aero:truw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:truw',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trlw: {
        'desc': 'Percent LF wing low surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trlw',
         'promoted_name': 'input:aerin:Internal_Aero:trlw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trlw',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:truh: {
        'desc': 'Percent LF horizontal tail upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:truh',
         'promoted_name': 'input:aerin:Internal_Aero:truh',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:truh',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trlh: {
        'desc': 'Percent LF horizontal tail lower surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trlh',
         'promoted_name': 'input:aerin:Internal_Aero:trlh',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trlh',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:truv: {
        'desc': 'Percent LF vertical tail upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:truv',
         'promoted_name': 'input:aerin:Internal_Aero:truv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:truv',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trlv: {
        'desc': 'Percent LF vertical tail lower surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trlv',
         'promoted_name': 'input:aerin:Internal_Aero:trlv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trlv',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trub: {
        'desc': 'Percent LF fuselage upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trub',
         'promoted_name': 'input:aerin:Internal_Aero:trub',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trub',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trlb: {
        'desc': 'Percent LF fuselage lower surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trlb',
         'promoted_name': 'input:aerin:Internal_Aero:trlb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trlb',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trun: {
        'desc': 'Percent LF nacelle upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trun',
         'promoted_name': 'input:aerin:Internal_Aero:trun',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trun',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trln: {
        'desc': 'Percent LF nacelle lower surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trln',
         'promoted_name': 'input:aerin:Internal_Aero:trln',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trln',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:truc: {
        'desc': 'Percent LF canard upper surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:truc',
         'promoted_name': 'input:aerin:Internal_Aero:truc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:truc',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:trlc: {
        'desc': 'Percent LF canard lower surface',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:trlc',
         'promoted_name': 'input:aerin:Internal_Aero:trlc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:trlc',
         'typeVar': 'Float',
         'val': 0.0}
      input:aerin:Internal_Aero:e: {
        'desc': 'Aerodynamic efficiency factor: use 1 for normal wing '
                 'efficiency; normal wing efficiency modified for taper '
                 'ratio and aspect ratio plus E if < 0; Otherwise, normal '
                 'wing efficiency multiplied by E',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:e',
         'promoted_name': 'input:aerin:Internal_Aero:e',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:e',
         'typeVar': 'Float',
         'val': 1.0}
      input:aerin:Internal_Aero:swetw: {
        'desc': 'Wing wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:swetw',
         'promoted_name': 'input:aerin:Internal_Aero:swetw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:swetw',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Internal_Aero:sweth: {
        'desc': 'Horizontal tail wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:sweth',
         'promoted_name': 'input:aerin:Internal_Aero:sweth',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:sweth',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Internal_Aero:swetv: {
        'desc': 'Vertical tail wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:swetv',
         'promoted_name': 'input:aerin:Internal_Aero:swetv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:swetv',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Internal_Aero:swetf: {
        'desc': 'Fuselage wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:swetf',
         'promoted_name': 'input:aerin:Internal_Aero:swetf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:swetf',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Internal_Aero:swetn: {
        'desc': 'Nacelle wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:swetn',
         'promoted_name': 'input:aerin:Internal_Aero:swetn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:swetn',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Internal_Aero:swetc: {
        'desc': 'Canard wetted area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Internal_Aero:swetc',
         'promoted_name': 'input:aerin:Internal_Aero:swetc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Internal_Aero:swetc',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 1.0}
      input:aerin:Basic:myaero: {
        'aliases': (        'Internal',
                             'Fixed input',
                             'Scalable input',
                             'Parabolic',
                             'Response surface'),
         'desc': 'Controls type of user-supplied aerodynamic data\n'
                 '= 0, Drag polars are computed internally\n'
                 '= 1, Aerodynamic Data will be read in\n'
                 '= 2, Scalable Aerodynamic Data will be input (Namelist '
                 '&ASCLIN required)\n'
                 '= 3, Special parabolic Aerodynamic Data format (Namelist '
                 '&RFHIN required)\n'
                 '= 4, Use aerodynamic response surface - available only in '
                 'DOSS version',
         'optionsVal': (0, 1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Basic:myaero',
         'promoted_name': 'input:aerin:Basic:myaero',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Basic:myaero',
         'typeVar': 'Enum',
         'val': 0}
      input:aerin:Basic:iwave: {
        'aliases': ('No', 'Yes'),
         'desc': 'Controls Wave Drag Data input type\n'
                 '= 1, Input Wave Drag Data will be formatted\n'
                 '= 0, Otherwise',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Basic:iwave',
         'promoted_name': 'input:aerin:Basic:iwave',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Basic:iwave',
         'typeVar': 'Enum',
         'val': 0}
      input:aerin:Basic:fwave: {
        'desc': 'Wave drag factor - multiplies input values of wave drag '
                 'from formatted aerodynamic data or Namelist &ASCLIN',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Basic:fwave',
         'promoted_name': 'input:aerin:Basic:fwave',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:aerin:Basic:fwave',
         'typeVar': 'Float',
         'val': 1.0}
      input:aerin:Basic:itpaer: {
        'aliases': ('Linear', 'Parabolic', 'Combination'),
         'desc': 'Aerodynamic data interpolation switch\n'
                 '= 1, Linear - Use if aerodynamic data is irregular.  This '
                 'is usually indicated by strange climb, descent or cruise '
                 'profiles.\n'
                 '= 2, Parabolic\n'
                 '= 3, Parabolic interpolation for CL, linear interpolation '
                 'for Mach number and altitude.',
         'optionsVal': (1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Basic:itpaer',
         'promoted_name': 'input:aerin:Basic:itpaer',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Basic:itpaer',
         'typeVar': 'Enum',
         'val': 2}
      input:aerin:Basic:ibo: {
        'aliases': ('Continuous', '1 Mach/line'),
         'desc': 'Format indicator for input aerodynamic matrices\n'
                 '= 1, A new line is started for each Mach number for Cards '
                 '4 and for each altitude for Cards 8\n'
                 '= 0, Data is continuous, 10 to a line',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:aerin:Basic:ibo',
         'promoted_name': 'input:aerin:Basic:ibo',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aerin:Basic:ibo',
         'typeVar': 'Enum',
         'val': 0}
      input:aero_data:aerodat: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:aero_data:aerodat',
         'promoted_name': 'input:aero_data:aerodat',
         'size': 0,
         'top_promoted_name': 'my_flops.input:aero_data:aerodat',
         'typeVar': 'Str',
         'val': ''}
      input:asclin:sref: {
        'desc': 'Wing area on which aerodynamic input is based (Default = '
                 'SW, Namelist &CONFIN). If different from SW, aerodynamics '
                 'will be scaled.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:sref',
         'promoted_name': 'input:asclin:sref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:asclin:sref',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:asclin:tref: {
        'desc': 'Engine thrust corresponding to nacelle size used in '
                 'generating aerodynamic input data (Default = THRUST, '
                 'Namelist &CONFIN). If different from THRUST, aerodynamic '
                 'data will be modified.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:tref',
         'promoted_name': 'input:asclin:tref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:asclin:tref',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:asclin:awetn: {
        'desc': 'Nacelle wetted area/SREF',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:awetn',
         'promoted_name': 'input:asclin:awetn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:asclin:awetn',
         'typeVar': 'Float',
         'val': 0.0}
      input:asclin:eltot: {
        'desc': 'Total configuration length (Default = fuselage length)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:eltot',
         'promoted_name': 'input:asclin:eltot',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:asclin:eltot',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:asclin:voltot: {
        'desc': 'Total configuration volume',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:voltot',
         'promoted_name': 'input:asclin:voltot',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:asclin:voltot',
         'typeVar': 'Float',
         'units': 'ft*ft*ft',
         'val': 0.0}
      input:asclin:awett: {
        'desc': 'Total wetted area/SREF.  For variable geometry aircraft, '
                 'up to NMP values may be input',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:awett',
         'promoted_name': 'input:asclin:awett',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:awett',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:asclin:awetw: {
        'desc': 'Wing wetted area/SREF',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:awetw',
         'promoted_name': 'input:asclin:awetw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:awetw',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:asclin:elw: {
        'desc': 'Total length of exposed wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:elw',
         'promoted_name': 'input:asclin:elw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:elw',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:asclin:volw: {
        'desc': 'Total volume of exposed wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:volw',
         'promoted_name': 'input:asclin:volw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:volw',
         'typeVar': 'Array,float',
         'units': 'ft*ft*ft',
         'val': array([], dtype=float64)}
      input:asclin:form: {
        'desc': 'Subsonic form factor for total configuration',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:form',
         'promoted_name': 'input:asclin:form',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:form',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:asclin:eql: {
        'desc': 'Equivalent friction length for total baseline '
                 'configuration.  If EQL is omitted, skin friction drag is '
                 'computed from component data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:eql',
         'promoted_name': 'input:asclin:eql',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:eql',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:asclin:cdwav: {
        'desc': 'Wave drag coefficients (NMP values)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:cdwav',
         'promoted_name': 'input:asclin:cdwav',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:cdwav',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:asclin:dcdnac: {
        'desc': 'Delta wave drag coefficients, nacelles on - nacelles off',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:asclin:dcdnac',
         'promoted_name': 'input:asclin:dcdnac',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:asclin:dcdnac',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:confin:Basic:desrng: {
        'desc': 'Design range (or endurance).  See INDR in Namelist '
                 '&MISSIN)\n'
                 'Required - if IRW = 2 in Namelist &MISSIN, the range is '
                 'computed, but a reasonable guess must still be input',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:desrng',
         'promoted_name': 'input:confin:Basic:desrng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:desrng',
         'typeVar': 'Float',
         'val': 2500.0}
      input:confin:Basic:wsr: {
        'desc': 'Required wing loading if > 0.\n'
                 'Do not set WSR > 0 during optimization or if wing area is '
                 'being varied.\n'
                 'Interpret SW as wing loading for parametric variation if = '
                 '-1.\n'
                 'Do not use for optimization.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:wsr',
         'promoted_name': 'input:confin:Basic:wsr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:wsr',
         'typeVar': 'Float',
         'val': 110.0}
      input:confin:Basic:twr: {
        'desc': 'Required total thrust-weight ratio if > 0.\n'
                 'Do not set TWR > 0 during optimization or if thrust is '
                 'being varied.\n'
                 'Interpret THRUST as thrust-weight ratio for parametric '
                 'variation if = -1.\n'
                 'Do not use for optimization.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:twr',
         'promoted_name': 'input:confin:Basic:twr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:twr',
         'typeVar': 'Float',
         'val': 0.38}
      input:confin:Basic:htvc: {
        'desc': 'Modified horizontal tail volume coefficient.\n'
                 'If HTVC > 0., SHT = HTVC * SW * Sqrt(SW/AR) / XL (This '
                 'overrides any input value for SHT)\n'
                 'If HTVC = 1., the horizontal tail volume coefficient '
                 'calculated from the input values of SHT, SW, AR and XL '
                 'will be maintained.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:htvc',
         'promoted_name': 'input:confin:Basic:htvc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:htvc',
         'typeVar': 'Float',
         'val': 1.6}
      input:confin:Basic:vtvc: {
        'desc': 'Modified vertical tail volume coefficient.\n'
                 'If VTVC > 0., SVT = VTVC * SW * Sqrt(SW*AR) / XL (This '
                 'overrides any input value for SVT)\n'
                 'If VTVC = 1., the vertical tail volume coefficient '
                 'calculated from the input values of SVT, SW, AR and XL '
                 'will be maintained.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:vtvc',
         'promoted_name': 'input:confin:Basic:vtvc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:vtvc',
         'typeVar': 'Float',
         'val': 0.2}
      input:confin:Basic:pglov: {
        'desc': 'Fixed ratio of glove area to wing area (GLOV/SW).\n'
                 'If PGLOV > 0., GLOV will change if SW changes.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:pglov',
         'promoted_name': 'input:confin:Basic:pglov',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:pglov',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Basic:fixspn: {
        'desc': 'Special Option - Fixed wing span.  If the wing area is '
                 'being varied or optimized, the wing aspect ratio will be '
                 'adjusted to maintain a constant span.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:fixspn',
         'promoted_name': 'input:confin:Basic:fixspn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:fixspn',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:confin:Basic:fixful: {
        'desc': 'Special Option - Fixed mission fuel.  Allows specification '
                 'of mission fuel.\n'
                 'Since this fuel is normally a fall out (what is left over '
                 'after OWE and payload are subtracted from the gross '
                 'weight), this option requires iterating on the gross '
                 'weight until the mission fuel = FIXFUL.  Gross weight '
                 'cannot be an active design variable or used in a '
                 'parametric variation, and IRW must be 2 in Namelist '
                 '&MISSIN.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Basic:fixful',
         'promoted_name': 'input:confin:Basic:fixful',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Basic:fixful',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:confin:Objective:ofg: {
        'desc': 'Objective function weighting factor for gross weight \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofg',
         'promoted_name': 'input:confin:Objective:ofg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofg',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:off: {
        'desc': 'Objective function weighting factor for mission fuel \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:off',
         'promoted_name': 'input:confin:Objective:off',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:off',
         'typeVar': 'Float',
         'val': 1.0}
      input:confin:Objective:ofm: {
        'desc': 'Objective function weighting factor for Mach*(L/D), should '
                 'be negative to maximize \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofm',
         'promoted_name': 'input:confin:Objective:ofm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofm',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofr: {
        'desc': 'Objective function weighting factor for Range, should be '
                 'negative to maximize. \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofr',
         'promoted_name': 'input:confin:Objective:ofr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofr',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofc: {
        'desc': 'Objective function weighting factor for Cost \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofc',
         'promoted_name': 'input:confin:Objective:ofc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofc',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:osfc: {
        'desc': 'Objective function weighting factor for Specific Fuel '
                 'Consumption at the engine design point.  Generally used '
                 'only for engine design cases (IANAL = 4). \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:osfc',
         'promoted_name': 'input:confin:Objective:osfc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:osfc',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofnox: {
        'desc': 'Objective function weighting factor for NOx emissions \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofnox',
         'promoted_name': 'input:confin:Objective:ofnox',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofnox',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofnf: {
        'desc': 'Objective function weighting factor for flyover noise '
                 '(used primarily for contour plots) \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofnf',
         'promoted_name': 'input:confin:Objective:ofnf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofnf',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofns: {
        'desc': 'Objective function weighting factor for sideline noise '
                 '(used primarily for contour plots) \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofns',
         'promoted_name': 'input:confin:Objective:ofns',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofns',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofnfom: {
        'desc': 'Objective function weighting factor for noise figure of '
                 'merit \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofnfom',
         'promoted_name': 'input:confin:Objective:ofnfom',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofnfom',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:oarea: {
        'desc': 'Objective function weighting factor for area of noise '
                 'footprint (not implemented) \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:oarea',
         'promoted_name': 'input:confin:Objective:oarea',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:oarea',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Objective:ofh: {
        'desc': 'Objective function weighting factor for hold time for '
                 'segment NHOLD (See Namelist &MISSIN) \n'
                 'The function that is minimized is\n'
                 ' \n'
                 ' OBJ = OFG*GW \n'
                 ' + OFF*Fuel \n'
                 ' + OFM*VCMN*(Lift/Drag) \n'
                 ' + OFR*Range + OFC*Cost \n'
                 ' + OSFC*SFC \n'
                 ' + OFNOX*NOx \n'
                 ' + OFNF*(Flyover Noise) \n'
                 ' + OFNS*(Sideline Noise) \n'
                 ' + OFNFOM*(Noise Figure of Merit) \n'
                 ' + OFH*(Hold Time for Segment NHOLD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Objective:ofh',
         'promoted_name': 'input:confin:Objective:ofh',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:confin:Objective:ofh',
         'typeVar': 'Float',
         'val': 0.0}
      input:confin:Design_Variables:gw: {
        'desc': 'GW(0)=Ramp weight (Required.  If IRW = 1, a good initial '
                 'guess must be input.)\n'
                 'GW(1)=Activity status, active if > 0\n'
                 'GW(2)=Lower bound\n'
                 'GW(3)=Upper bound\n'
                 'GW(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:gw',
         'promoted_name': 'input:confin:Design_Variables:gw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:gw',
         'typeVar': 'Array,float',
         'units': 'lb',
         'val': array([ 230000.])}
      input:confin:Design_Variables:ar: {
        'desc': 'AR(0)=Wing aspect ratio\n'
                 'AR(1)=Activity status, active if > 0\n'
                 'AR(2)=Lower bound\n'
                 'AR(3)=Upper bound\n'
                 'AR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:ar',
         'promoted_name': 'input:confin:Design_Variables:ar',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:ar',
         'typeVar': 'Array',
         'val': array([ 8.])}
      input:confin:Design_Variables:thrust: {
        'desc': 'THRUST(0)=Maximum rated thrust per engine, or '
                 'thrust-weight ratio if TWR = -1.\n'
                 'THRUST(1)=Activity status, active if > 0\n'
                 'THRUST(2)=Lower bound\n'
                 'THRUST(3)=Upper bound\n'
                 'THRUST(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:thrust',
         'promoted_name': 'input:confin:Design_Variables:thrust',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:thrust',
         'typeVar': 'Array,float',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:sw: {
        'desc': 'SW(0)=Reference wing area, or wing loading if WSR = -1.\n'
                 'SW(1)=Activity status, active if > 0\n'
                 'SW(2)=Lower bound\n'
                 'SW(3)=Upper bound\n'
                 'SW(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:sw',
         'promoted_name': 'input:confin:Design_Variables:sw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:sw',
         'typeVar': 'Array,float',
         'units': 'ft*ft',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:tr: {
        'desc': 'TR(0)=Taper ratio of the wing (Required)\n'
                 'TR(1)=Activity status, active if > 0\n'
                 'TR(2)=Lower bound\n'
                 'TR(3)=Upper bound\n'
                 'TR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:tr',
         'promoted_name': 'input:confin:Design_Variables:tr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:tr',
         'typeVar': 'Array',
         'val': array([ 0.27])}
      input:confin:Design_Variables:sweep: {
        'desc': 'SWEEP(0)=Quarter-chord sweep angle of the wing (Required)\n'
                 'SWEEP(1)=Activity status, active if > 0\n'
                 'SWEEP(2)=Lower bound\n'
                 'SWEEP(3)=Upper bound\n'
                 'SWEEP(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:sweep',
         'promoted_name': 'input:confin:Design_Variables:sweep',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:sweep',
         'typeVar': 'Array,float',
         'units': 'deg',
         'val': array([ 32.])}
      input:confin:Design_Variables:tca: {
        'desc': 'TCA(0)=Wing thickness-chord ratio (weighted average) '
                 '(Required)\n'
                 'TCA(1)=Activity status, active if > 0\n'
                 'TCA(2)=Lower bound\n'
                 'TCA(3)=Upper bound\n'
                 'TCA(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:tca',
         'promoted_name': 'input:confin:Design_Variables:tca',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:tca',
         'typeVar': 'Array',
         'val': array([ 0.11])}
      input:confin:Design_Variables:vcmn: {
        'desc': 'VCMN(0)=Cruise Mach number (Required)\n'
                 'VCMN(1)=Activity status, active if > 0\n'
                 'VCMN(2)=Lower bound\n'
                 'VCMN(3)=Upper bound\n'
                 'VCMN(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:vcmn',
         'promoted_name': 'input:confin:Design_Variables:vcmn',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:vcmn',
         'typeVar': 'Array',
         'val': array([ 0.8])}
      input:confin:Design_Variables:ch: {
        'desc': 'CH(0)=Maximum cruise altitude (Required)\n'
                 'CH(1)=Activity status, active if > 0\n'
                 'CH(2)=Lower bound\n'
                 'CH(3)=Upper bound\n'
                 'CH(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:ch',
         'promoted_name': 'input:confin:Design_Variables:ch',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:ch',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([ 40000.])}
      input:confin:Design_Variables:varth: {
        'desc': 'VARTH(0)=Thrust derating factor for takeoff noise Fraction '
                 'of full thrust used in takeoff\n'
                 'VARTH(1)=Activity status, active if > 0\n'
                 'VARTH(2)=Lower bound\n'
                 'VARTH(3)=Upper bound\n'
                 'VARTH(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:varth',
         'promoted_name': 'input:confin:Design_Variables:varth',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:varth',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:rotvel: {
        'desc': 'ROTVEL(0)=Rotation velocity for takeoff noise abatement '
                 '(default is minimum required to meet takeoff performance '
                 'constraints)\n'
                 'ROTVEL(1)=Activity status, active if > 0\n'
                 'ROTVEL(2)=Lower bound\n'
                 'ROTVEL(3)=Upper bound\n'
                 'ROTVEL(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:rotvel',
         'promoted_name': 'input:confin:Design_Variables:rotvel',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:rotvel',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:plr: {
        'desc': 'PLR(0)=Thrust fraction after programmed lapse rate '
                 '(default thrust is specified in each segment)\n'
                 'PLR(1)=Activity status, active if > 0\n'
                 'PLR(2)=Lower bound\n'
                 'PLR(3)=Upper bound\n'
                 'PLR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:plr',
         'promoted_name': 'input:confin:Design_Variables:plr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:plr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:etit: {
        'desc': 'ETIT(0)=Engine design point turbine entry temperature\n'
                 'ETIT(1)=Activity status, active if > 0\n'
                 'ETIT(2)=Lower bound\n'
                 'ETIT(3)=Upper bound\n'
                 'ETIT(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:etit',
         'promoted_name': 'input:confin:Design_Variables:etit',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:etit',
         'typeVar': 'Array',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:eopr: {
        'desc': 'EOPR(0)=Overall pressure ratio\n'
                 'EOPR(1)=Activity status, active if > 0\n'
                 'EOPR(2)=Lower bound\n'
                 'EOPR(3)=Upper bound\n'
                 'EOPR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:eopr',
         'promoted_name': 'input:confin:Design_Variables:eopr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:eopr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:efpr: {
        'desc': 'EFPR(0)=Fan pressure ratio (turbofans only)\n'
                 'EFPR(1)=Activity status, active if > 0\n'
                 'EFPR(2)=Lower bound\n'
                 'EFPR(3)=Upper bound\n'
                 'EFPR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:efpr',
         'promoted_name': 'input:confin:Design_Variables:efpr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:efpr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:ebpr: {
        'desc': 'EBPR(0)=Bypass ratio (turbofans only)\n'
                 'EBPR(1)=Activity status, active if > 0\n'
                 'EBPR(2)=Lower bound\n'
                 'EBPR(3)=Upper bound\n'
                 'EBPR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:ebpr',
         'promoted_name': 'input:confin:Design_Variables:ebpr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:ebpr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:ettr: {
        'desc': 'ETTR(0)=Engine throttle ratio defined as the ratio of the '
                 'maximum allowable turbine inlet temperature divided by the '
                 'design point turbine inlet temperature.\n'
                 'If ETTR is greater than ETIT, it is assumed to be the '
                 'maximum allowable turbine inlet temperature.\n'
                 'ETTR(1)=Activity status, active if > 0\n'
                 'ETTR(2)=Lower bound\n'
                 'ETTR(3)=Upper bound\n'
                 'ETTR(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:ettr',
         'promoted_name': 'input:confin:Design_Variables:ettr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:ettr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:confin:Design_Variables:ebla: {
        'desc': 'EBLA(0)=Blade angle for fixed pitch propeller\n'
                 'EBLA(1)=Activity status, active if > 0\n'
                 'EBLA(2)=Lower bound\n'
                 'EBLA(3)=Upper bound\n'
                 'EBLA(4)=Optimization scale factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:confin:Design_Variables:ebla',
         'promoted_name': 'input:confin:Design_Variables:ebla',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:confin:Design_Variables:ebla',
         'typeVar': 'Array',
         'units': 'deg',
         'val': array([], dtype=float64)}
      input:costin:Mission_Performance:desmch: {
        'desc': 'Design Mach number (Default = VCMN, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Mission_Performance:desmch',
         'promoted_name': 'input:costin:Mission_Performance:desmch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Mission_Performance:desmch',
         'typeVar': 'Float',
         'val': 0.0}
      input:costin:Mission_Performance:dprsmx: {
        'desc': 'Maximum dynamic pressure (Default = 460. * DESMCH)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Mission_Performance:dprsmx',
         'promoted_name': 'input:costin:Mission_Performance:dprsmx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Mission_Performance:dprsmx',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 0.0}
      input:costin:Mission_Performance:veloc: {
        'desc': 'Cruise velocity (Default = 660. * DESMCH)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Mission_Performance:veloc',
         'promoted_name': 'input:costin:Mission_Performance:veloc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Mission_Performance:veloc',
         'typeVar': 'Float',
         'units': 'mi/h',
         'val': 0.0}
      input:costin:Mission_Performance:blockf: {
        'desc': 'Block fuel, or fraction of aircraft fuel capacity  '
                 '(Default = 0.90 * (FULWMX+FULFMX), Namelist &WTIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Mission_Performance:blockf',
         'promoted_name': 'input:costin:Mission_Performance:blockf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Mission_Performance:blockf',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.9}
      input:costin:Mission_Performance:blockt: {
        'desc': 'Block time (Default = DESRNG/VELOC + 0.65)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Mission_Performance:blockt',
         'promoted_name': 'input:costin:Mission_Performance:blockt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Mission_Performance:blockt',
         'typeVar': 'Float',
         'units': 'h',
         'val': 0.0}
      input:costin:Cost_Technology:fafrd: {
        'desc': 'Technology factor on Airframe R&D',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fafrd',
         'promoted_name': 'input:costin:Cost_Technology:fafrd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fafrd',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fenrd: {
        'desc': 'Technology factor on Engine R&D',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fenrd',
         'promoted_name': 'input:costin:Cost_Technology:fenrd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fenrd',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmac: {
        'desc': 'Technology factor on Air conditioning',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmac',
         'promoted_name': 'input:costin:Cost_Technology:fmac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmac',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmai: {
        'desc': 'Technology factor on Anti-icing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmai',
         'promoted_name': 'input:costin:Cost_Technology:fmai',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmai',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmapu: {
        'desc': 'Technology factor on Auxiliary power unit',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmapu',
         'promoted_name': 'input:costin:Cost_Technology:fmapu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmapu',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmav: {
        'desc': 'Technology factor on Avionics',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmav',
         'promoted_name': 'input:costin:Cost_Technology:fmav',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmav',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmbody: {
        'desc': 'Technology factor on Fuselage',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmbody',
         'promoted_name': 'input:costin:Cost_Technology:fmbody',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmbody',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmcomp: {
        'desc': 'Technology factor on Composite materials (applied to the '
                 'wing, tails, fuselage, and nacelles)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmcomp',
         'promoted_name': 'input:costin:Cost_Technology:fmcomp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmcomp',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmel: {
        'desc': 'Technology factor on Electrical systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmel',
         'promoted_name': 'input:costin:Cost_Technology:fmel',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmel',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmeng: {
        'desc': 'Technology factor on Engine',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmeng',
         'promoted_name': 'input:costin:Cost_Technology:fmeng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmeng',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmensy: {
        'desc': 'Technology factor on Engine systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmensy',
         'promoted_name': 'input:costin:Cost_Technology:fmensy',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmensy',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmfcs: {
        'desc': 'Technology factor on Surface controls',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmfcs',
         'promoted_name': 'input:costin:Cost_Technology:fmfcs',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmfcs',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmfeq: {
        'desc': 'Technology factor on Furnishings and equipment',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmfeq',
         'promoted_name': 'input:costin:Cost_Technology:fmfeq',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmfeq',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmfusy: {
        'desc': 'Technology factor on Fuel systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmfusy',
         'promoted_name': 'input:costin:Cost_Technology:fmfusy',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmfusy',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmgear: {
        'desc': 'Technology factor on Landing gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmgear',
         'promoted_name': 'input:costin:Cost_Technology:fmgear',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmgear',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmhyd: {
        'desc': 'Technology factor on Hydraulic systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmhyd',
         'promoted_name': 'input:costin:Cost_Technology:fmhyd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmhyd',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmins: {
        'desc': 'Technology factor on Instruments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmins',
         'promoted_name': 'input:costin:Cost_Technology:fmins',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmins',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmnac: {
        'desc': 'Technology factor on Nacelles',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmnac',
         'promoted_name': 'input:costin:Cost_Technology:fmnac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmnac',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmpnm: {
        'desc': 'Technology factor on Pneumatics',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmpnm',
         'promoted_name': 'input:costin:Cost_Technology:fmpnm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmpnm',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmtail: {
        'desc': 'Technology factor on Tail',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmtail',
         'promoted_name': 'input:costin:Cost_Technology:fmtail',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmtail',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmtrv: {
        'desc': 'Technology factor on Thrust reversers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmtrv',
         'promoted_name': 'input:costin:Cost_Technology:fmtrv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmtrv',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fmwing: {
        'desc': 'Technology factor on Wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fmwing',
         'promoted_name': 'input:costin:Cost_Technology:fmwing',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fmwing',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foac: {
        'desc': 'Technology factor on Air conditioning',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foac',
         'promoted_name': 'input:costin:Cost_Technology:foac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foac',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foai: {
        'desc': 'Technology factor on Anti-icing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foai',
         'promoted_name': 'input:costin:Cost_Technology:foai',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foai',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foapu: {
        'desc': 'Technology factor on Auxiliary power unit',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foapu',
         'promoted_name': 'input:costin:Cost_Technology:foapu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foapu',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foav: {
        'desc': 'Technology factor on Avionics',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foav',
         'promoted_name': 'input:costin:Cost_Technology:foav',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foav',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fobody: {
        'desc': 'Technology factor on Fuselage',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fobody',
         'promoted_name': 'input:costin:Cost_Technology:fobody',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fobody',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:focomp: {
        'desc': 'Technology factor on Composite materials',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:focomp',
         'promoted_name': 'input:costin:Cost_Technology:focomp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:focomp',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foel: {
        'desc': 'Technology factor on Electrical systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foel',
         'promoted_name': 'input:costin:Cost_Technology:foel',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foel',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fofcs: {
        'desc': 'Technology factor on Flight control system',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fofcs',
         'promoted_name': 'input:costin:Cost_Technology:fofcs',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fofcs',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fofeq: {
        'desc': 'Technology factor on Furnishings and equipment',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fofeq',
         'promoted_name': 'input:costin:Cost_Technology:fofeq',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fofeq',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fofusy: {
        'desc': 'Technology factor on Fuel systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fofusy',
         'promoted_name': 'input:costin:Cost_Technology:fofusy',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fofusy',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fogear: {
        'desc': 'Technology factor on Landing gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fogear',
         'promoted_name': 'input:costin:Cost_Technology:fogear',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fogear',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fohyd: {
        'desc': 'Technology factor on Hydraulic systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fohyd',
         'promoted_name': 'input:costin:Cost_Technology:fohyd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fohyd',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foins: {
        'desc': 'Technology factor on Instruments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foins',
         'promoted_name': 'input:costin:Cost_Technology:foins',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foins',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fonac: {
        'desc': 'Technology factor on Nacelles',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fonac',
         'promoted_name': 'input:costin:Cost_Technology:fonac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fonac',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fopnm: {
        'desc': 'Technology factor on Pneumatics',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fopnm',
         'promoted_name': 'input:costin:Cost_Technology:fopnm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fopnm',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:foprop: {
        'desc': 'Technology factor on Propulsion system',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:foprop',
         'promoted_name': 'input:costin:Cost_Technology:foprop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:foprop',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fowing: {
        'desc': 'Technology factor on Wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fowing',
         'promoted_name': 'input:costin:Cost_Technology:fowing',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fowing',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:feacsr: {
        'desc': 'Technology factor on Aircraft servicing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:feacsr',
         'promoted_name': 'input:costin:Cost_Technology:feacsr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:feacsr',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fecfee: {
        'desc': 'Technology factor on Aircraft control fee',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fecfee',
         'promoted_name': 'input:costin:Cost_Technology:fecfee',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fecfee',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fecrw: {
        'desc': 'Technology factor on Flight crew',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fecrw',
         'promoted_name': 'input:costin:Cost_Technology:fecrw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fecrw',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:fedep: {
        'desc': 'Technology factor on Depreciation',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:fedep',
         'promoted_name': 'input:costin:Cost_Technology:fedep',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:fedep',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:feflta: {
        'desc': 'Technology factor on Flight attendants',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:feflta',
         'promoted_name': 'input:costin:Cost_Technology:feflta',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:feflta',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:feins: {
        'desc': 'Technology factor on Insurance',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:feins',
         'promoted_name': 'input:costin:Cost_Technology:feins',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:feins',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:felabr: {
        'desc': 'Technology factor on R&D labor rate',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:felabr',
         'promoted_name': 'input:costin:Cost_Technology:felabr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:felabr',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:feldfe: {
        'desc': 'Technology factor on Landing fee',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:feldfe',
         'promoted_name': 'input:costin:Cost_Technology:feldfe',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:feldfe',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Cost_Technology:femain: {
        'desc': 'Technology factor on Maintenance hours',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Cost_Technology:femain',
         'promoted_name': 'input:costin:Cost_Technology:femain',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Cost_Technology:femain',
         'typeVar': 'Float',
         'val': 1.0}
      input:costin:Basic:ac: {
        'desc': 'Airconditioning total pack air flow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:ac',
         'promoted_name': 'input:costin:Basic:ac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:ac',
         'typeVar': 'Float',
         'units': 'lb/min',
         'val': 350.0}
      input:costin:Basic:apuflw: {
        'desc': 'Auxiliary power unit flow rate',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:apuflw',
         'promoted_name': 'input:costin:Basic:apuflw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:apuflw',
         'typeVar': 'Float',
         'units': 'lb/min',
         'val': 400.0}
      input:costin:Basic:apushp: {
        'desc': 'Auxiliary power unit shaft horsepower',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:apushp',
         'promoted_name': 'input:costin:Basic:apushp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:apushp',
         'typeVar': 'Float',
         'units': 'hp',
         'val': 170.0}
      input:costin:Basic:depper: {
        'desc': 'Depreciation period',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:depper',
         'promoted_name': 'input:costin:Basic:depper',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:depper',
         'typeVar': 'Float',
         'units': 'year',
         'val': 14.0}
      input:costin:Basic:devst: {
        'desc': 'Development start time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:devst',
         'promoted_name': 'input:costin:Basic:devst',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:devst',
         'typeVar': 'Float',
         'units': 'year',
         'val': 1980.0}
      input:costin:Basic:dlbur: {
        'desc': 'Direct labor burden factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:dlbur',
         'promoted_name': 'input:costin:Basic:dlbur',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:dlbur',
         'typeVar': 'Float',
         'val': 2.0}
      input:costin:Basic:dyear: {
        'desc': 'Desired year for dollar calculations',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:dyear',
         'promoted_name': 'input:costin:Basic:dyear',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:dyear',
         'typeVar': 'Int',
         'val': 1986}
      input:costin:Basic:epr: {
        'desc': 'Engine pressure ratio at sea level static',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:epr',
         'promoted_name': 'input:costin:Basic:epr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:epr',
         'typeVar': 'Float',
         'val': 20.0}
      input:costin:Basic:fafmsp: {
        'desc': 'Spares factor for production airframes',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:fafmsp',
         'promoted_name': 'input:costin:Basic:fafmsp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:fafmsp',
         'typeVar': 'Float',
         'val': 0.1}
      input:costin:Basic:fare: {
        'desc': 'Fare (Triggers calculation of return on investment)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:fare',
         'promoted_name': 'input:costin:Basic:fare',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:fare',
         'typeVar': 'Float',
         'units': 'USD/pax/mi',
         'val': 0.1}
      input:costin:Basic:fengsp: {
        'desc': 'Spares factor for production engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:fengsp',
         'promoted_name': 'input:costin:Basic:fengsp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:fengsp',
         'typeVar': 'Float',
         'val': 0.3}
      input:costin:Basic:fppft: {
        'desc': 'Spares factor for prototype and flight test engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:fppft',
         'promoted_name': 'input:costin:Basic:fppft',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:fppft',
         'typeVar': 'Float',
         'val': 0.5}
      input:costin:Basic:fuelpr: {
        'desc': 'Fuel price',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:fuelpr',
         'promoted_name': 'input:costin:Basic:fuelpr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:fuelpr',
         'typeVar': 'Float',
         'units': 'USD/galUS',
         'val': 0.5}
      input:costin:Basic:hydgpm: {
        'desc': 'Gallon per minute flow of hydraulic pumps',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:hydgpm',
         'promoted_name': 'input:costin:Basic:hydgpm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:hydgpm',
         'typeVar': 'Float',
         'val': 150.0}
      input:costin:Basic:iacous: {
        'aliases': ('No', 'Yes'),
         'desc': 'Acoustic treatment in nacelle',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:iacous',
         'promoted_name': 'input:costin:Basic:iacous',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:iacous',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:ibody: {
        'aliases': ('Narrow', 'Wide'),
         'desc': 'Body type indicator',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:ibody',
         'promoted_name': 'input:costin:Basic:ibody',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:ibody',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:icirc: {
        'aliases': ('Single', 'Dual'),
         'desc': 'Circuit indicator - fire detection',
         'optionsVal': (1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:icirc',
         'promoted_name': 'input:costin:Basic:icirc',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:icirc',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:icorev: {
        'aliases': ('No core reverser', 'Core reverser'),
         'desc': 'Thrust reverser',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:icorev',
         'promoted_name': 'input:costin:Basic:icorev',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:icorev',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:icostp: {
        'aliases': (        'Life cycle cost (LCC)',
                             'Acquisition cost',
                             'Direct operating cost (DOC)',
                             'Indirect operating cost (IOC)',
                             'Operating cost only (DOC + IOC - Depreciation)'),
         'desc': 'Type of cost calculation desired',
         'optionsVal': (1, 2, 3, 4, 5),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:icostp',
         'promoted_name': 'input:costin:Basic:icostp',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:icostp',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:idom: {
        'aliases': ('Domestic', 'International'),
         'desc': 'Operation type indicator',
         'optionsVal': (1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:idom',
         'promoted_name': 'input:costin:Basic:idom',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:idom',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:imux: {
        'aliases': ('No multiplex', 'Multiplex'),
         'desc': 'Multiplex indicator',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:imux',
         'promoted_name': 'input:costin:Basic:imux',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:imux',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:inozz: {
        'aliases': (        'Translating sleeve',
                             'Simple target w/ separate flow nozzle',
                             'Simple target w/ mixed flow nozzle',
                             'Separate flow exhaust w/o thrust reverser',
                             'Short duct w/o thrust reverser'),
         'desc': 'Nozzle type indicator',
         'optionsVal': (1, 2, 3, 4, 5),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:inozz',
         'promoted_name': 'input:costin:Basic:inozz',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:inozz',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:ipflag: {
        'aliases': ('Print major elements', 'Print details'),
         'desc': 'Print controller for Cost Module',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:ipflag',
         'promoted_name': 'input:costin:Basic:ipflag',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:ipflag',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:irad: {
        'aliases': ('Ignore R&D costs', 'Include R&D costs'),
         'desc': 'Indicator to include research and development',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:irad',
         'promoted_name': 'input:costin:Basic:irad',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:irad',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:irange: {
        'aliases': ('Short', 'Medium', 'Long'),
         'desc': 'Range indicator',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:irange',
         'promoted_name': 'input:costin:Basic:irange',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:irange',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:ispool: {
        'aliases': (        'Single spool fixed vane',
                             'Double spool variable vane APU'),
         'desc': 'Auxiliary power unit complexity indicator',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:ispool',
         'promoted_name': 'input:costin:Basic:ispool',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:ispool',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:itran: {
        'aliases': ('No transfer', 'Transfer'),
         'desc': 'Cargo/baggage transfer operation indicator',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:itran',
         'promoted_name': 'input:costin:Basic:itran',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:itran',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:iwind: {
        'aliases': ('Flat', 'Curved'),
         'desc': 'Windshield type indicator',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:iwind',
         'promoted_name': 'input:costin:Basic:iwind',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:iwind',
         'typeVar': 'Enum',
         'val': 0}
      input:costin:Basic:kva: {
        'desc': 'KVA rating of full-time generators',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:kva',
         'promoted_name': 'input:costin:Basic:kva',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:kva',
         'typeVar': 'Float',
         'val': 200.0}
      input:costin:Basic:lf: {
        'desc': 'Passenger load factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:lf',
         'promoted_name': 'input:costin:Basic:lf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:lf',
         'typeVar': 'Float',
         'val': 55.0}
      input:costin:Basic:life: {
        'desc': 'Number of years for Life Cycle Cost calculation',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:life',
         'promoted_name': 'input:costin:Basic:life',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:life',
         'typeVar': 'Float',
         'val': 14.0}
      input:costin:Basic:napu: {
        'desc': 'Number of auxiliary power units',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:napu',
         'promoted_name': 'input:costin:Basic:napu',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:napu',
         'typeVar': 'Int',
         'val': 1}
      input:costin:Basic:nchan: {
        'desc': 'Number of autopilot channels',
         'optionsVal': (1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:nchan',
         'promoted_name': 'input:costin:Basic:nchan',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:nchan',
         'typeVar': 'Enum',
         'val': 1}
      input:costin:Basic:nfltst: {
        'desc': 'Number of flight test aircraft',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:nfltst',
         'promoted_name': 'input:costin:Basic:nfltst',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:nfltst',
         'typeVar': 'Int',
         'val': 2}
      input:costin:Basic:ngen: {
        'desc': 'Number of inflight operated generators',
         'optionsVal': (3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:ngen',
         'promoted_name': 'input:costin:Basic:ngen',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:ngen',
         'typeVar': 'Enum',
         'val': 3}
      input:costin:Basic:nins: {
        'desc': 'Number of inertial navigation systems',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:nins',
         'promoted_name': 'input:costin:Basic:nins',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:nins',
         'typeVar': 'Int',
         'val': 0}
      input:costin:Basic:npod: {
        'desc': 'Number of podded engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:npod',
         'promoted_name': 'input:costin:Basic:npod',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:npod',
         'typeVar': 'Int',
         'val': 2}
      input:costin:Basic:nprotp: {
        'desc': 'Number of prototype aircraft',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:nprotp',
         'promoted_name': 'input:costin:Basic:nprotp',
         'size': 0,
         'top_promoted_name': 'my_flops.input:costin:Basic:nprotp',
         'typeVar': 'Int',
         'val': 2}
      input:costin:Basic:pctfc: {
        'desc': 'Percent of seats for first class',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:pctfc',
         'promoted_name': 'input:costin:Basic:pctfc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:pctfc',
         'typeVar': 'Float',
         'val': 10.0}
      input:costin:Basic:plmqt: {
        'desc': 'Planned MQT (150-hour Model Qualification Test or FAA '
                 'certification)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:plmqt',
         'promoted_name': 'input:costin:Basic:plmqt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:plmqt',
         'typeVar': 'Float',
         'units': 'year',
         'val': 1984.0}
      input:costin:Basic:prorat: {
        'desc': 'Manufacturers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:prorat',
         'promoted_name': 'input:costin:Basic:prorat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:prorat',
         'typeVar': 'Float',
         'val': 15.0}
      input:costin:Basic:prproc: {
        'desc': 'Prior number of engines procured',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:prproc',
         'promoted_name': 'input:costin:Basic:prproc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:prproc',
         'typeVar': 'Float',
         'val': 0.0}
      input:costin:Basic:q: {
        'desc': 'Airframe production quantities',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:q',
         'promoted_name': 'input:costin:Basic:q',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:q',
         'typeVar': 'Float',
         'val': 100.0}
      input:costin:Basic:resid: {
        'desc': 'Residual value at end of lifetime',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:resid',
         'promoted_name': 'input:costin:Basic:resid',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:resid',
         'typeVar': 'Float',
         'val': 2.0}
      input:costin:Basic:roi: {
        'desc': 'Return on investment (Triggers calculation of required '
                 'fare)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:roi',
         'promoted_name': 'input:costin:Basic:roi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:roi',
         'typeVar': 'Float',
         'val': 7.0}
      input:costin:Basic:sfc: {
        'desc': 'Engine specific fuel consumption',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:sfc',
         'promoted_name': 'input:costin:Basic:sfc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:sfc',
         'typeVar': 'Float',
         'units': 'lb/h/lb',
         'val': 0.6}
      input:costin:Basic:taxrat: {
        'desc': 'Corporate tax rate for ROI calculations',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:taxrat',
         'promoted_name': 'input:costin:Basic:taxrat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:taxrat',
         'typeVar': 'Float',
         'val': 0.33}
      input:costin:Basic:temp: {
        'desc': 'Maximum turbine inlet temperature',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:costin:Basic:temp',
         'promoted_name': 'input:costin:Basic:temp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:costin:Basic:temp',
         'typeVar': 'Float',
         'units': 'degF',
         'val': 1800.0}
      input:engdin:Special_Options:dffac: {
        'desc': 'Fuel flow scaling constant term.\n'
                 'The engine fuel flow scale factor for ENGSKAL = '
                 'THRUST/THRSO is\n'
                 'ENGSKAL*[1. + DFFAC + FFFAC*(1. - ENGSKAL)]',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:dffac',
         'promoted_name': 'input:engdin:Special_Options:dffac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:dffac',
         'typeVar': 'Float',
         'val': 0.0}
      input:engdin:Special_Options:fffac: {
        'desc': 'Fuel flow scaling linear term.\n'
                 'The engine fuel flow scale factor for ENGSKAL = '
                 'THRUST/THRSO is\n'
                 'ENGSKAL*[1. + DFFAC + FFFAC*(1. - ENGSKAL)]',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:fffac',
         'promoted_name': 'input:engdin:Special_Options:fffac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:fffac',
         'typeVar': 'Float',
         'val': 0.0}
      input:engdin:Special_Options:emach: {
        'desc': 'Array of Mach numbers in descending order at which engine '
                 'data are to be generated (Default computed internally, Do '
                 'not zero fill)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:emach',
         'promoted_name': 'input:engdin:Special_Options:emach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:emach',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:engdin:Special_Options:alt: {
        'desc': 'Arrays of altitudes in descending order, one set for each '
                 'Mach number, at which engine data are to be generated '
                 '(Default computed internally, do not zero fill).  '
                 'Altitudes and numbers of altitudes do not have to be '
                 'consistent between Mach numbers.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:alt',
         'promoted_name': 'input:engdin:Special_Options:alt',
         'shape': (0, 0),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:alt',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], shape=(0, 0), dtype=float64)}
      input:engdin:Special_Options:insdrg: {
        'aliases': (        'No drag scaling',
                             'Scale with A10',
                             'Calculate using A10',
                             'Calculate for Cd=0 at A9=A9ref'),
         'desc': 'Nozzle installation drag scaling switch',
         'optionsVal': (0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:insdrg',
         'promoted_name': 'input:engdin:Special_Options:insdrg',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:insdrg',
         'typeVar': 'Enum',
         'val': 0}
      input:engdin:Special_Options:nab: {
        'desc': 'Table number in CDFILE to be used for afterbody drag',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:nab',
         'promoted_name': 'input:engdin:Special_Options:nab',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:nab',
         'typeVar': 'Int',
         'val': 6969}
      input:engdin:Special_Options:nabref: {
        'desc': 'Table number in CDFILE to be used for reference afterbody '
                 'drag',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:nabref',
         'promoted_name': 'input:engdin:Special_Options:nabref',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:nabref',
         'typeVar': 'Int',
         'val': 6969}
      input:engdin:Special_Options:a10: {
        'desc': 'Maximum nozzle area (Required if INSDRG > 0)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:a10',
         'promoted_name': 'input:engdin:Special_Options:a10',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:a10',
         'typeVar': 'Float',
         'units': 'inch*inch',
         'val': 0.0}
      input:engdin:Special_Options:a10ref: {
        'desc': 'Reference maximum nozzle area (Required if INSDRG > 0)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:a10ref',
         'promoted_name': 'input:engdin:Special_Options:a10ref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:a10ref',
         'typeVar': 'Float',
         'units': 'inch*inch',
         'val': 0.0}
      input:engdin:Special_Options:a9ref: {
        'desc': 'Reference nozzle exit area (Required if INSDRG = 3)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:a9ref',
         'promoted_name': 'input:engdin:Special_Options:a9ref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:a9ref',
         'typeVar': 'Float',
         'units': 'inch*inch',
         'val': 0.0}
      input:engdin:Special_Options:xnoz: {
        'desc': 'Nozzle length (Required if INSDRG > 0)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:xnoz',
         'promoted_name': 'input:engdin:Special_Options:xnoz',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:xnoz',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:engdin:Special_Options:xnref: {
        'desc': 'Reference nozzle length (Required if INSDRG > 0)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:xnref',
         'promoted_name': 'input:engdin:Special_Options:xnref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:xnref',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:engdin:Special_Options:rcrv: {
        'desc': 'Nozzle radius of curvature parameter (Triggers special '
                 'nozzle drag option)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Special_Options:rcrv',
         'promoted_name': 'input:engdin:Special_Options:rcrv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Special_Options:rcrv',
         'typeVar': 'Float',
         'val': -1.0}
      input:engdin:Basic:ngprt: {
        'aliases': ('No printout', 'Print tables', 'Print sorted tables'),
         'desc': 'Print engine data tables',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:ngprt',
         'promoted_name': 'input:engdin:Basic:ngprt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:ngprt',
         'typeVar': 'Enum',
         'val': 0}
      input:engdin:Basic:igenen: {
        'aliases': (        'Response surfaces',
                             'External file (horsepower/rpm/fuel flow',
                             'External file (thrust/fuel flow)',
                             'Follows namelist &ENGDIN',
                             'Engine deck to be generated'),
         'desc': 'Switch indicating source of Engine Deck',
         'optionsVal': (-3, -2, -1, 0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:igenen',
         'promoted_name': 'input:engdin:Basic:igenen',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:igenen',
         'typeVar': 'Enum',
         'val': 1}
      input:engdin:Basic:extfac: {
        'desc': 'Slope factor for extrapolating engine fuel flows for '
                 'thrust levels above the maximum for that Mach number and '
                 'altitude',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:extfac',
         'promoted_name': 'input:engdin:Basic:extfac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:extfac',
         'typeVar': 'Float',
         'val': 1.0}
      input:engdin:Basic:fffsub: {
        'desc': 'Fuel flow factor for all subsonic engine points',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:fffsub',
         'promoted_name': 'input:engdin:Basic:fffsub',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:fffsub',
         'typeVar': 'Float',
         'val': 1.0}
      input:engdin:Basic:fffsup: {
        'desc': 'Fuel flow factor for all supersonic engine points',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:fffsup',
         'promoted_name': 'input:engdin:Basic:fffsup',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:fffsup',
         'typeVar': 'Float',
         'val': 1.0}
      input:engdin:Basic:idle: {
        'desc': '> 0, Flight idle data will be internally generated with '
                 'zero thrust and an extrapolated fuel flow.  The fuel flow '
                 'must be at least FIDMIN times the fuel flow at power '
                 'setting number IDLE and no more than FIDMAX times the fuel '
                 'flow at power setting number IDLE.  If NONEG (below) = 0 '
                 'and negative thrusts exist, an idle power setting is not '
                 'generated.\n'
                 '= 0, The lowest input power setting is assumed to be '
                 'flight idle (Not recommended.  Results will be more '
                 'consistent with IDLE > 0)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:idle',
         'promoted_name': 'input:engdin:Basic:idle',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:idle',
         'typeVar': 'Int',
         'val': 1}
      input:engdin:Basic:noneg: {
        'aliases': ('Ignore', 'Use all points'),
         'desc': 'Option for using points in the Engine Deck with negative '
                 'thrust',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:noneg',
         'promoted_name': 'input:engdin:Basic:noneg',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:noneg',
         'typeVar': 'Enum',
         'val': 0}
      input:engdin:Basic:fidmin: {
        'desc': 'Minimum fraction of the fuel flow at power setting number '
                 'IDLE for generated flight idle fuel flows',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:fidmin',
         'promoted_name': 'input:engdin:Basic:fidmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:fidmin',
         'typeVar': 'Float',
         'val': 0.08}
      input:engdin:Basic:fidmax: {
        'desc': 'Maximum fraction of the fuel flow at power setting number '
                 'IDLE for generated flight idle fuel flows',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:fidmax',
         'promoted_name': 'input:engdin:Basic:fidmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:fidmax',
         'typeVar': 'Float',
         'val': 1.0}
      input:engdin:Basic:ixtrap: {
        'desc': 'Option for extrapolation of engine data beyond altitudes '
                 'provided in input data, which may result in radically '
                 'improved SFC',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:ixtrap',
         'promoted_name': 'input:engdin:Basic:ixtrap',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:ixtrap',
         'typeVar': 'Int',
         'val': 1}
      input:engdin:Basic:ifill: {
        'desc': 'Option for filling in part power data\n'
                 '=0, No part power data will be generated\n'
                 '> 0, Part power cruise data will be filled in for '
                 'Mach-altitude points for which IFILL (or fewer) thrust '
                 'levels have been input\n'
                 'For NPCODE > 1, data will be filled in for each specified '
                 'power code that is not input for each Mach-altitude point.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:ifill',
         'promoted_name': 'input:engdin:Basic:ifill',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:ifill',
         'typeVar': 'Int',
         'val': 2}
      input:engdin:Basic:maxcr: {
        'desc': 'Maximum power setting used for cruise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:maxcr',
         'promoted_name': 'input:engdin:Basic:maxcr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:maxcr',
         'typeVar': 'Int',
         'val': 1}
      input:engdin:Basic:nox: {
        'aliases': (        'Do not use',
                             'Indices in engine deck or generated',
                             'Emissions lb/hr in engine deck',
                             'Another parameter in engine deck'),
         'desc': 'Option for NOx emissions data.  If IGENEN=-2, NOx '
                 'emissions data are replaced with engine shaft speed, rpm',
         'optionsVal': (0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:nox',
         'promoted_name': 'input:engdin:Basic:nox',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:nox',
         'typeVar': 'Enum',
         'val': 0}
      input:engdin:Basic:pcode: {
        'desc': 'Power codes to be used in sorting the Engine Deck.  Values '
                 'correspond to thrust levels in descending order, i.e., '
                 'climb, maximum continuous, part power cruise settings, and '
                 'flight idle.  Actual values are arbitrary (they are just '
                 'used as labels), but only points in the Engine Deck with '
                 'corresponding values for PC will be used.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:pcode',
         'promoted_name': 'input:engdin:Basic:pcode',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:pcode',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:engdin:Basic:boost: {
        'desc': '> 0., Scale factor for boost engine to be added to '
                 'baseline engine for takeoff and climb.  Climb thrust of '
                 'the boost engine in the Engine Deck must be artificially '
                 'increased by 100,000.\n'
                 '= 0., No boost engine',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:boost',
         'promoted_name': 'input:engdin:Basic:boost',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engdin:Basic:boost',
         'typeVar': 'Float',
         'val': 0.0}
      input:engdin:Basic:igeo: {
        'aliases': ('Geometric', 'Geopotential-will be converted'),
         'desc': 'Engine deck altitude type',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:Basic:igeo',
         'promoted_name': 'input:engdin:Basic:igeo',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:Basic:igeo',
         'typeVar': 'Enum',
         'val': 0}
      input:engdin:cdfile: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:cdfile',
         'promoted_name': 'input:engdin:cdfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:cdfile',
         'typeVar': 'Str',
         'val': ''}
      input:engdin:eifile: {
        'desc': 'Engine deck filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engdin:eifile',
         'promoted_name': 'input:engdin:eifile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engdin:eifile',
         'typeVar': 'Str',
         'val': ''}
      input:engine:Other:hpcpr: {
        'desc': 'Pressure ratio of the high pressure (third) compressor '
                 '(Only used if there are three compressor components)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:hpcpr',
         'promoted_name': 'input:engine:Other:hpcpr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:hpcpr',
         'typeVar': 'Float',
         'val': 5.0}
      input:engine:Other:aburn: {
        'desc': 'True if there is an afterburner',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:aburn',
         'promoted_name': 'input:engine:Other:aburn',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:aburn',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Other:dburn: {
        'desc': 'True if there is a duct burner (Separate flow turbofans '
                 'only).  ABURN and DBURN cannot both be true.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:dburn',
         'promoted_name': 'input:engine:Other:dburn',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:dburn',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Other:effab: {
        'desc': 'Afterburner/duct burner efficiency',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:effab',
         'promoted_name': 'input:engine:Other:effab',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:effab',
         'typeVar': 'Float',
         'val': 0.85}
      input:engine:Other:tabmax: {
        'desc': 'Maximum afterburner/duct burner temperature',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:tabmax',
         'promoted_name': 'input:engine:Other:tabmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:tabmax',
         'typeVar': 'Float',
         'units': 'degR',
         'val': 3500.0}
      input:engine:Other:ven: {
        'desc': 'True if the exhaust nozzle has a variable flow area.  The '
                 'nozzle flow area is automatically allowed to vary for '
                 'cases when the afterburner or duct burner is on.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:ven',
         'promoted_name': 'input:engine:Other:ven',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:ven',
         'typoVar': 'Bool',
         'val': False}
      input:engine:Other:costbl: {
        'desc': 'Customer high pressure compressor bleed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:costbl',
         'promoted_name': 'input:engine:Other:costbl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:costbl',
         'typeVar': 'Float',
         'units': 'lb/s',
         'val': 1.0}
      input:engine:Other:fanbl: {
        'desc': 'Fan bleed fraction, only used for bypass engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:fanbl',
         'promoted_name': 'input:engine:Other:fanbl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:fanbl',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:Other:hpext: {
        'desc': 'Customer power extraction',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:hpext',
         'promoted_name': 'input:engine:Other:hpext',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:hpext',
         'typeVar': 'Float',
         'units': 'hp',
         'val': 200.0}
      input:engine:Other:wcool: {
        'desc': 'Turbine cooling flow as a fraction of high pressure '
                 'compressor mass flow. The cooling flow defaults to the '
                 'value in the engine cycle definition file. If WCOOL is '
                 'input greater than or equal to zero the default will be '
                 'overridden.\n'
                 'If WCOOL > 1., the turbine cooling flow fraction required '
                 'to bring the turbine inlet temperature down to WCOOL will '
                 'be computed.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:wcool',
         'promoted_name': 'input:engine:Other:wcool',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:wcool',
         'typeVar': 'Float',
         'val': -0.0001}
      input:engine:Other:fhv: {
        'desc': 'Fuel heating value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:fhv',
         'promoted_name': 'input:engine:Other:fhv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:fhv',
         'typeVar': 'Float',
         'units': 'Btu/lb',
         'val': 18500.0}
      input:engine:Other:dtce: {
        'desc': 'Deviation from standard day temperature.  The deviation, '
                 'as used in the cycle analysis module, is DTCE at sea level '
                 'and varies to zero at ALC (see below). The design point is '
                 'at standard temperature.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:dtce',
         'promoted_name': 'input:engine:Other:dtce',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:dtce',
         'typeVar': 'Float',
         'units': 'degC',
         'val': 0.0}
      input:engine:Other:alc: {
        'desc': 'The altitude at which DTCE (see above) becomes zero.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:alc',
         'promoted_name': 'input:engine:Other:alc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:alc',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10000.0}
      input:engine:Other:year: {
        'desc': 'Technology availability date used to estimate compressor '
                 'polytropic efficiency',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:year',
         'promoted_name': 'input:engine:Other:year',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:year',
         'typeVar': 'Float',
         'val': 1985.0}
      input:engine:Other:boat: {
        'desc': 'True to include boattail drag',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:boat',
         'promoted_name': 'input:engine:Other:boat',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:boat',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Other:ajmax: {
        'desc': 'Nozzle reference area for boattail drag.  Used only if '
                 'BOAT = true.  Default is the largest of\n'
                 '1) 1.1 times the inlet capture area\n'
                 '2) Nozzle exit area at the inlet design point\n'
                 '3) Estimated engine frontal area\n'
                 '4) Estimated nozzle entrance area\n'
                 'or\n'
                 'If nacelle weight and geometry calculations are\n'
                 'performed (see NGINWT below) AJMAX is set to the\n'
                 'nacelle cross-sectional area at the customer connect. \n'
                 'or\n'
                 'If AJMAX is less than zero, the cruise design point\n'
                 'nozzle exit area multiplied by the absolute value\n'
                 'of AJMAX is used as the reference.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:ajmax',
         'promoted_name': 'input:engine:Other:ajmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:ajmax',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:engine:Other:spill: {
        'desc': 'True to include spillage and lip drag in engine '
                 'performance data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:spill',
         'promoted_name': 'input:engine:Other:spill',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:spill',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Other:lip: {
        'desc': 'Compute inlet cowl lip drag.  Used only if SPILL = true',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:lip',
         'promoted_name': 'input:engine:Other:lip',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:lip',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Other:blmax: {
        'desc': 'Inlet bleed flow fraction of total flow at the inlet '
                 'design point (Default = .016 * AMINDS**1.5).  Used only if '
                 'SPILL = true',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:blmax',
         'promoted_name': 'input:engine:Other:blmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:blmax',
         'typeVar': 'Float',
         'val': -1.0}
      input:engine:Other:spldes: {
        'desc': 'Inlet design spillage fraction.  Used only if SPILL = true',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:spldes',
         'promoted_name': 'input:engine:Other:spldes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:spldes',
         'typeVar': 'Float',
         'val': 0.01}
      input:engine:Other:aminds: {
        'desc': 'Inlet design Mach number (Default = XMMAX).  Used only if '
                 'SPILL = true',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:aminds',
         'promoted_name': 'input:engine:Other:aminds',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:aminds',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:Other:alinds: {
        'desc': 'Inlet design altitude (Default = AMAX).  Used only if '
                 'SPILL = true',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:alinds',
         'promoted_name': 'input:engine:Other:alinds',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:alinds',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:engine:Other:etaprp: {
        'desc': 'Maximum propeller efficiency (Turboprops only). The actual '
                 'propeller efficiency is based on an internal schedule of '
                 'efficiency versus Mach number with the maximum efficiency '
                 '(ETAPRP) occurring at a Mach number of 0.80.  To use the '
                 'Hamilton Standard Method set ETAPRP=1 and input the '
                 'propeller characteristics as defined under ',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:etaprp',
         'promoted_name': 'input:engine:Other:etaprp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:etaprp',
         'typeVar': 'Float',
         'val': 0.84}
      input:engine:Other:shpowa: {
        'desc': 'Design point shaft horsepower divided by the design point '
                 'core airflow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:shpowa',
         'promoted_name': 'input:engine:Other:shpowa',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:shpowa',
         'typeVar': 'Float',
         'units': 'hp/(lb/s)',
         'val': 60.0}
      input:engine:Other:cdtmax: {
        'desc': 'Maximum allowable compressor discharge temperature',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:cdtmax',
         'promoted_name': 'input:engine:Other:cdtmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:cdtmax',
         'typeVar': 'Float',
         'units': 'degR',
         'val': 99999.0}
      input:engine:Other:cdpmax: {
        'desc': 'Maximum allowable compressor discharge pressure',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:cdpmax',
         'promoted_name': 'input:engine:Other:cdpmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:cdpmax',
         'typeVar': 'Float',
         'units': 'psi',
         'val': 99999.0}
      input:engine:Other:vjmax: {
        'desc': '(IENG < 100) Maximum allowable jet velocity\n'
                 '(IENG > 100) Propeller tip speed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:vjmax',
         'promoted_name': 'input:engine:Other:vjmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:vjmax',
         'typeVar': 'Float',
         'units': 'ft/s',
         'val': 99999.0}
      input:engine:Other:stmin: {
        'desc': 'Minimum allowable specific thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:stmin',
         'promoted_name': 'input:engine:Other:stmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:stmin',
         'typeVar': 'Float',
         'units': 'lb/lb/s',
         'val': 1.0}
      input:engine:Other:armax: {
        'desc': 'Maximum allowable ratio of the bypass area to the core '
                 'area of a mixed flow turbofan',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:armax',
         'promoted_name': 'input:engine:Other:armax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Other:armax',
         'typeVar': 'Float',
         'val': 99999.0}
      input:engine:Other:limcd: {
        'aliases': (        'Limit at cruise design Mach and altitude only '
                             'for optimization',
                             'Limit at all points in envelope',
                             'Limit max. compressor discharge temp. '
                             'everywhere'),
         'desc': 'Switch to use the compressor discharge temperature and '
                 'pressure limits only for optimization.',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Other:limcd',
         'promoted_name': 'input:engine:Other:limcd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Other:limcd',
         'typeVar': 'Enum',
         'val': 1}
      input:engine:Noise_Data:nprint: {
        'aliases': (        'Print compressor operating line',
                             'No print',
                             'Print to ANOPP',
                             'Print to FOOTPR'),
         'desc': 'Noise data print control',
         'optionsVal': (-1, 0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Noise_Data:nprint',
         'promoted_name': 'input:engine:Noise_Data:nprint',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Noise_Data:nprint',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:Noise_Data:jet: {
        'aliases': (        'No noise data',
                             'No jet noise',
                             'Stone/Clark',
                             'Kresja',
                             'Stone ALLJET',
                             'Stone JET181',
                             'GE M*S',
                             'SAE A-21'),
         'desc': 'FOOTPR input data generation control',
         'optionsVal': (-1, 0, 1, 2, 3, 4, 5, 6),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Noise_Data:jet',
         'promoted_name': 'input:engine:Noise_Data:jet',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Noise_Data:jet',
         'typeVar': 'Enum',
         'val': -1}
      input:engine:Noise_Data:ftmach: {
        'desc': 'Mach number to calculate FOOTPR input data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Noise_Data:ftmach',
         'promoted_name': 'input:engine:Noise_Data:ftmach',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Noise_Data:ftmach',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:Noise_Data:ftalt: {
        'desc': 'Altitude to calculate FOOTPR input data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Noise_Data:ftalt',
         'promoted_name': 'input:engine:Noise_Data:ftalt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Noise_Data:ftalt',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:IC_Engine:ncyl: {
        'desc': 'Number of cylinders',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:ncyl',
         'promoted_name': 'input:engine:IC_Engine:ncyl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:ncyl',
         'typeVar': 'Int',
         'val': 4}
      input:engine:IC_Engine:deshp: {
        'desc': 'Baseline engine power',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:deshp',
         'promoted_name': 'input:engine:IC_Engine:deshp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:deshp',
         'typeVar': 'Float',
         'units': 'hp',
         'val': 180.0}
      input:engine:IC_Engine:alcrit: {
        'desc': 'Critical turbocharger altitude.  The altitude to which '
                 'turbocharged IC engines are able to maintain DESHP',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:alcrit',
         'promoted_name': 'input:engine:IC_Engine:alcrit',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:alcrit',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:engine:IC_Engine:sfcmax: {
        'desc': 'Brake specific fuel consumption at maximum power',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:sfcmax',
         'promoted_name': 'input:engine:IC_Engine:sfcmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:sfcmax',
         'typeVar': 'Float',
         'units': 'lb/h/hp',
         'val': 0.52}
      input:engine:IC_Engine:sfcmin: {
        'desc': 'Minimum brake specific fuel consumption or SFC',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:sfcmin',
         'promoted_name': 'input:engine:IC_Engine:sfcmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:sfcmin',
         'typeVar': 'Float',
         'units': 'lb/h/hp',
         'val': 0.4164}
      input:engine:IC_Engine:pwrmin: {
        'desc': 'Fraction of maximum power where SFCMIN occurs. If NRPM > 0 '
                 'and PWRMIN > 1 then PWRMIN is the rotational speed where '
                 'SFCMIN occurs (recommend PWRMIN > 1 if SFCMIN is less than '
                 'about 0.4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:pwrmin',
         'promoted_name': 'input:engine:IC_Engine:pwrmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:pwrmin',
         'typeVar': 'Float',
         'val': 0.65}
      input:engine:IC_Engine:engspd: {
        'desc': 'Maximum engine crankshaft speed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:engspd',
         'promoted_name': 'input:engine:IC_Engine:engspd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:engspd',
         'typeVar': 'Float',
         'units': '1/min',
         'val': 2700.0}
      input:engine:IC_Engine:prpspd: {
        'desc': 'Maximum propeller shaft speed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:prpspd',
         'promoted_name': 'input:engine:IC_Engine:prpspd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:prpspd',
         'typeVar': 'Float',
         'units': '1/min',
         'val': 2700.0}
      input:engine:IC_Engine:iwc: {
        'aliases': ('Air cooled', 'Water cooled'),
         'desc': 'Cooling system',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:iwc',
         'promoted_name': 'input:engine:IC_Engine:iwc',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:iwc',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:IC_Engine:ecid: {
        'desc': 'Engine displacement',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:ecid',
         'promoted_name': 'input:engine:IC_Engine:ecid',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:ecid',
         'typeVar': 'Float',
         'units': 'inch*inch*inch',
         'val': 361.0}
      input:engine:IC_Engine:ecr: {
        'desc': 'Engine compression ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:ecr',
         'promoted_name': 'input:engine:IC_Engine:ecr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:ecr',
         'typeVar': 'Float',
         'val': 8.5}
      input:engine:IC_Engine:eht: {
        'desc': 'Engine envelope height',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:eht',
         'promoted_name': 'input:engine:IC_Engine:eht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:eht',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 19.96}
      input:engine:IC_Engine:ewid: {
        'desc': 'Engine envelope width',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:ewid',
         'promoted_name': 'input:engine:IC_Engine:ewid',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:ewid',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 33.37}
      input:engine:IC_Engine:elen: {
        'desc': 'Engine envelope length',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:elen',
         'promoted_name': 'input:engine:IC_Engine:elen',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:elen',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 31.83}
      input:engine:IC_Engine:ntyp: {
        'aliases': (        'Fixed pitch',
                             'Variable pitch',
                             'Variable pitch + full feathering',
                             'Variable pitch + full feathering + deicing',
                             'Variable pitch + full feathering + deicing '
                             'w/reverse',
                             'Ducted fan'),
         'desc': 'Propeller type indicator',
         'optionsVal': (1, 2, 3, 4, 5, 6),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:ntyp',
         'promoted_name': 'input:engine:IC_Engine:ntyp',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:ntyp',
         'typeVar': 'Enum',
         'val': 2}
      input:engine:IC_Engine:af: {
        'desc': 'Activity factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:af',
         'promoted_name': 'input:engine:IC_Engine:af',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:af',
         'typeVar': 'Float',
         'val': 87.6}
      input:engine:IC_Engine:cli: {
        'desc': 'Integrated design lift coefficient',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:cli',
         'promoted_name': 'input:engine:IC_Engine:cli',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:cli',
         'typeVar': 'Float',
         'val': 0.569}
      input:engine:IC_Engine:blang: {
        'desc': 'Blade angle for fixed pitch propeller',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:blang',
         'promoted_name': 'input:engine:IC_Engine:blang',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:blang',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 20.0}
      input:engine:IC_Engine:dprop: {
        'desc': 'Propeller diameter',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:dprop',
         'promoted_name': 'input:engine:IC_Engine:dprop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:dprop',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 6.375}
      input:engine:IC_Engine:nblade: {
        'desc': 'Number of blades',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:nblade',
         'promoted_name': 'input:engine:IC_Engine:nblade',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:nblade',
         'typeVar': 'Int',
         'val': 0}
      input:engine:IC_Engine:gbloss: {
        'desc': 'Gearbox losses, fraction. If PRPSPD = ENGSPD, there are no '
                 'losses.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:gbloss',
         'promoted_name': 'input:engine:IC_Engine:gbloss',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:gbloss',
         'typeVar': 'Float',
         'val': 0.02}
      input:engine:IC_Engine:arrpm: {
        'desc': 'Rotational speed (descending order)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:arrpm',
         'promoted_name': 'input:engine:IC_Engine:arrpm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:arrpm',
         'typeVar': 'Array',
         'units': 'rpm',
         'val': array([], dtype=float64)}
      input:engine:IC_Engine:arpwr: {
        'desc': 'Engine shaft power at ARRPM(I)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:arpwr',
         'promoted_name': 'input:engine:IC_Engine:arpwr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:arpwr',
         'typeVar': 'Array',
         'units': 'hp',
         'val': array([], dtype=float64)}
      input:engine:IC_Engine:arful: {
        'desc': 'Engine fuel requirements at ARRPM(I) (Required only if '
                 'LFUUN is not equal to zero)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:arful',
         'promoted_name': 'input:engine:IC_Engine:arful',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:arful',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:engine:IC_Engine:lfuun: {
        'aliases': (        'Fuel flows are computed from SFCMAX SFCMIN '
                             'and PWRMIN',
                             'Brake specific fuel consumption values are '
                             'input in ARFUL',
                             'Actual fuel flows are input in ARFUL (lb/hr)',
                             'Actual fuel flows are input in ARFUL (gal/hr)'),
         'desc': 'Fuel input type indicator',
         'optionsVal': (0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:lfuun',
         'promoted_name': 'input:engine:IC_Engine:lfuun',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:lfuun',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:IC_Engine:feng: {
        'desc': 'Scale factor on engine weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:feng',
         'promoted_name': 'input:engine:IC_Engine:feng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:feng',
         'typeVar': 'Float',
         'val': 1.0}
      input:engine:IC_Engine:fprop: {
        'desc': 'Scale factor on propeller weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:fprop',
         'promoted_name': 'input:engine:IC_Engine:fprop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:fprop',
         'typeVar': 'Float',
         'val': 1.0}
      input:engine:IC_Engine:fgbox: {
        'desc': 'Scale factor on gear box weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:IC_Engine:fgbox',
         'promoted_name': 'input:engine:IC_Engine:fgbox',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:IC_Engine:fgbox',
         'typeVar': 'Float',
         'val': 1.0}
      input:engine:Engine_Weight:nginwt: {
        'aliases': (        '-Engine + inlet + nacelle + nozzle',
                             '-Engine + inlet + nacelle',
                             '-Engine and inlet',
                             '-Engine only',
                             'None',
                             'Engine only (Total prop. system)',
                             'Engine and inlet (Propeller)',
                             'Engine + inlet + nacelle (Propeller + cowl + '
                             'mounts)',
                             'Engine + inlet + nacelle + nozzle ( Propeller '
                             '+ cowl + mounts + exhaust)',
                             '(Propeller + cowl + mounts + exhaust + '
                             'alternator)'),
         'desc': 'Switch for engine weight calculations.   Use the negative '
                 'value to calculate the weight for the initial design and '
                 'then scale engine weights and dimensions with airflow.  '
                 'Zero or a negative value should always be used during '
                 'optimization with engine cycle design variables.  (IENG > '
                 '100 options in parentheses)',
         'optionsVal': (-4, -3, -2, -1, 0, 1, 2, 3, 4, 5),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:nginwt',
         'promoted_name': 'input:engine:Engine_Weight:nginwt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:nginwt',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:Engine_Weight:iwtprt: {
        'aliases': (        'No output',
                             'Print component weights and dimensions',
                             'Print component design details',
                             'Plus initial and final optimization data',
                             'Print component details at each iteration'),
         'desc': 'Printout control for engine weight calculations.  Printout '
                 'is on file OFILE.',
         'optionsVal': (0, 1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:iwtprt',
         'promoted_name': 'input:engine:Engine_Weight:iwtprt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:iwtprt',
         'typeVar': 'Enum',
         'val': 1}
      input:engine:Engine_Weight:iwtplt: {
        'desc': 'PostScript plot control for engine (and nacelle) '
                 'schematics on file PLTFIL.  If the negative value is '
                 'input, only the final design will be plotted.',
         'optionsVal': (-4, -3, -2, -1, 0, 1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:iwtplt',
         'promoted_name': 'input:engine:Engine_Weight:iwtplt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:iwtplt',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:Engine_Weight:gratio: {
        'desc': 'Ratio of the RPM of the low pressure compressor to the RPM '
                 'of the connected fan',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:gratio',
         'promoted_name': 'input:engine:Engine_Weight:gratio',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:gratio',
         'typeVar': 'Float',
         'val': 1.0}
      input:engine:Engine_Weight:utip1: {
        'desc': 'Tip speed of the first compressor (or fan) in the flow.  '
                 'Default is based on YEAR, engine type, and other design '
                 'considerations.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:utip1',
         'promoted_name': 'input:engine:Engine_Weight:utip1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:utip1',
         'typeVar': 'Float',
         'units': 'ft/s',
         'val': 0.0}
      input:engine:Engine_Weight:rh2t1: {
        'desc': 'Hub to tip radius ratio of the first compressor (or fan) '
                 'in the flow.  Default is based on YEAR, engine type, and '
                 'other design considerations.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:rh2t1',
         'promoted_name': 'input:engine:Engine_Weight:rh2t1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:rh2t1',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:Engine_Weight:igvw: {
        'aliases': (        'Variable-no fan IGV',
                             'Fixed-no fan IGV',
                             'None',
                             'Fixed',
                             'Variable'),
         'desc': 'Flag for compressor inlet guide vanes',
         'optionsVal': (-2, -1, 0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:igvw',
         'promoted_name': 'input:engine:Engine_Weight:igvw',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:igvw',
         'typeVar': 'Enum',
         'val': 0}
      input:engine:Engine_Weight:trbrpm: {
        'desc': 'The rotational speed of any free turbine.  TRBAN2 is used '
                 'to set the free turbine rotational speed if TRBRPM is not '
                 'input. TRBRPM overrides TRBAN2.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:trbrpm',
         'promoted_name': 'input:engine:Engine_Weight:trbrpm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:trbrpm',
         'typeVar': 'Float',
         'units': 'rpm',
         'val': 0.0}
      input:engine:Engine_Weight:trban2: {
        'desc': 'Maximum allowable AN**2 for turbine components.  The input '
                 'value is the actual maximum divided by 10**10.  AN**2 is '
                 'the flow area multiplied by the rotational speed squared.  '
                 'The default is based on year.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:trban2',
         'promoted_name': 'input:engine:Engine_Weight:trban2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:trban2',
         'typeVar': 'Float',
         'units': '(inch*inch)/(min*min)',
         'val': 0.0}
      input:engine:Engine_Weight:trbstr: {
        'desc': 'Turbine usable stress lower limit.  Normally when '
                 'component weights are predicted, the usable stress is a '
                 'function of operating conditions.  For turbine components, '
                 'this can be unusually low because cooling effects are not '
                 'accounted for.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:trbstr',
         'promoted_name': 'input:engine:Engine_Weight:trbstr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:trbstr',
         'typeVar': 'Float',
         'units': 'psi',
         'val': 15000.0}
      input:engine:Engine_Weight:cmpan2: {
        'desc': 'Maximum allowable AN**2 for compressor components.  The '
                 'input value is the actual maximum divided by 10**10.  '
                 'AN**2 is the flow area multiplied by the rotational speed '
                 'squared.  The default is based on year.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:cmpan2',
         'promoted_name': 'input:engine:Engine_Weight:cmpan2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:cmpan2',
         'typeVar': 'Float',
         'units': '(inch*inch)/(min*min)',
         'val': 0.0}
      input:engine:Engine_Weight:cmpstr: {
        'desc': 'Requested compressor usable stress.  This forces a change '
                 'in compressor material when the current (lower '
                 'temperature) material starts to run out of strength as '
                 'temperature increases.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:cmpstr',
         'promoted_name': 'input:engine:Engine_Weight:cmpstr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:cmpstr',
         'typeVar': 'Float',
         'units': 'psi',
         'val': 25000.0}
      input:engine:Engine_Weight:vjpnlt: {
        'desc': 'Weight penalty factor for a suppressor to reduce the core '
                 'jet velocity to 1500 ft/sec',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:vjpnlt',
         'promoted_name': 'input:engine:Engine_Weight:vjpnlt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:vjpnlt',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:engine:Engine_Weight:wtebu: {
        'desc': 'Fraction for weight of engine build up unit (pylon, '
                 'mounting hardware, etc)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:wtebu',
         'promoted_name': 'input:engine:Engine_Weight:wtebu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:wtebu',
         'typeVar': 'Float',
         'val': 0.2}
      input:engine:Engine_Weight:wtcon: {
        'desc': 'Fraction for weight of engine controls',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Engine_Weight:wtcon',
         'promoted_name': 'input:engine:Engine_Weight:wtcon',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Engine_Weight:wtcon',
         'typeVar': 'Float',
         'val': 0.05}
      input:engine:Design_Point:desfn: {
        'desc': 'Engine design point net dry thrust (Default = THRUST, '
                 'Namelist &CONFIN).  Do not use the default for '
                 'afterburning engines since THRUST is the maximum wet '
                 'thrust rating.  The maximum wet (afterburning) thrust for '
                 'the generated engine is transferred back to THRSO for '
                 'scaling with THRUST.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:desfn',
         'promoted_name': 'input:engine:Design_Point:desfn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:desfn',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:engine:Design_Point:xmdes: {
        'desc': 'Engine optimization point Mach number (Default = VCMN, '
                 'Namelist &CONFIN).  XMDES and XADES are used for '
                 'propulsion only analyses (IANAL = 4).',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:xmdes',
         'promoted_name': 'input:engine:Design_Point:xmdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:xmdes',
         'typeVar': 'Float',
         'val': -9999.0}
      input:engine:Design_Point:xades: {
        'desc': 'Engine optimization point altitude (Default = CH, Namelist '
                 '&CONFIN).  If XADES < 0., it is interpreted as the '
                 'negative of the design point dynamic pressure (psf), and '
                 'the altitude is back-calculated with a minimum of 0.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:xades',
         'promoted_name': 'input:engine:Design_Point:xades',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:xades',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -9999.0}
      input:engine:Design_Point:oprdes: {
        'desc': 'Overall pressure ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:oprdes',
         'promoted_name': 'input:engine:Design_Point:oprdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:oprdes',
         'typeVar': 'Float',
         'val': 29.5}
      input:engine:Design_Point:fprdes: {
        'desc': 'Fan pressure ratio (turbofans only)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:fprdes',
         'promoted_name': 'input:engine:Design_Point:fprdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:fprdes',
         'typeVar': 'Float',
         'val': 1.67}
      input:engine:Design_Point:bprdes: {
        'desc': 'Bypass ratio (Turbofans only, Default is computed based on '
                 'OPRDES, FPRDES, TTRDES, XMDES and ALDES).  If BPRDES < -1, '
                 'then the bypass ratio is computed such that the ratio of '
                 'the fan to core jet velocities equals the absolute value '
                 'of BPRDES.  For turbine bypass engines, BPRDES must be '
                 'input and is defined as the fraction of compressor exit '
                 'airflow that is bypassed around the main burner and the '
                 'turbine.  If both EBPR and BPRDES are zero, the optimum '
                 'bypass ratio is computed at the design Mach number and '
                 'altitude (XMDES, XADES).',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:bprdes',
         'promoted_name': 'input:engine:Design_Point:bprdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:bprdes',
         'typeVar': 'Float',
         'val': 0.0}
      input:engine:Design_Point:tetdes: {
        'desc': 'Engine design point turbine entry temperature',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:tetdes',
         'promoted_name': 'input:engine:Design_Point:tetdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:tetdes',
         'typeVar': 'Float',
         'units': 'degR',
         'val': 2660.0}
      input:engine:Design_Point:ttrdes: {
        'desc': 'Engine throttle ratio defined as the ratio of the maximum '
                 'allowable turbine inlet temperature divided by the design '
                 'point turbine inlet temperature.  If TTRDES is greater '
                 'than TETDES, it is assumed to be the maximum allowable '
                 'turbine inlet temperature.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Design_Point:ttrdes',
         'promoted_name': 'input:engine:Design_Point:ttrdes',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Design_Point:ttrdes',
         'typeVar': 'Float',
         'val': 1.0}
      input:engine:Basic:ieng: {
        'aliases': (        'User-defined',
                             'Turbojet',
                             'Separate flow turbofan w/ 2 compressors',
                             'Mixed flow turbofan w/ 2 compressors',
                             'Turboprop',
                             'Turbine bypass',
                             'Separate flow turofan w/ 3 compressors',
                             'Mixed flow turbofan w/ 3 compressors',
                             '3-spool separate flow turbofan w/ 3 '
                             'compressors',
                             '2-spool turbojet',
                             'IC engine'),
         'desc': 'Engine cycle definition input file indicator',
         'optionsVal': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 101),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:ieng',
         'promoted_name': 'input:engine:Basic:ieng',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:ieng',
         'typeVar': 'Enum',
         'val': 2}
      input:engine:Basic:iprint: {
        'desc': 'Engine cycle analysis printout control.  Printout is on '
                 'file OFILE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:iprint',
         'promoted_name': 'input:engine:Basic:iprint',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:iprint',
         'typeVar': 'Int',
         'val': 0}
      input:engine:Basic:gendek: {
        'desc': 'Engine data will be saved on the file designated by EOFILE '
                 'as an Engine Deck for future use',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:gendek',
         'promoted_name': 'input:engine:Basic:gendek',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:gendek',
         'typeVar': 'Bool',
         'val': False}
      input:engine:Basic:ithrot: {
        'aliases': (        'All Mach-altitude combos',
                             'Max. altitude for each Mach',
                             'Max. altitude for max. Mach'),
         'desc': 'Controls frequency of part power data generation',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:ithrot',
         'promoted_name': 'input:engine:Basic:ithrot',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:ithrot',
         'typeVar': 'Enum',
         'val': 1}
      input:engine:Basic:npab: {
        'desc': 'Maximum number of afterburning throttle settings for each '
                 'Mach-altitude combination',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:npab',
         'promoted_name': 'input:engine:Basic:npab',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:npab',
         'typeVar': 'Int',
         'val': 0}
      input:engine:Basic:npdry: {
        'desc': 'Maximum number of dry (non-afterburning) throttle settings',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:npdry',
         'promoted_name': 'input:engine:Basic:npdry',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:npdry',
         'typeVar': 'Int',
         'val': 15}
      input:engine:Basic:xidle: {
        'desc': 'Fraction of maximum dry thrust used as a cutoff for part '
                 'power throttle settings',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:xidle',
         'promoted_name': 'input:engine:Basic:xidle',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:xidle',
         'typeVar': 'Float',
         'val': 0.05}
      input:engine:Basic:nitmax: {
        'desc': 'Maximum iterations per point',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:nitmax',
         'promoted_name': 'input:engine:Basic:nitmax',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:Basic:nitmax',
         'typeVar': 'Int',
         'val': 50}
      input:engine:Basic:xmmax: {
        'desc': 'Max Mach number (Default = VCMN, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:xmmax',
         'promoted_name': 'input:engine:Basic:xmmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:xmmax',
         'typeVar': 'Float',
         'val': -1.0}
      input:engine:Basic:amax: {
        'desc': 'Max altitude (Default = CH, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:amax',
         'promoted_name': 'input:engine:Basic:amax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:amax',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:engine:Basic:xminc: {
        'desc': 'Mach number increment (Default = .2)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:xminc',
         'promoted_name': 'input:engine:Basic:xminc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:xminc',
         'typeVar': 'Float',
         'val': 0.2}
      input:engine:Basic:ainc: {
        'desc': 'Altitude increment (Default = 5000.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:ainc',
         'promoted_name': 'input:engine:Basic:ainc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:ainc',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 5000.0}
      input:engine:Basic:qmin: {
        'desc': 'Minimum dynamic pressure',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:qmin',
         'promoted_name': 'input:engine:Basic:qmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:qmin',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 150.0}
      input:engine:Basic:qmax: {
        'desc': 'Maximum dynamic pressure',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:Basic:qmax',
         'promoted_name': 'input:engine:Basic:qmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:engine:Basic:qmax',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 1200.0}
      input:engine:ifile: {
        'desc': 'Name of cycle definition input file.  Used only if IENG = '
                 '0.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:ifile',
         'promoted_name': 'input:engine:ifile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:ifile',
         'typeVar': 'Str',
         'val': ''}
      input:engine:tfile: {
        'desc': 'Name of the file containing component map tables.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:engine:tfile',
         'promoted_name': 'input:engine:tfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine:tfile',
         'typeVar': 'Str',
         'val': 'ENGTAB'}
      input:engine_deck:engdek: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:engine_deck:engdek',
         'promoted_name': 'input:engine_deck:engdek',
         'size': 0,
         'top_promoted_name': 'my_flops.input:engine_deck:engdek',
         'typeVar': 'Str',
         'val': ''}
      input:fusein:Basic:fpitch: {
        'desc': 'Seat pitch for the first class passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:fpitch',
         'promoted_name': 'input:fusein:Basic:fpitch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:Basic:fpitch',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:fusein:Basic:nfabr: {
        'desc': 'Number of first class passengers abreast',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:nfabr',
         'promoted_name': 'input:fusein:Basic:nfabr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:Basic:nfabr',
         'typeVar': 'Int',
         'val': 6}
      input:fusein:Basic:bpitch: {
        'desc': 'Seat pitch for business class passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:bpitch',
         'promoted_name': 'input:fusein:Basic:bpitch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:Basic:bpitch',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:fusein:Basic:nbabr: {
        'desc': 'Number of business class passengers abreast',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:nbabr',
         'promoted_name': 'input:fusein:Basic:nbabr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:Basic:nbabr',
         'typeVar': 'Int',
         'val': 0}
      input:fusein:Basic:tpitch: {
        'desc': 'Seat pitch for tourist class passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:tpitch',
         'promoted_name': 'input:fusein:Basic:tpitch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:Basic:tpitch',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:fusein:Basic:ntabr: {
        'desc': 'Number of tourist class passengers abreast',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:Basic:ntabr',
         'promoted_name': 'input:fusein:Basic:ntabr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:Basic:ntabr',
         'typeVar': 'Int',
         'val': 7}
      input:fusein:BWB:osspan: {
        'desc': 'Outboard semispan (Default = ETAW(NETAW), required if '
                 'ETAW(NETAW) is less than or equal to 1.0 and IFITE = 3 and '
                 'NETAW > 1)\n'
                 'This variable is used if a detailed wing outboard panel '
                 '(See Detailed Wing Data in Namelist $WTIN) is being added '
                 'to a BWB fuselage.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:osspan',
         'promoted_name': 'input:fusein:BWB:osspan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:osspan',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:tipchd: {
        'desc': 'Wing tip chord (Default = 0.06*Wing span)\n'
                 'This variable is used if the wing outer panel is defined '
                 'as a trapezoid attached to the BWB cabin.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:tipchd',
         'promoted_name': 'input:fusein:BWB:tipchd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:tipchd',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:nesob: {
        'desc': 'Wing eta station number for outboard side of body.  If '
                 'this variable is greater than 1, the detailed wing '
                 'definition is assumed to include the cabin.  Weight '
                 'calculations for the outboard wing start at this eta '
                 'station. (If = 0, the detailed outboard wing is added to '
                 'the cabin as indicated above.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:nesob',
         'promoted_name': 'input:fusein:BWB:nesob',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:BWB:nesob',
         'typeVar': 'Int',
         'val': 0}
      input:fusein:BWB:acabin: {
        'desc': 'Fixed area of passenger cabin for blended wing body '
                 'transports (Default is internally computed based on '
                 'passenger data)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:acabin',
         'promoted_name': 'input:fusein:BWB:acabin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:acabin',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:fusein:BWB:xlw: {
        'desc': 'Fixed length of side wall.\n'
                 'This is the outboard wall of the passenger cabin and is '
                 'used to define the outboard wing root chord.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:xlw',
         'promoted_name': 'input:fusein:BWB:xlw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:xlw',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:xlwmin: {
        'desc': 'Minimum side wall length.  The typical value of 38.5 ft is '
                 'based on a required maximum depth at the side wall of 8.25 '
                 'ft divided by a fuselage thickness/chord ratio of 0.15 and '
                 '70 percent of the resulting wing root chord of 55 ft.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:xlwmin',
         'promoted_name': 'input:fusein:BWB:xlwmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:xlwmin',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:nbay: {
        'desc': 'Fixed number of bays',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:nbay',
         'promoted_name': 'input:fusein:BWB:nbay',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:BWB:nbay',
         'typeVar': 'Int',
         'val': 0}
      input:fusein:BWB:nbaymx: {
        'desc': 'Maximum number of bays',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:nbaymx',
         'promoted_name': 'input:fusein:BWB:nbaymx',
         'size': 0,
         'top_promoted_name': 'my_flops.input:fusein:BWB:nbaymx',
         'typeVar': 'Int',
         'val': 0}
      input:fusein:BWB:bayw: {
        'desc': 'Fixed bay width',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:bayw',
         'promoted_name': 'input:fusein:BWB:bayw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:bayw',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:baywmx: {
        'desc': 'Maximum bay width',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:baywmx',
         'promoted_name': 'input:fusein:BWB:baywmx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:baywmx',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:fusein:BWB:swple: {
        'desc': 'Sweep angle of the leading edge of the passenger cabin',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:swple',
         'promoted_name': 'input:fusein:BWB:swple',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:swple',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 45.0}
      input:fusein:BWB:cratio: {
        'desc': 'Fixed ratio of the centerline length to the cabin width '
                 '(XLP/WF)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:cratio',
         'promoted_name': 'input:fusein:BWB:cratio',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:cratio',
         'typeVar': 'Float',
         'val': 0.0}
      input:fusein:BWB:tcf: {
        'desc': 'Fuselage thickness/chord ratio (Default = TCA, Namelist '
                 '&CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:tcf',
         'promoted_name': 'input:fusein:BWB:tcf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:tcf',
         'typeVar': 'Float',
         'val': 0.0}
      input:fusein:BWB:tcsob: {
        'desc': 'Fuselage thickness/chord ratio at side of body (Default = '
                 'TCF)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:tcsob',
         'promoted_name': 'input:fusein:BWB:tcsob',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:tcsob',
         'typeVar': 'Float',
         'val': 0.0}
      input:fusein:BWB:rspchd: {
        'desc': 'Rear spar percent chord for BWB fuselage and wing (Default '
                 '= 70 percent)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:rspchd',
         'promoted_name': 'input:fusein:BWB:rspchd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:rspchd',
         'typeVar': 'Float',
         'val': 0.0}
      input:fusein:BWB:rspsob: {
        'desc': 'Rear spar percent chord for BWB fuselage at side of body '
                 '(Default = 70 percent)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:fusein:BWB:rspsob',
         'promoted_name': 'input:fusein:BWB:rspsob',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:fusein:BWB:rspsob',
         'typeVar': 'Float',
         'val': 0.0}
      input:missin:User_Weights:mywts: {
        'aliases': ('Compute weight', 'User-specified'),
         'desc': 'Weight input switch, overrides value input in Namelist '
                 '&WTIN.',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:User_Weights:mywts',
         'promoted_name': 'input:missin:User_Weights:mywts',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:User_Weights:mywts',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:User_Weights:rampwt: {
        'desc': 'Gross weight before taxi out (Default = DOWE + PAYLOD + '
                 'FUEMAX)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:User_Weights:rampwt',
         'promoted_name': 'input:missin:User_Weights:rampwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:User_Weights:rampwt',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:User_Weights:dowe: {
        'desc': 'Fixed operating weight empty',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:User_Weights:dowe',
         'promoted_name': 'input:missin:User_Weights:dowe',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:User_Weights:dowe',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:User_Weights:paylod: {
        'desc': 'Fixed payload weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:User_Weights:paylod',
         'promoted_name': 'input:missin:User_Weights:paylod',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:User_Weights:paylod',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:User_Weights:fuemax: {
        'desc': 'Total usable fuel weight\n'
                 'FUEMAX = RAMPWT - DOWE - PAYLOD.\n'
                 'Required only if RAMPWT is not input',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:User_Weights:fuemax',
         'promoted_name': 'input:missin:User_Weights:fuemax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:User_Weights:fuemax',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:Turn_Segments:xnz: {
        'desc': 'Maximum turn load factor at each Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Turn_Segments:xnz',
         'promoted_name': 'input:missin:Turn_Segments:xnz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Turn_Segments:xnz',
         'typeVar': 'Array',
         'units': 'g',
         'val': array([], dtype=float64)}
      input:missin:Turn_Segments:xcl: {
        'desc': 'Maximum turn lift coefficient at each Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Turn_Segments:xcl',
         'promoted_name': 'input:missin:Turn_Segments:xcl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Turn_Segments:xcl',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Turn_Segments:xmach: {
        'desc': 'Mach number array corresponding to both XNZ and XCL',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Turn_Segments:xmach',
         'promoted_name': 'input:missin:Turn_Segments:xmach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Turn_Segments:xmach',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Store_Drag:stma: {
        'desc': 'Mach number schedule for store drags.  Store drags can '
                 'also be assessed in ACCEL and TURN segments of the mission '
                 'as covered in the Segment Definition Cards section, in PS '
                 'and NZ plots (see Namelist &OPTION), and in performance '
                 'constraints (see Namelist &PCONIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Store_Drag:stma',
         'promoted_name': 'input:missin:Store_Drag:stma',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Store_Drag:stma',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Store_Drag:cdst: {
        'desc': 'Corresponding drag coefficients or D/q',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Store_Drag:cdst',
         'promoted_name': 'input:missin:Store_Drag:cdst',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Store_Drag:cdst',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Store_Drag:istcl: {
        'desc': 'Store drag condition applied to climb schedule K\n'
                 '= 0, No store drag for climb schedule K',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Store_Drag:istcl',
         'promoted_name': 'input:missin:Store_Drag:istcl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Store_Drag:istcl',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Store_Drag:istcr: {
        'desc': 'Store drag condition applied to cruise schedule K\n'
                 '= 0, No store drag for cruise schedule K',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Store_Drag:istcr',
         'promoted_name': 'input:missin:Store_Drag:istcr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Store_Drag:istcr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Store_Drag:istde: {
        'desc': 'Store drag condition applied to descent schedule\n'
                 '= 0, No store drag for descent schedule',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Store_Drag:istde',
         'promoted_name': 'input:missin:Store_Drag:istde',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Store_Drag:istde',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Reserve:irs: {
        'aliases': (        'Calculated for trip to alternate airport plus '
                             'RESRFU and/or RESTRP',
                             'Constant values (RESRFU and/or RESTRP) only',
                             'Reserve fuel is what is left over after '
                             'primary mission'),
         'desc': 'Reserve fuel calculation switch',
         'optionsVal': (1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:irs',
         'promoted_name': 'input:missin:Reserve:irs',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:irs',
         'typeVar': 'Enum',
         'val': 2}
      input:missin:Reserve:resrfu: {
        'desc': '> 1., Fixed reserve fuel, lb\n'
                 '< 1., Reserve fuel as a fraction of total usable fuel '
                 'weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:resrfu',
         'promoted_name': 'input:missin:Reserve:resrfu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:resrfu',
         'typeVar': 'Float',
         'val': 0.05}
      input:missin:Reserve:restrp: {
        'desc': 'Reserve fuel as a fraction of total trip fuel weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:restrp',
         'promoted_name': 'input:missin:Reserve:restrp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:restrp',
         'typeVar': 'Float',
         'val': 0.0}
      input:missin:Reserve:timmap: {
        'desc': 'Missed approach time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:timmap',
         'promoted_name': 'input:missin:Reserve:timmap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:timmap',
         'typeVar': 'Float',
         'units': 'min',
         'val': 0.0}
      input:missin:Reserve:altran: {
        'desc': 'Range to alternate airport',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:altran',
         'promoted_name': 'input:missin:Reserve:altran',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:altran',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': 0.0}
      input:missin:Reserve:nclres: {
        'desc': 'Climb schedule number used in reserve mission',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:nclres',
         'promoted_name': 'input:missin:Reserve:nclres',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:nclres',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Reserve:ncrres: {
        'desc': 'Cruise schedule number used in reserve mission',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:ncrres',
         'promoted_name': 'input:missin:Reserve:ncrres',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:ncrres',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Reserve:sremch: {
        'desc': 'Start reserve Mach number (Default = CLMMIN[NCLRES])',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:sremch',
         'promoted_name': 'input:missin:Reserve:sremch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:sremch',
         'typeVar': 'Float',
         'val': -1.0}
      input:missin:Reserve:eremch: {
        'desc': 'End reserve Mach number (Default = DEMMIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:eremch',
         'promoted_name': 'input:missin:Reserve:eremch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:eremch',
         'typeVar': 'Float',
         'val': -1.0}
      input:missin:Reserve:srealt: {
        'desc': 'Start reserve altitude (Default = CLAMIN[NCLRES])',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:srealt',
         'promoted_name': 'input:missin:Reserve:srealt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:srealt',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:missin:Reserve:erealt: {
        'desc': 'End reserve altitude (Default = DEAMIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:erealt',
         'promoted_name': 'input:missin:Reserve:erealt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:erealt',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:missin:Reserve:holdtm: {
        'desc': 'Reserve holding time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:holdtm',
         'promoted_name': 'input:missin:Reserve:holdtm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:holdtm',
         'typeVar': 'Float',
         'units': 'min',
         'val': 0.0}
      input:missin:Reserve:ncrhol: {
        'desc': 'Cruise schedule number for hold (Default = NCRRES)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:ncrhol',
         'promoted_name': 'input:missin:Reserve:ncrhol',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:ncrhol',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Reserve:ihopos: {
        'aliases': (        'Between main descent and missed approach',
                             'End of reserve cruise',
                             'End of reserve descent'),
         'desc': 'Hold position switch',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:ihopos',
         'promoted_name': 'input:missin:Reserve:ihopos',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:ihopos',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Reserve:icron: {
        'aliases': (        'Climb-cruise-descend',
                             'Climb-cruise-beam down to airport',
                             'Cruise only'),
         'desc': 'Type of flight to alternate airport',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:icron',
         'promoted_name': 'input:missin:Reserve:icron',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:icron',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Reserve:thold: {
        'desc': 'Used to define a hold segment between main mission descent '
                 'and missed approach.\n'
                 '> 1., Reserve holding time, min\n'
                 '< 1., Fraction of flight time to be used as reserve '
                 'holding time.  (Effective only if IRW = 1)\n'
                 '= 0., This option is ignored',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:thold',
         'promoted_name': 'input:missin:Reserve:thold',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Reserve:thold',
         'typeVar': 'Float',
         'val': 0.05}
      input:missin:Reserve:ncrth: {
        'desc': 'Cruise schedule number for THOLD',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Reserve:ncrth',
         'promoted_name': 'input:missin:Reserve:ncrth',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Reserve:ncrth',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Ground_Operations:takotm: {
        'desc': 'Takeoff time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:takotm',
         'promoted_name': 'input:missin:Ground_Operations:takotm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:takotm',
         'typeVar': 'Float',
         'units': 'min',
         'val': 0.4}
      input:missin:Ground_Operations:taxotm: {
        'desc': 'Taxi out time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:taxotm',
         'promoted_name': 'input:missin:Ground_Operations:taxotm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:taxotm',
         'typeVar': 'Float',
         'units': 'min',
         'val': 10.0}
      input:missin:Ground_Operations:apprtm: {
        'desc': 'Approach time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:apprtm',
         'promoted_name': 'input:missin:Ground_Operations:apprtm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:apprtm',
         'typeVar': 'Float',
         'units': 'min',
         'val': 0.0}
      input:missin:Ground_Operations:appfff: {
        'desc': 'Approach fuel flow factor applied to sea level static idle '
                 'fuel flow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:appfff',
         'promoted_name': 'input:missin:Ground_Operations:appfff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:appfff',
         'typeVar': 'Float',
         'val': 2.0}
      input:missin:Ground_Operations:taxitm: {
        'desc': 'Taxi in time',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:taxitm',
         'promoted_name': 'input:missin:Ground_Operations:taxitm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:taxitm',
         'typeVar': 'Float',
         'units': 'min',
         'val': 10.0}
      input:missin:Ground_Operations:ittff: {
        'desc': '> 0, Engine deck power setting for takeoff (Usually = 1 if '
                 'specified).  Taxi fuel flow is sea level static idle.\n'
                 '= 0, Use TAKOFF and TXFUFL.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:ittff',
         'promoted_name': 'input:missin:Ground_Operations:ittff',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:ittff',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Ground_Operations:takoff: {
        'desc': 'Takeoff fuel flow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:takoff',
         'promoted_name': 'input:missin:Ground_Operations:takoff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:takoff',
         'typeVar': 'Float',
         'units': 'lb/h',
         'val': 0.0}
      input:missin:Ground_Operations:txfufl: {
        'desc': 'Taxi fuel flow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:txfufl',
         'promoted_name': 'input:missin:Ground_Operations:txfufl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:txfufl',
         'typeVar': 'Float',
         'units': 'lb/h',
         'val': 0.0}
      input:missin:Ground_Operations:ftkofl: {
        'desc': 'Fixed takeoff fuel.  This ovverides the calculated value '
                 'and is not scaled with engine thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:ftkofl',
         'promoted_name': 'input:missin:Ground_Operations:ftkofl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:ftkofl',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:Ground_Operations:ftxofl: {
        'desc': 'Fixed taxi out fuel.  This ovverides the calculated value '
                 'and is not scaled with engine thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:ftxofl',
         'promoted_name': 'input:missin:Ground_Operations:ftxofl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:ftxofl',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:Ground_Operations:ftxifl: {
        'desc': 'Fixed taxi in fuel.  This ovverides the calculated value '
                 'and is not scaled with engine thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:ftxifl',
         'promoted_name': 'input:missin:Ground_Operations:ftxifl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:ftxifl',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:Ground_Operations:faprfl: {
        'desc': 'Fixed approach fuel.  This ovverides the calculated value '
                 'and is not scaled with engine thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Ground_Operations:faprfl',
         'promoted_name': 'input:missin:Ground_Operations:faprfl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Ground_Operations:faprfl',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:missin:Descent:ivs: {
        'aliases': (        'No descent time or distance or fuel',
                             'Descend at optimum L/D',
                             'Descend at constance lift coefficient'),
         'desc': 'Descent option switch',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:ivs',
         'promoted_name': 'input:missin:Descent:ivs',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:ivs',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Descent:decl: {
        'desc': 'Descent lift coefficient for IVS = 2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:decl',
         'promoted_name': 'input:missin:Descent:decl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:decl',
         'typeVar': 'Float',
         'val': 0.8}
      input:missin:Descent:demmin: {
        'desc': 'Minimum Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:demmin',
         'promoted_name': 'input:missin:Descent:demmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:demmin',
         'typeVar': 'Float',
         'val': 0.3}
      input:missin:Descent:demmax: {
        'desc': 'Max Mach number (Default = VCMN, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:demmax',
         'promoted_name': 'input:missin:Descent:demmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:demmax',
         'typeVar': 'Float',
         'val': 0.0}
      input:missin:Descent:deamin: {
        'desc': 'Minimum altitude',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:deamin',
         'promoted_name': 'input:missin:Descent:deamin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:deamin',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:missin:Descent:deamax: {
        'desc': 'Max altitude (Default = CH, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:deamax',
         'promoted_name': 'input:missin:Descent:deamax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:deamax',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:missin:Descent:ninde: {
        'desc': 'Number of descent steps',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:ninde',
         'promoted_name': 'input:missin:Descent:ninde',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:ninde',
         'typeVar': 'Int',
         'val': 31}
      input:missin:Descent:dedcd: {
        'desc': 'Drag coefficient increment applied to descent',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:dedcd',
         'promoted_name': 'input:missin:Descent:dedcd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:dedcd',
         'typeVar': 'Float',
         'val': 0.0}
      input:missin:Descent:rdlim: {
        'desc': 'Limiting or constant rate of descent.  Must be negative',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:rdlim',
         'promoted_name': 'input:missin:Descent:rdlim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Descent:rdlim',
         'typeVar': 'Float',
         'units': 'ft/min',
         'val': -99999.0}
      input:missin:Descent:ns: {
        'desc': 'Number of altitudes for q limit schedule (Default = 0 - '
                 'QLIM is used, Maximum = 20 )',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:ns',
         'promoted_name': 'input:missin:Descent:ns',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:ns',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Descent:keasvd: {
        'aliases': ('VDTAB is Mach number', 'VDTAB in knots'),
         'desc': '= 1, VDTAB is in knots equivalent airspeed (keas)\n'
                 '\n'
                 '= 0, VDTAB is true airspeed or Mach number (Default)',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:keasvd',
         'promoted_name': 'input:missin:Descent:keasvd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:keasvd',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Descent:adtab: {
        'desc': 'Descent altitude schedule.  If only part of the descent '
                 'profile is specified, the portion of the profile outside '
                 'the energy range defined by values of ADTAB and VDTAB will '
                 'be optimized for the descent schedule.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:adtab',
         'promoted_name': 'input:missin:Descent:adtab',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:adtab',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:missin:Descent:vdtab: {
        'desc': 'Descent speed schedule, kts or Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Descent:vdtab',
         'promoted_name': 'input:missin:Descent:vdtab',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Descent:vdtab',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Cruise:ncruse: {
        'desc': 'Number of cruise schedules to be defined (Default = 1, '
                 'Maximum = 6, Include reserve cruise)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:ncruse',
         'promoted_name': 'input:missin:Cruise:ncruse',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Cruise:ncruse',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Cruise:ioc: {
        'aliases': (        'Opt. alt. and Mach for specific range',
                             'Fixed Mach + opt. alt. for specific range',
                             'Fixed Mach at input max. alt. or cruise '
                             'ceiling',
                             'Fixed alt. + opt. Mach for specific range',
                             'Fixed alt. + opt. Mach for endurance (min. '
                             'fuel flow)',
                             'Fixed alt. + constant lift coefficient '
                             '(CRCLMX)',
                             'Fixed Mach + opt. alt. for endurance',
                             'Opt. Mach and alt. for endurance',
                             'Max. Mach at input fixed alt.',
                             'Max. Mach at opt. alt.',
                             'Fixed Mach + constant lift coefficient (CRCLMX'),
         'desc': 'Cruise option switch',
         'optionsVal': '(0,1,2,3,4,5,6,7,8,9,10)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:ioc',
         'promoted_name': 'input:missin:Cruise:ioc',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Cruise:ioc',
         'typeVar': 'Array,int',
         'val': array([1])}
      input:missin:Cruise:crmach: {
        'desc': 'Maximum or fixed Mach number (or velocity, kts) (Default = '
                 'VCMN, Namelist &CONFIN)',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:crmach',
         'promoted_name': 'input:missin:Cruise:crmach',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:crmach',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Cruise:cralt: {
        'desc': 'Maximum or fixed altitude (Default = CH, Namelist &CONFIN)',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:cralt',
         'promoted_name': 'input:missin:Cruise:cralt',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:cralt',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([-1.])}
      input:missin:Cruise:crdcd: {
        'desc': 'Drag coefficient increment',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:crdcd',
         'promoted_name': 'input:missin:Cruise:crdcd',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:crdcd',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Cruise:flrcr: {
        'desc': 'Specific range factor for long range cruise Mach number - '
                 'used if IOC = 3',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:flrcr',
         'promoted_name': 'input:missin:Cruise:flrcr',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:flrcr',
         'typeVar': 'Array',
         'val': array([ 1.])}
      input:missin:Cruise:crmmin: {
        'desc': 'Minimum Mach number',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:crmmin',
         'promoted_name': 'input:missin:Cruise:crmmin',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:crmmin',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Cruise:crclmx: {
        'desc': 'Maximum or fixed lift coefficient',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:crclmx',
         'promoted_name': 'input:missin:Cruise:crclmx',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:crclmx',
         'typeVar': 'Array,float',
         'val': array([ 0.])}
      input:missin:Cruise:hpmin: {
        'desc': 'Minimum cruise altitude.\n'
                 'For fixed Mach number cruise schedules, HPMIN can be used '
                 'to enforce a dynamic pressure (Q) limit.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:hpmin',
         'promoted_name': 'input:missin:Cruise:hpmin',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:hpmin',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([ 1000.])}
      input:missin:Cruise:ffuel: {
        'desc': 'Fuel factor in cruise profile optimization',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:ffuel',
         'promoted_name': 'input:missin:Cruise:ffuel',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:ffuel',
         'typeVar': 'Array',
         'val': array([ 1.])}
      input:missin:Cruise:fnox: {
        'desc': 'NOx emissions factor in cruise profile optimization.\n'
                 'Since for supersonic engines the NOx emissions are on the '
                 'order of 1 - 3 percent of fuel, FNOX should be relatively '
                 'large (30. - 100.) to get comparable weighting.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:fnox',
         'promoted_name': 'input:missin:Cruise:fnox',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:fnox',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Cruise:ifeath: {
        'aliases': (        'Engines may be feathered',
                             'No feathering',
                             'Engines must be feathered'),
         'desc': 'Cruise feathering option',
         'optionsVal': '(1,0,-1)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:ifeath',
         'promoted_name': 'input:missin:Cruise:ifeath',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Cruise:ifeath',
         'typeVar': 'List',
         'val': array([0])}
      input:missin:Cruise:feathf: {
        'desc': 'Fraction of engines remaining after feathering',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:feathf',
         'promoted_name': 'input:missin:Cruise:feathf',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:feathf',
         'typeVar': 'Array',
         'val': array([ 0.5])}
      input:missin:Cruise:cdfeth: {
        'desc': 'Drag coefficient increase due to feathered engines',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:cdfeth',
         'promoted_name': 'input:missin:Cruise:cdfeth',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:cdfeth',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Cruise:dcwt: {
        'desc': 'Weight increment used to compute cruise tables (Default = '
                 'the greater of 1. or DWT/20)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:dcwt',
         'promoted_name': 'input:missin:Cruise:dcwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:dcwt',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 1.0}
      input:missin:Cruise:rcin: {
        'desc': 'Instantaneous rate of climb for ceiling calculation',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:rcin',
         'promoted_name': 'input:missin:Cruise:rcin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Cruise:rcin',
         'typeVar': 'Float',
         'units': 'ft/min',
         'val': 100.0}
      input:missin:Cruise:wtbm: {
        'desc': 'Array of weights for specification of max. allowable '
                 'altitude for low sonic boom configurations (must be in '
                 'ascending order) Since linear interpolation/extrapolation '
                 'is used, data should cover the entire expected weight '
                 'range.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:wtbm',
         'promoted_name': 'input:missin:Cruise:wtbm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Cruise:wtbm',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:missin:Cruise:altbm: {
        'desc': 'Corresponding array of maximum altitudes',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Cruise:altbm',
         'promoted_name': 'input:missin:Cruise:altbm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Cruise:altbm',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:missin:Climb:nclimb: {
        'desc': 'Number of climb schedules to be defined (Default = 1, '
                 'Maximum = 4, Include reserve climb)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:nclimb',
         'promoted_name': 'input:missin:Climb:nclimb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:nclimb',
         'typeVar': 'Int',
         'val': 1}
      input:missin:Climb:clmmin: {
        'desc': 'Minimum Mach number for each climb schedule.\n'
                 'Note: Separate climb schedules are not required if the '
                 'only changes are in the minimum or maximum Mach number or '
                 'altitude.  Just make sure all climbs are bracketed.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:clmmin',
         'promoted_name': 'input:missin:Climb:clmmin',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:clmmin',
         'typeVar': 'Array',
         'val': array([ 0.3])}
      input:missin:Climb:clmmax: {
        'desc': 'Maximum Mach number (Default = VCMN, Namelist &CONFIN).\n'
                 'Note: Separate climb schedules are not required if the '
                 'only changes are in the minimum or maximum Mach number or '
                 'altitude.  Just make sure all climbs are bracketed.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:clmmax',
         'promoted_name': 'input:missin:Climb:clmmax',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:clmmax',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Climb:clamin: {
        'desc': 'Minimum altitude',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:clamin',
         'promoted_name': 'input:missin:Climb:clamin',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:clamin',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([ 0.])}
      input:missin:Climb:clamax: {
        'desc': 'Maximum altitude (Default = CH, Namelist &CONFIN)',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:clamax',
         'promoted_name': 'input:missin:Climb:clamax',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:clamax',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([ 0.])}
      input:missin:Climb:nincl: {
        'desc': 'Number of climb steps',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:nincl',
         'promoted_name': 'input:missin:Climb:nincl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:nincl',
         'typeVar': 'Array,int',
         'val': [31]}
      input:missin:Climb:fwf: {
        'desc': 'Climb profile optimization function control parameter.  '
                 'Recommended aircraft in parentheses.\n'
                 '=  1., minimum fuel-to-distance profile (Subsonic '
                 'transports, do NOT use for supersonic transports)\n'
                 '=  0., minimum time-to-distance profile (Interceptors '
                 'only)\n'
                 '1. > FWF > 0., combination of the above\n'
                 '= -.001, minimum time-to-climb profile (Fighters)\n'
                 '= -1., minimum fuel-to-climb profile (Supersonic '
                 'transports, Subsonic transports)\n'
                 '-1. < FWF < -.001, combination of the above',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:fwf',
         'promoted_name': 'input:missin:Climb:fwf',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:fwf',
         'typeVar': 'Array',
         'val': array([-1.])}
      input:missin:Climb:ncrcl: {
        'desc': 'Number of the cruise schedule to be used in fuel- or '
                 'time-to-distance profile climb optimization comparisons',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:ncrcl',
         'promoted_name': 'input:missin:Climb:ncrcl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:ncrcl',
         'typeVar': 'Array',
         'val': array([1])}
      input:missin:Climb:cldcd: {
        'desc': 'Drag coefficient increment applied to each climb '
                 'schedule.  If coefficient varies with Mach number, see '
                 'ISTCL above.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:cldcd',
         'promoted_name': 'input:missin:Climb:cldcd',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:cldcd',
         'typeVar': 'Array',
         'val': array([ 0.])}
      input:missin:Climb:ippcl: {
        'desc': 'Number of power settings to be considered for climb.  '
                 'Program will select the most efficient.  Should be used '
                 'only with afterburning engines for minimum fuel climb '
                 'profiles.',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:ippcl',
         'promoted_name': 'input:missin:Climb:ippcl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:ippcl',
         'typeVar': 'Array',
         'val': array([1])}
      input:missin:Climb:maxcl: {
        'desc': 'Maximum power setting used for climb',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:maxcl',
         'promoted_name': 'input:missin:Climb:maxcl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:maxcl',
         'typeVar': 'Array',
         'val': array([1])}
      input:missin:Climb:actab: {
        'desc': 'Altitude schedule.  If not input, climb profile will be '
                 'optimized',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:actab',
         'promoted_name': 'input:missin:Climb:actab',
         'shape': (0, 0),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:actab',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], shape=(0, 0), dtype=float64)}
      input:missin:Climb:vctab: {
        'desc': 'Climb speed schedule.  If not input, climb profile will be '
                 'optimized',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:vctab',
         'promoted_name': 'input:missin:Climb:vctab',
         'shape': (0, 0),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:vctab',
         'typeVar': 'Array',
         'units': 'nmi',
         'val': array([], shape=(0, 0), dtype=float64)}
      input:missin:Climb:keasvc: {
        'aliases': (        'Knots equivalent airspeed (keas)',
                             'True airspeed or Mach no.'),
         'desc': 'Type of velocity input in VCTAB',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:keasvc',
         'promoted_name': 'input:missin:Climb:keasvc',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:keasvc',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Climb:ifaacl: {
        'aliases': (        'Optimum speed',
                             'Max. 250 knots CAS below 10,000 ft',
                             'Climb to 250 kcas at 1500 ft then SPDLIM at '
                             '10,000 ft'),
         'desc': 'Climb speed limit option',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:ifaacl',
         'promoted_name': 'input:missin:Climb:ifaacl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:ifaacl',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Climb:ifaade: {
        'aliases': (        'Use default',
                             'Optimum speed',
                             'Max. 250 knots CAS below 10,000 ft'),
         'desc': 'Descent speed limit option',
         'optionsVal': (-1, 0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:ifaade',
         'promoted_name': 'input:missin:Climb:ifaade',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:ifaade',
         'typeVar': 'Enum',
         'val': -1}
      input:missin:Climb:nodive: {
        'aliases': (        'Optimum altitude at each energy level',
                             'Min. rate of climb limit enfored'),
         'desc': 'Rate of climb limit option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:nodive',
         'promoted_name': 'input:missin:Climb:nodive',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:nodive',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Climb:divlim: {
        'desc': 'Minimum allowable rate of climb or descent.\n'
                 'Enforced only if NODIVE = 1, may be negative to allow a '
                 'shallow dive during climb.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:divlim',
         'promoted_name': 'input:missin:Climb:divlim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:divlim',
         'typeVar': 'Float',
         'units': 'ft/min',
         'val': 0.0}
      input:missin:Climb:qlim: {
        'desc': 'Constant dynamic pressure limit.  Applied at all climb and '
                 'descent points not covered by the variable dynamic '
                 'pressure limit below.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:qlim',
         'promoted_name': 'input:missin:Climb:qlim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:qlim',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 0.0}
      input:missin:Climb:spdlim: {
        'desc': 'Maximum speed at 10,000 ft, used only for IFAACL = 2, kts '
                 'or Mach number  (Default is computed from\n'
                 '  a) the variable dynamic pressure limit below, if '
                 'applicable,\n'
                 '  b) QLIM above, if QLIM > 0., or\n'
                 '  c) a dynamic pressure of 450 psf, in that order)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:spdlim',
         'promoted_name': 'input:missin:Climb:spdlim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Climb:spdlim',
         'typeVar': 'Float',
         'val': 0.0}
      input:missin:Climb:nql: {
        'desc': 'Number of altitudes for q limit schedule (Default = 0 - '
                 'QLIM is used, Maximum = 20 )',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:nql',
         'promoted_name': 'input:missin:Climb:nql',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:nql',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Climb:qlalt: {
        'desc': 'Altitudes, in increasing order, for variable dynamic '
                 'pressure limit schedule',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:qlalt',
         'promoted_name': 'input:missin:Climb:qlalt',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:qlalt',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:missin:Climb:vqlm: {
        'desc': 'Corresponding dynamic pressure limits',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Climb:vqlm',
         'promoted_name': 'input:missin:Climb:vqlm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Climb:vqlm',
         'typeVar': 'Array',
         'units': 'psf',
         'val': array([], dtype=float64)}
      input:missin:Basic:indr: {
        'aliases': ('Range', 'Endurance'),
         'desc': '= 0, DESRNG is design range in n.mi.\n'
                 '= 1, DESRNG is endurance in minutes',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:indr',
         'promoted_name': 'input:missin:Basic:indr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:indr',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Basic:fact: {
        'desc': 'Factor to increase or decrease fuel flows.  Cumulative '
                 'with FFFSUB and FFFSUP in Namelist &ENGDIN.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fact',
         'promoted_name': 'input:missin:Basic:fact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fact',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:fleak: {
        'desc': 'Constant delta fuel flow',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fleak',
         'promoted_name': 'input:missin:Basic:fleak',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fleak',
         'typeVar': 'Float',
         'units': 'lb/h',
         'val': 0.0}
      input:missin:Basic:fcdo: {
        'desc': 'Factor to increase or decrease lift-independent drag '
                 'coefficients',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fcdo',
         'promoted_name': 'input:missin:Basic:fcdo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fcdo',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:fcdi: {
        'desc': 'Factor to increase or decrease lift-dependent drag '
                 'coefficients',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fcdi',
         'promoted_name': 'input:missin:Basic:fcdi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fcdi',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:fcdsub: {
        'desc': 'Factor to increase or decrease all subsonic drag '
                 'coefficients.  Cumulative with FCDO and FCDI.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fcdsub',
         'promoted_name': 'input:missin:Basic:fcdsub',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fcdsub',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:fcdsup: {
        'desc': 'Factor to increase or decrease all supersonic drag '
                 'coefficients.  Cumulative with FCDO and FCDI.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:fcdsup',
         'promoted_name': 'input:missin:Basic:fcdsup',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:fcdsup',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:iskal: {
        'aliases': ('Scale engine', 'No scaling'),
         'desc': 'Special option used to turn off engine scaling using '
                 'THRUST/THRSO',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:iskal',
         'promoted_name': 'input:missin:Basic:iskal',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:iskal',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Basic:owfact: {
        'desc': 'Factor for increasing or decreasing OWE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:owfact',
         'promoted_name': 'input:missin:Basic:owfact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:owfact',
         'typeVar': 'Float',
         'val': 1.0}
      input:missin:Basic:iflag: {
        'aliases': (        'Mission summary only',
                             'Plus cruise',
                             'Plus climb & descent',
                             'Plus scaled engine'),
         'desc': 'Mission print option',
         'optionsVal': (0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:iflag',
         'promoted_name': 'input:missin:Basic:iflag',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:iflag',
         'typeVar': 'Enum',
         'val': 2}
      input:missin:Basic:msumpt: {
        'aliases': ('Yes', 'No'),
         'desc': 'Option to calculate and print detailed mission summary',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:msumpt',
         'promoted_name': 'input:missin:Basic:msumpt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:msumpt',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Basic:dtc: {
        'desc': 'Deviation from standard day temperature (See also DTCT in '
                 'Namelist &TOLIN and DTCE in Namelist &ENGINE.  These '
                 'temperature deviations are independent.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:dtc',
         'promoted_name': 'input:missin:Basic:dtc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:dtc',
         'typeVar': 'Float',
         'units': 'degC',
         'val': 0.0}
      input:missin:Basic:irw: {
        'aliases': (        'Range fixed-calculate ramp weight',
                             'Ramp weight fixed-calculate range'),
         'desc': 'Range/weight calculation option',
         'optionsVal': (1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:irw',
         'promoted_name': 'input:missin:Basic:irw',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:irw',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Basic:rtol: {
        'desc': 'Tolerance in range calculation for IRW = 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:rtol',
         'promoted_name': 'input:missin:Basic:rtol',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:rtol',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': 0.001}
      input:missin:Basic:nhold: {
        'desc': 'Special option - Time for segment NHOLD (which must be a '
                 'Hold Segment) is adjusted until the specified range is met '
                 'for the input ramp weight.  Note - IRW must be 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:nhold',
         'promoted_name': 'input:missin:Basic:nhold',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:nhold',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Basic:iata: {
        'aliases': ('Yes', 'No'),
         'desc': 'Option to adjust range for ATA Traffic Allowance',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:iata',
         'promoted_name': 'input:missin:Basic:iata',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:iata',
         'typeVar': 'Enum',
         'val': 1}
      input:missin:Basic:tlwind: {
        'desc': 'Velocity of tail wind (Input negative value for head wind)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:tlwind',
         'promoted_name': 'input:missin:Basic:tlwind',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:tlwind',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': 0.0}
      input:missin:Basic:dwt: {
        'desc': 'Gross weight increment for performance tables (Default is '
                 'internally computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:dwt',
         'promoted_name': 'input:missin:Basic:dwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:missin:Basic:dwt',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 1.0}
      input:missin:Basic:offdr: {
        'desc': 'Off design range.  Note: This simply performs the defined '
                 'mission with the sized airplane with a different design '
                 'range.  If more changes are desired or if additional '
                 'analyses are required (e.g., cost analysis), use Namelist '
                 '&RERUN.  If OFFDR is used with a cost analysis, costs will '
                 'be computed for the last design range.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:offdr',
         'promoted_name': 'input:missin:Basic:offdr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:offdr',
         'typeVar': 'Array',
         'units': 'nmi',
         'val': []}
      input:missin:Basic:idoq: {
        'aliases': ('D/q', 'Drag coefficients'),
         'desc': 'Form for drag increments',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:idoq',
         'promoted_name': 'input:missin:Basic:idoq',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:idoq',
         'typeVar': 'Enum',
         'val': 0}
      input:missin:Basic:nsout: {
        'desc': 'Last segment number in outbound leg (Combat Radius Mission '
                 '- Iterates until outbound leg and inbound leg are equal.  '
                 'IRW must be equal to 2, and there must be at least two '
                 'cruise segments).  If NSOUT = 0, radius is not calculated',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:nsout',
         'promoted_name': 'input:missin:Basic:nsout',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:nsout',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Basic:nsadj: {
        'desc': 'Cruise segment in outbound leg to be adjusted for radius '
                 'calculation (Default = NSOUT).  Note: Make sure that the '
                 'NSADJ Cruise segment is terminated on total rather than '
                 'segment distance in the Mission Definition Data.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:nsadj',
         'promoted_name': 'input:missin:Basic:nsadj',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:nsadj',
         'typeVar': 'Int',
         'val': 0}
      input:missin:Basic:mirror: {
        'desc': 'Cruise segment in inbound leg to be set equal to segment '
                 'NSADJ  (if MIRROR = 0, only total leg lengths are forced '
                 'to be equal).  This option would be used for a '
                 'high-low-low-high mission where the dash in and dash out '
                 'are unknown but must be equal to each other.  NSADJ would '
                 'be the dash in segment number, and MIRROR would be the '
                 'dash out segment number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:missin:Basic:mirror',
         'promoted_name': 'input:missin:Basic:mirror',
         'size': 0,
         'top_promoted_name': 'my_flops.input:missin:Basic:mirror',
         'typeVar': 'Int',
         'val': 0}
      input:mission_definition:mission: {
        'other': 'itype',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:mission_definition:mission',
         'promoted_name': 'input:mission_definition:mission',
         'size': 0,
         'top_promoted_name': 'my_flops.input:mission_definition:mission',
         'typeVar': 'List',
         'val': ['START', 'CLIMB', 'CRUISE', 'DESCENT', 'END']}
      input:nacell:x1r: {
        'desc': 'X1 / R.  If IVAR = -1, X1R is the cowl length divided by '
                 'the inlet capture radius.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:x1r',
         'promoted_name': 'input:nacell:x1r',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:x1r',
         'typeVar': 'Float',
         'val': 2.06}
      input:nacell:x2r: {
        'desc': 'X2 / R',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:x2r',
         'promoted_name': 'input:nacell:x2r',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:x2r',
         'typeVar': 'Float',
         'val': 1.58}
      input:nacell:r1r: {
        'desc': 'R1 / R',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:r1r',
         'promoted_name': 'input:nacell:r1r',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:r1r',
         'typeVar': 'Float',
         'val': 0.354}
      input:nacell:r2r: {
        'desc': 'R2 / R',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:r2r',
         'promoted_name': 'input:nacell:r2r',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:r2r',
         'typeVar': 'Float',
         'val': 0.585}
      input:nacell:angle: {
        'desc': 'Average angle of the subsonic diffuser portion of the '
                 'inlet between the throat and the engine face',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:angle',
         'promoted_name': 'input:nacell:angle',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:angle',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 7.0}
      input:nacell:clang: {
        'desc': 'Cowl lip angle',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:clang',
         'promoted_name': 'input:nacell:clang',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:clang',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:nacell:mixed: {
        'aliases': (        'Use geometry variables',
                             'External compression inlet',
                             'Mixed compression inlet'),
         'desc': 'Inlet compression type indicator\n'
                 '= -1, Inlet geometry is based solely on the geometry '
                 'variables described above.\n'
                 '=  0, Inlet geometry is based in the internal geometry '
                 'data base for external compression inlets and the given '
                 'inlet design Mach number.\n'
                 '=  1, Inlet geometry is based in the internal geometry '
                 'data base for mixed compression inlets and the given inlet '
                 'design Mach number',
         'optionsVal': (-1, 0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:mixed',
         'promoted_name': 'input:nacell:mixed',
         'size': 0,
         'top_promoted_name': 'my_flops.input:nacell:mixed',
         'typeVar': 'Enum',
         'val': -1}
      input:nacell:radd: {
        'desc': 'Distance from the engine compressor tip to the exterior of '
                 'the nacelle.  If RADD < 1. the added radial distance is '
                 'RADD times the compressor tip radius.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:radd',
         'promoted_name': 'input:nacell:radd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:radd',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 3.0}
      input:nacell:xnlod: {
        'desc': 'Nozzle length / diameter (Default is computed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:xnlod',
         'promoted_name': 'input:nacell:xnlod',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:xnlod',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:xnld2: {
        'desc': 'Fan nozzle length / diameter (Default is computed',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:xnld2',
         'promoted_name': 'input:nacell:xnld2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:xnld2',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:inac: {
        'aliases': (        '2-D Bifurcated inlet + axisymmetric nozzle + '
                             'podded together',
                             '2-D Bifurcated inlet + 2-D nozzle + podded '
                             'together',
                             '2-D inlet + axisymmetric nozzle + podded '
                             'together',
                             '2-D + podded together',
                             'Axisymmetric + podded together',
                             'None',
                             'Axisymmetric',
                             '2-D',
                             '2-D inlet + Axisymmetric nozzle',
                             '2-D Bifurcated inlet + 2-D nozzle',
                             '2-D Bifurcated inlet + axisymmetric nozzle'),
         'desc': 'Nacelle type indicator',
         'optionsVal': (-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:inac',
         'promoted_name': 'input:nacell:inac',
         'size': 0,
         'top_promoted_name': 'my_flops.input:nacell:inac',
         'typeVar': 'Enum',
         'val': 0}
      input:nacell:ivar: {
        'aliases': (        'Fixed no centerbody',
                             'Fixed centerbody',
                             'Translating centerbody',
                             'Collapsing centerbody',
                             'Translating & collapsing centerbody'),
         'desc': 'Inlet variable geometry switch used to estimate weight '
                 'factor WTCB1',
         'optionsVal': (-1, 0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:ivar',
         'promoted_name': 'input:nacell:ivar',
         'size': 0,
         'top_promoted_name': 'my_flops.input:nacell:ivar',
         'typeVar': 'Enum',
         'val': 1}
      input:nacell:nvar: {
        'aliases': (        'Fixed geometry',
                             'Variable area throat',
                             'Variable area exit',
                             'Variable throat & exit',
                             'Fixed plug core & fixed fan nozzle'),
         'desc': 'Nozzle variable geometry switch used to estimate weight '
                 'factor WTNOZ',
         'optionsVal': (0, 1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:nvar',
         'promoted_name': 'input:nacell:nvar',
         'size': 0,
         'top_promoted_name': 'my_flops.input:nacell:nvar',
         'typeVar': 'Enum',
         'val': 0}
      input:nacell:wtcb1: {
        'desc': 'Weighting factor for the inlet centerbody up to the '
                 'throat.   Multiplied by the surface area of the applicable '
                 'inlet section to predict inlet weight.  The default is '
                 'based on the internal materials data base and the maximum '
                 'cruise Mach number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:wtcb1',
         'promoted_name': 'input:nacell:wtcb1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:wtcb1',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:wtcb2: {
        'desc': 'Weighting factor for the inlet centerbody from the throat '
                 'to the engine face.  Multiplied by the surface area of the '
                 'applicable inlet section to predict inlet weight.  The '
                 'default is based on the internal materials data base and '
                 'the maximum cruise Mach number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:wtcb2',
         'promoted_name': 'input:nacell:wtcb2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:wtcb2',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:wtint: {
        'desc': 'Weighting factor for the internal cowl up to the engine '
                 'face.  Multiplied by the surface area of the applicable '
                 'inlet section to predict inlet weight.  The default is '
                 'based on the internal materials data base and the maximum '
                 'cruise Mach number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:wtint',
         'promoted_name': 'input:nacell:wtint',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:wtint',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:wtext: {
        'desc': 'Weighting factor for the external nacelle.  Multiplied by '
                 'the surface area of the applicable inlet section to '
                 'predict inlet weight.  The default is based on the '
                 'internal materials data base and the maximum cruise Mach '
                 'number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:wtext',
         'promoted_name': 'input:nacell:wtext',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:wtext',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:wtnoz: {
        'desc': 'Weighting factor for the nozzle.  Multiplied by the '
                 'surface area of the applicable inlet section to predict '
                 'inlet weight.  The default is based on the internal '
                 'materials data base and the maximum cruise Mach number.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:wtnoz',
         'promoted_name': 'input:nacell:wtnoz',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:wtnoz',
         'typeVar': 'Float',
         'val': -10.0}
      input:nacell:h2w: {
        'desc': 'Inlet height to width ratio for 2-D inlets',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:nacell:h2w',
         'promoted_name': 'input:nacell:h2w',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:nacell:h2w',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Turbine:tsupp: {
        'desc': 'Turbine suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:tsupp',
         'promoted_name': 'input:noisin:Turbine:tsupp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:tsupp',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Turbine:tbndia: {
        'desc': 'Diameter of last-stage turbine',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:tbndia',
         'promoted_name': 'input:noisin:Turbine:tbndia',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:tbndia',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:noisin:Turbine:gear: {
        'desc': 'Gear ratio:  turbine RPM/fan RPM',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:gear',
         'promoted_name': 'input:noisin:Turbine:gear',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:gear',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Turbine:cs: {
        'desc': 'Stator chord to rotor spacing ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:cs',
         'promoted_name': 'input:noisin:Turbine:cs',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:cs',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Turbine:nblr: {
        'desc': 'Number of last stage rotor blades',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:nblr',
         'promoted_name': 'input:noisin:Turbine:nblr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:nblr',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Turbine:ityptb: {
        'aliases': ('Turbofans', 'Turbojets or coplanar exits'),
         'desc': 'Type of exit plane',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:ityptb',
         'promoted_name': 'input:noisin:Turbine:ityptb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:ityptb',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Turbine:etdop: {
        'desc': 'Exponent on source motion (Doppler) amplification on '
                 'turbine noise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Turbine:etdop',
         'promoted_name': 'input:noisin:Turbine:etdop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Turbine:etdop',
         'typeVar': 'Float',
         'val': 4.0}
      input:noisin:Shielding:iuotw: {
        'aliases': ('Over the wing', 'Under the wing'),
         'desc': 'Engine location relative to wing',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:iuotw',
         'promoted_name': 'input:noisin:Shielding:iuotw',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:iuotw',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Shielding:sfuse: {
        'desc': 'Maximum fuselage shielding',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:sfuse',
         'promoted_name': 'input:noisin:Shielding:sfuse',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:sfuse',
         'typeVar': 'Float',
         'val': 10.0}
      input:noisin:Shielding:swide: {
        'desc': 'Degrees of arc where fuselage shielding is greater than '
                 'SFUSE/e',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:swide',
         'promoted_name': 'input:noisin:Shielding:swide',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:swide',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 60.0}
      input:noisin:Shielding:swing: {
        'desc': 'Maximum wing shielding for over-the-wing engine',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:swing',
         'promoted_name': 'input:noisin:Shielding:swing',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:swing',
         'typeVar': 'Float',
         'val': 10.0}
      input:noisin:Shielding:smx: {
        'desc': 'Angle in flyover plane of maximum over-the-wing shielding',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:smx',
         'promoted_name': 'input:noisin:Shielding:smx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:smx',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 90.0}
      input:noisin:Shielding:cfuse: {
        'desc': 'Characteristic fuselage dimension (such as diameter)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:cfuse',
         'promoted_name': 'input:noisin:Shielding:cfuse',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:cfuse',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10.0}
      input:noisin:Shielding:cwing: {
        'desc': 'Characteristic wing dimension (such as chord)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Shielding:cwing',
         'promoted_name': 'input:noisin:Shielding:cwing',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Shielding:cwing',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10.0}
      input:noisin:Propeller:nb: {
        'desc': 'Number of blades per propeller',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:nb',
         'promoted_name': 'input:noisin:Propeller:nb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:nb',
         'typeVar': 'Int',
         'val': 0}
      input:noisin:Propeller:bldia: {
        'desc': 'Diameter of propeller',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:bldia',
         'promoted_name': 'input:noisin:Propeller:bldia',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:bldia',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Propeller:blarea: {
        'desc': 'Total blade area for one side of propeller',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:blarea',
         'promoted_name': 'input:noisin:Propeller:blarea',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:blarea',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:noisin:Propeller:gearp: {
        'desc': 'Ratio of propeller rpm / engine rpm',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:gearp',
         'promoted_name': 'input:noisin:Propeller:gearp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:gearp',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Propeller:epdop: {
        'desc': 'Exponent on source motion (Doppler) amplification on '
                 'propeller noise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:epdop',
         'promoted_name': 'input:noisin:Propeller:epdop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:epdop',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Propeller:blth: {
        'desc': 'Blade thickness at 70% span',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:blth',
         'promoted_name': 'input:noisin:Propeller:blth',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:blth',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Propeller:blch: {
        'desc': 'Blade chord at 70% span',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:blch',
         'promoted_name': 'input:noisin:Propeller:blch',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:blch',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Propeller:blattk: {
        'desc': 'Blade angle of attack at 70% span',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:blattk',
         'promoted_name': 'input:noisin:Propeller:blattk',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:blattk',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:noisin:Propeller:dharm: {
        'desc': 'Rate of decrease in harmonic level beyond tenth, '
                 'dB/harmonic',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:dharm',
         'promoted_name': 'input:noisin:Propeller:dharm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:dharm',
         'typeVar': 'Float',
         'val': 0.5}
      input:noisin:Propeller:nph: {
        'desc': 'Number of harmonics of BDF desired',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:nph',
         'promoted_name': 'input:noisin:Propeller:nph',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:nph',
         'typeVar': 'Int',
         'val': 10}
      input:noisin:Propeller:ivor: {
        'aliases': ('Vortex noise', 'No vortex noise'),
         'desc': 'Calculate vortex noise component',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:ivor',
         'promoted_name': 'input:noisin:Propeller:ivor',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:ivor',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Propeller:irot: {
        'aliases': ('Rotational noise', 'No rotational noise'),
         'desc': 'Calculate rotational noise component',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:irot',
         'promoted_name': 'input:noisin:Propeller:irot',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:irot',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Propeller:ipdir: {
        'aliases': ('Yes', 'No'),
         'desc': 'Apply Boeing directivity correction',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:ipdir',
         'promoted_name': 'input:noisin:Propeller:ipdir',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:ipdir',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propeller:psupp: {
        'desc': 'Propeller noise suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propeller:psupp',
         'promoted_name': 'input:noisin:Propeller:psupp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propeller:psupp',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Propagation:isupp: {
        'aliases': ('Yes', 'No'),
         'desc': 'Apply suppression spectra to each source for which they '
                 'are supplied',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:isupp',
         'promoted_name': 'input:noisin:Propagation:isupp',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:isupp',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:idop: {
        'aliases': ('Yes', 'No'),
         'desc': 'Apply Doppler frequency and intensity correction to total '
                 'noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:idop',
         'promoted_name': 'input:noisin:Propagation:idop',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:idop',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:ignd: {
        'aliases': ('None', 'Perfect reflection', 'Putnam method'),
         'desc': 'Ground reflection option',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:ignd',
         'promoted_name': 'input:noisin:Propagation:ignd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:ignd',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:iatm: {
        'aliases': ('None', 'SAE ARP 866', 'Bass & Shields'),
         'desc': 'Atmospheric absorption correction',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:iatm',
         'promoted_name': 'input:noisin:Propagation:iatm',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:iatm',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:iega: {
        'aliases': ('Yes', 'No'),
         'desc': 'Extra ground attenuation',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:iega',
         'promoted_name': 'input:noisin:Propagation:iega',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:iega',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:ishld: {
        'aliases': ('Yes', 'No'),
         'desc': 'Shielding of fan, jet, core, turbine and propeller sources',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:ishld',
         'promoted_name': 'input:noisin:Propagation:ishld',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:ishld',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Propagation:deldb: {
        'desc': 'Number of dB down from the peak noise level to cut off '
                 'printing of noise time histories',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:deldb',
         'promoted_name': 'input:noisin:Propagation:deldb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:deldb',
         'typeVar': 'Float',
         'val': 20.0}
      input:noisin:Propagation:heng: {
        'desc': 'Height of engine above ground during taxi',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:heng',
         'promoted_name': 'input:noisin:Propagation:heng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:heng',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Propagation:filbw: {
        'desc': 'Fraction of filter bandwidth with a gain of 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:filbw',
         'promoted_name': 'input:noisin:Propagation:filbw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:filbw',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Propagation:tdi: {
        'desc': 'Reception time increment',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:tdi',
         'promoted_name': 'input:noisin:Propagation:tdi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:tdi',
         'typeVar': 'Float',
         'units': 's',
         'val': 1.0}
      input:noisin:Propagation:rh: {
        'desc': 'Ambient relative humidity',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Propagation:rh',
         'promoted_name': 'input:noisin:Propagation:rh',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Propagation:rh',
         'typeVar': 'Float',
         'val': 70.0}
      input:noisin:Observers:xo: {
        'desc': 'X-coordinates of observers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:xo',
         'promoted_name': 'input:noisin:Observers:xo',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:xo',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Observers:yo: {
        'desc': 'Y-coordinates of observers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:yo',
         'promoted_name': 'input:noisin:Observers:yo',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:yo',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Observers:zo: {
        'desc': 'Height of all observers above the ground',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:zo',
         'promoted_name': 'input:noisin:Observers:zo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Observers:zo',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Observers:ndprt: {
        'desc': 'Print observer noise histories',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:ndprt',
         'promoted_name': 'input:noisin:Observers:ndprt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:ndprt',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Observers:ifoot: {
        'aliases': ('Print', 'No print'),
         'desc': 'Print noise levels of input observers in countour format '
                 'to file NSPLOT for subsequent plotting of the noise '
                 'footprint',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:ifoot',
         'promoted_name': 'input:noisin:Observers:ifoot',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:ifoot',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Observers:igeom: {
        'aliases': ('Print', 'No print'),
         'desc': 'Print geometric relations of aircraft/observer at each '
                 'time point',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:igeom',
         'promoted_name': 'input:noisin:Observers:igeom',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:igeom',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Observers:thrn: {
        'desc': 'Thrust of baseline engine.  Geometry data and engine '
                 'parameter arrays will be scaled accordingly '
                 '(Default=THRSO, Namelist &WTIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:thrn',
         'promoted_name': 'input:noisin:Observers:thrn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Observers:thrn',
         'typeVar': 'Float',
         'units': 'lb',
         'val': -1.0}
      input:noisin:Observers:icorr: {
        'aliases': ('Yes', 'No'),
         'desc': 'Apply corrections to engine parameters to correct for '
                 'ambient conditions',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:icorr',
         'promoted_name': 'input:noisin:Observers:icorr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Observers:icorr',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Observers:tcorxp: {
        'desc': 'Exponent for core temperature correction in engine '
                 'parameter arrays',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Observers:tcorxp',
         'promoted_name': 'input:noisin:Observers:tcorxp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Observers:tcorxp',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:MSJet:iy9: {
        'aliases': (        'Convergent conical',
                             'Single multitube',
                             'Single multichute',
                             'Dual convergent conical',
                             'Dual, multitube on outer',
                             'Dual, multichute/spoke on outer'),
         'desc': 'Type of nozzle',
         'optionsVal': (1, 2, 3, 4, 5, 6),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:iy9',
         'promoted_name': 'input:noisin:MSJet:iy9',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:iy9',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:MSJet:n: {
        'desc': 'Number of tubes (IY9=2,5) or elements (IY9=3,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:n',
         'promoted_name': 'input:noisin:MSJet:n',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:n',
         'typeVar': 'Int',
         'val': 1}
      input:noisin:MSJet:rp: {
        'desc': 'Centerbody plug radius (IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:rp',
         'promoted_name': 'input:noisin:MSJet:rp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:rp',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:MSJet:b9: {
        'desc': 'Tube centerline cant angle (IY9-2,5)\n'
                 'Chute/spoke exit cant angle (IY9=3,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:b9',
         'promoted_name': 'input:noisin:MSJet:b9',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:b9',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:noisin:MSJet:dt: {
        'desc': 'Tube diameter (IY9=2,5)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:dt',
         'promoted_name': 'input:noisin:MSJet:dt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:dt',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:noisin:MSJet:z5: {
        'desc': 'Number of rows of tubes, counting center tube (if present) '
                 'as zero (IY9=2,5)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:z5',
         'promoted_name': 'input:noisin:MSJet:z5',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:z5',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:s1j: {
        'desc': 'Tube centerline spacing to tube diameter ratio (IY9=2,5)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:s1j',
         'promoted_name': 'input:noisin:MSJet:s1j',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:s1j',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:a6: {
        'desc': 'Ratio of ejector inlet area to nozzle (total or annulus) '
                 'area (input zero for no ejector) (IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:a6',
         'promoted_name': 'input:noisin:MSJet:a6',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:a6',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:zl9: {
        'desc': 'Ratio of ejector length to suppressor nozzle equivalent '
                 'diameter (IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:zl9',
         'promoted_name': 'input:noisin:MSJet:zl9',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:zl9',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:a: {
        'desc': 'A(0): Ejector treatment faceplate thickness, in\n'
                 'A(1): Ejector treatment hole diameter, in\n'
                 'A(2): Ejector treatment cavity depth, in\n'
                 'A(3): Ejector treatment open area ratio\n'
                 '(IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:a',
         'promoted_name': 'input:noisin:MSJet:a',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:a',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:MSJet:rr: {
        'desc': 'Ejector treatment specific resistance (59 values required) '
                 '(IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:rr',
         'promoted_name': 'input:noisin:MSJet:rr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:rr',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:MSJet:rx: {
        'desc': 'Ejector treatment specific reactance (59 values required) '
                 '(IY9=2,3,5,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:rx',
         'promoted_name': 'input:noisin:MSJet:rx',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:rx',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:MSJet:r4: {
        'desc': 'Outer circumferential flow dimension (IY9=3,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:r4',
         'promoted_name': 'input:noisin:MSJet:r4',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:r4',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:noisin:MSJet:r6: {
        'desc': 'Inner circumferential flow dimension (IY9=3,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:r6',
         'promoted_name': 'input:noisin:MSJet:r6',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:r6',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:noisin:MSJet:ss: {
        'desc': 'Outer circumferential element dimension (IY9=3,6)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:ss',
         'promoted_name': 'input:noisin:MSJet:ss',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:ss',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:noisin:MSJet:dn: {
        'desc': 'Nozzle outer diameter',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:dn',
         'promoted_name': 'input:noisin:MSJet:dn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:dn',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:MSJet:aa: {
        'desc': 'Unknown variable',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:aa',
         'promoted_name': 'input:noisin:MSJet:aa',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:aa',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:nflt: {
        'desc': 'Unknown variable',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:nflt',
         'promoted_name': 'input:noisin:MSJet:nflt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:nflt',
         'typeVar': 'Int',
         'val': 1}
      input:noisin:MSJet:htr: {
        'desc': 'Unknown variable',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:htr',
         'promoted_name': 'input:noisin:MSJet:htr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:htr',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:MSJet:nst: {
        'desc': 'Unknown variable',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:MSJet:nst',
         'promoted_name': 'input:noisin:MSJet:nst',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:MSJet:nst',
         'typeVar': 'Int',
         'val': 1}
      input:noisin:Jet:inoz: {
        'aliases': ('Coaxial', 'Circular'),
         'desc': 'Type of nozzle',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:inoz',
         'promoted_name': 'input:noisin:Jet:inoz',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:inoz',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Jet:iplug: {
        'aliases': ('Plug', 'No plug'),
         'desc': 'Plug nozzle on primary',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:iplug',
         'promoted_name': 'input:noisin:Jet:iplug',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:iplug',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Jet:islot: {
        'aliases': ('Slot nozzle', 'No slot'),
         'desc': 'Slot nozzle on primary',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:islot',
         'promoted_name': 'input:noisin:Jet:islot',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:islot',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Jet:iaz: {
        'aliases': ('Yes', 'No'),
         'desc': 'Azimuthal correction for nozzle geometry',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:iaz',
         'promoted_name': 'input:noisin:Jet:iaz',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:iaz',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Jet:dbaz: {
        'desc': 'Noise reduction due to nozzle geometry at phi = 75 '
                 'degrees, used only if IAZ = 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:dbaz',
         'promoted_name': 'input:noisin:Jet:dbaz',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:dbaz',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Jet:ejdop: {
        'desc': 'Exponent on source motion (Doppler) amplification on shock '
                 'noise only.  Used for IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:ejdop',
         'promoted_name': 'input:noisin:Jet:ejdop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:ejdop',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Jet:zmdc: {
        'desc': 'Core (primary) jet design Mach number.  Used for '
                 'application of non-ideally expanded shock noise.  Used for '
                 'IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:zmdc',
         'promoted_name': 'input:noisin:Jet:zmdc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:zmdc',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Jet:gammac: {
        'desc': 'Core (primary) jet exhaust gamma Used for IJET=1,2,6 '
                 '(Default = 1.4)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:gammac',
         'promoted_name': 'input:noisin:Jet:gammac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:gammac',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Jet:gasrc: {
        'desc': 'Core exhaust gas constant, Used for IJET=1,2 (Default = '
                 '53.35)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:gasrc',
         'promoted_name': 'input:noisin:Jet:gasrc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:gasrc',
         'typeVar': 'Float',
         'units': '(ft*lb)/(lb*degR)',
         'val': -1.0}
      input:noisin:Jet:annht: {
        'desc': 'Core nozzle annulus height.  Used for IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:annht',
         'promoted_name': 'input:noisin:Jet:annht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:annht',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Jet:zmdf: {
        'desc': 'Fan (secondary) jet design Mach number.  Used for '
                 'application of non-ideally expanded shock noise.  Used for '
                 'IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:zmdf',
         'promoted_name': 'input:noisin:Jet:zmdf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:zmdf',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Jet:gammap: {
        'desc': 'Fan (secondary) jet exhaust gamma Used for IJET=1,2 '
                 '(Default = GAMMAF)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:gammap',
         'promoted_name': 'input:noisin:Jet:gammap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:gammap',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Jet:gasrf: {
        'desc': 'Fan exhaust gas constant.  Used for IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:gasrf',
         'promoted_name': 'input:noisin:Jet:gasrf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:gasrf',
         'typeVar': 'Float',
         'units': '(ft*lb)/(lb*degR)',
         'val': 53.35}
      input:noisin:Jet:annhtf: {
        'desc': 'Fan nozzle annulus height.  Used for IJET=1,2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:annhtf',
         'promoted_name': 'input:noisin:Jet:annhtf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:annhtf',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Jet:dhc: {
        'desc': 'Core nozzle hydraulic diameter.  Used for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:dhc',
         'promoted_name': 'input:noisin:Jet:dhc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:dhc',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:noisin:Jet:dhf: {
        'desc': 'Fan nozzle hydraulic diameter.  Used for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:dhf',
         'promoted_name': 'input:noisin:Jet:dhf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:dhf',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Jet:zl2: {
        'desc': 'Axial distance from the outer exit plane to the exit plane '
                 'of the inner nozzle.  Used for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:zl2',
         'promoted_name': 'input:noisin:Jet:zl2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Jet:zl2',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:noisin:Jet:ifwd: {
        'aliases': ('Yes', 'No'),
         'desc': 'Forward velocity effects on source.  Used for '
                 'IJET=1,2,3,4,5',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:ifwd',
         'promoted_name': 'input:noisin:Jet:ifwd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:ifwd',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Jet:ishock: {
        'aliases': ('Shock noise', 'No shock'),
         'desc': 'Calculate shock noise.  Used for IJET=1,2,3,4,5',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:ishock',
         'promoted_name': 'input:noisin:Jet:ishock',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:ishock',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Jet:zjsupp: {
        'desc': 'Jet suppression spectrum.  Used for IJET=1,2,3,4,5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Jet:zjsupp',
         'promoted_name': 'input:noisin:Jet:zjsupp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Jet:zjsupp',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Ground_Effects:itone: {
        'aliases': ('Yes', 'No'),
         'desc': '1/3-octave bands exceeding adjacent bands by 3 dB or more '
                 'are approximated as tones',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Ground_Effects:itone',
         'promoted_name': 'input:noisin:Ground_Effects:itone',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Ground_Effects:itone',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Ground_Effects:dk: {
        'desc': 'Heights of multiple sources from source center',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Ground_Effects:dk',
         'promoted_name': 'input:noisin:Ground_Effects:dk',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Ground_Effects:dk',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Flap_Noise:ilnoz: {
        'aliases': (        'Coaxial, mixed flow',
                             'Coaxial, separate flow',
                             'Circular'),
         'desc': 'Nozzle type',
         'optionsVal': (2, 1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:ilnoz',
         'promoted_name': 'input:noisin:Flap_Noise:ilnoz',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:ilnoz',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Flap_Noise:insens: {
        'aliases': ('Yes', 'No'),
         'desc': 'Configuration with noise levels insensitive to flap angle',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:insens',
         'promoted_name': 'input:noisin:Flap_Noise:insens',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:insens',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Flap_Noise:ac1: {
        'desc': 'Core (primary) nozzle area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:ac1',
         'promoted_name': 'input:noisin:Flap_Noise:ac1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:ac1',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:noisin:Flap_Noise:af1: {
        'desc': 'Fan (secondary) nozzle area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:af1',
         'promoted_name': 'input:noisin:Flap_Noise:af1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:af1',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:noisin:Flap_Noise:bpr: {
        'desc': 'Bypass ratio, for mixed flow coaxial nozzle',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:bpr',
         'promoted_name': 'input:noisin:Flap_Noise:bpr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:bpr',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Flap_Noise:wingd: {
        'desc': 'Ratio of wing chord to total nozzle diameter, used for '
                 'large BPR designs when WINGD < 3',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:wingd',
         'promoted_name': 'input:noisin:Flap_Noise:wingd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:wingd',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Flap_Noise:flsupp: {
        'desc': 'Flap noise suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:flsupp',
         'promoted_name': 'input:noisin:Flap_Noise:flsupp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:flsupp',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Flap_Noise:eldop: {
        'desc': 'Exponent on source motion (Doppler) amplification on flap '
                 'noise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Flap_Noise:eldop',
         'promoted_name': 'input:noisin:Flap_Noise:eldop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Flap_Noise:eldop',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Fan:igv: {
        'aliases': ('Inlet guide vane', 'No IGV'),
         'desc': 'Inlet guide vane option',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:igv',
         'promoted_name': 'input:noisin:Fan:igv',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:igv',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Fan:ifd: {
        'aliases': ('Inlet flow distortion', 'No distortion'),
         'desc': 'Inlet flow distortion option during ground run',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:ifd',
         'promoted_name': 'input:noisin:Fan:ifd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:ifd',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Fan:iexh: {
        'aliases': ('Inlet only', 'Exhaust only', 'Both inlet & exhaust'),
         'desc': 'Fan inlet, exhaust noise options',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:iexh',
         'promoted_name': 'input:noisin:Fan:iexh',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:iexh',
         'typeVar': 'Enum',
         'val': 2}
      input:noisin:Fan:nfh: {
        'desc': 'Number of harmonics to be considered in blade-passing tone',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nfh',
         'promoted_name': 'input:noisin:Fan:nfh',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nfh',
         'typeVar': 'Int',
         'val': 10}
      input:noisin:Fan:nstg: {
        'desc': 'Number of fan stages',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nstg',
         'promoted_name': 'input:noisin:Fan:nstg',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nstg',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Fan:suppin: {
        'desc': 'Fan inlet suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:suppin',
         'promoted_name': 'input:noisin:Fan:suppin',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:suppin',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Fan:suppex: {
        'desc': 'Fan exhaust suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:suppex',
         'promoted_name': 'input:noisin:Fan:suppex',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:suppex',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Fan:methtip: {
        'aliases': ('ANOPP method', 'Clark', 'Use ATIPM'),
         'desc': 'Method for calculation of relative tip Mach number',
         'optionsVal': (1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:methtip',
         'promoted_name': 'input:noisin:Fan:methtip',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:methtip',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Fan:icomb: {
        'aliases': ('Combination tones', 'No combination tones'),
         'desc': 'Option to include combination tones if relative tip Mach '
                 'number is supersonic',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:icomb',
         'promoted_name': 'input:noisin:Fan:icomb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:icomb',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Fan:decmpt: {
        'desc': 'Decrement to apply to combination tones',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:decmpt',
         'promoted_name': 'input:noisin:Fan:decmpt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:decmpt',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Fan:gammaf: {
        'desc': 'Gamma of fan air',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:gammaf',
         'promoted_name': 'input:noisin:Fan:gammaf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:gammaf',
         'typeVar': 'Float',
         'val': 1.4}
      input:noisin:Fan:nbl: {
        'desc': 'Number of fan blades',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nbl',
         'promoted_name': 'input:noisin:Fan:nbl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nbl',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Fan:nvan: {
        'desc': 'Number of stator vanes',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nvan',
         'promoted_name': 'input:noisin:Fan:nvan',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nvan',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Fan:fandia: {
        'desc': 'Fan diameter',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:fandia',
         'promoted_name': 'input:noisin:Fan:fandia',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:fandia',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:noisin:Fan:fanhub: {
        'desc': 'Fan hub diameter',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:fanhub',
         'promoted_name': 'input:noisin:Fan:fanhub',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:fanhub',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:noisin:Fan:tipmd: {
        'desc': 'Design relative tip Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:tipmd',
         'promoted_name': 'input:noisin:Fan:tipmd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:tipmd',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Fan:rss: {
        'desc': 'Rotor-stator spacing in percent',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:rss',
         'promoted_name': 'input:noisin:Fan:rss',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:rss',
         'typeVar': 'Float',
         'val': 100.0}
      input:noisin:Fan:efdop: {
        'desc': 'Exponent on source motion (Doppler) amplification on fan '
                 'noise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:efdop',
         'promoted_name': 'input:noisin:Fan:efdop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:efdop',
         'typeVar': 'Float',
         'val': 4.0}
      input:noisin:Fan:faneff: {
        'desc': 'Constant first stage fan efficiency, < 1.0.  Overridden by '
                 'AFANEF',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:faneff',
         'promoted_name': 'input:noisin:Fan:faneff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:faneff',
         'typeVar': 'Float',
         'val': 0.88}
      input:noisin:Fan:nbl2: {
        'desc': 'Number of fan blades for second stage (Default = NBL)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nbl2',
         'promoted_name': 'input:noisin:Fan:nbl2',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nbl2',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Fan:nvan2: {
        'desc': 'Number of stator vanes for second stage (Default = NVAN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:nvan2',
         'promoted_name': 'input:noisin:Fan:nvan2',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Fan:nvan2',
         'typeVar': 'Int',
         'val': -1}
      input:noisin:Fan:fand2: {
        'desc': 'Fan diameter for second stage (Default = FANDIA)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:fand2',
         'promoted_name': 'input:noisin:Fan:fand2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:fand2',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:noisin:Fan:tipmd2: {
        'desc': 'Design relative tip Mach number for second stage (Default '
                 '= TIPMD)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:tipmd2',
         'promoted_name': 'input:noisin:Fan:tipmd2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:tipmd2',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Fan:rss2: {
        'desc': 'Rotor-stator spacing in percent for second stage (Default '
                 '= RSS)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:rss2',
         'promoted_name': 'input:noisin:Fan:rss2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:rss2',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Fan:efdop2: {
        'desc': 'Exponent on source motion (Doppler) amplification on '
                 'second stage fan noise (Default = EFDOP)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:efdop2',
         'promoted_name': 'input:noisin:Fan:efdop2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:efdop2',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Fan:fanef2: {
        'desc': 'Constant second stage fan efficiency, < 1.0.  Overridden '
                 'by AFANF2',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:fanef2',
         'promoted_name': 'input:noisin:Fan:fanef2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:fanef2',
         'typeVar': 'Float',
         'val': 0.88}
      input:noisin:Fan:trat: {
        'desc': 'Ratio of second stage temperature rise (DELT2) to that of '
                 'first stage.  Either TRAT or PRAT is used to calculate '
                 'DELT2.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:trat',
         'promoted_name': 'input:noisin:Fan:trat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:trat',
         'typeVar': 'Float',
         'val': -1.0}
      input:noisin:Fan:prat: {
        'desc': 'Ratio of second stage fan pressure ratio to that of first '
                 'stage',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Fan:prat',
         'promoted_name': 'input:noisin:Fan:prat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Fan:prat',
         'typeVar': 'Float',
         'val': 1.0}
      input:noisin:Engine_Parameters:aepp: {
        'desc': 'Throttle settings as a fraction of net thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:aepp',
         'promoted_name': 'input:noisin:Engine_Parameters:aepp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:aepp',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:avc: {
        'desc': 'Core/primary exhaust jet velocity (ideally expanded '
                 'velocity; exclude friction and expansion alterations).  '
                 'Used for IJET=1,2,3,4,6',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:avc',
         'promoted_name': 'input:noisin:Engine_Parameters:avc',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:avc',
         'typeVar': 'Array,float',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:avf: {
        'desc': 'Fan/secondary exhaust jet velocity (ideally expanded '
                 'velocity; exclude friction and expansion alterations).  '
                 'Used for IJET=1,2,3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:avf',
         'promoted_name': 'input:noisin:Engine_Parameters:avf',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:avf',
         'typeVar': 'Array,float',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:atc: {
        'desc': 'Core/primary jet exhaust total temperature.  Used for '
                 'IJET=1,2,3,4,6',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:atc',
         'promoted_name': 'input:noisin:Engine_Parameters:atc',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:atc',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:atf: {
        'desc': 'Fan/secondary jet exhaust total temperature.  Used for '
                 'IJET=1,2,3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:atf',
         'promoted_name': 'input:noisin:Engine_Parameters:atf',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:atf',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:aac: {
        'desc': 'Core jet nozzle exhaust area.  For IJET=1,2,6, AAC '
                 'represents exit area; for IJET=3,4, AAC represents throat '
                 'area.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:aac',
         'promoted_name': 'input:noisin:Engine_Parameters:aac',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:aac',
         'typeVar': 'Array,float',
         'units': 'ft*ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:aaf: {
        'desc': 'Fan jet nozzle exhaust area.  For IJET=1 or IJET=2, AAF '
                 'represents exit area; for IJET=3,4, AAF represents throat '
                 'area.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:aaf',
         'promoted_name': 'input:noisin:Engine_Parameters:aaf',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:aaf',
         'typeVar': 'Array,float',
         'units': 'ft*ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:adj: {
        'desc': 'Core outer diameter; at the equivalent throat if the '
                 'nozzle is C-D.   Used only for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:adj',
         'promoted_name': 'input:noisin:Engine_Parameters:adj',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:adj',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:adj2: {
        'desc': 'Fan outer diameter; at the equivalent throat if the nozzle '
                 'is C-D.  Used only for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:adj2',
         'promoted_name': 'input:noisin:Engine_Parameters:adj2',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:adj2',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:ahj: {
        'desc': 'Core annulus height; at the equivalent throat if the '
                 'nozzle is C-D.  Used only for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:ahj',
         'promoted_name': 'input:noisin:Engine_Parameters:ahj',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:ahj',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:ahj2: {
        'desc': 'Fan annulus height; at the equivalent throat if the nozzle '
                 'is C-D.  Used only for IJET=3,4',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:ahj2',
         'promoted_name': 'input:noisin:Engine_Parameters:ahj2',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:ahj2',
         'typeVar': 'Array,float',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:afuel: {
        'desc': 'Fuel flow.  Used if ICORE, ITURB=1; and IJET=1,2 and only '
                 'if calculating GAMMAC and GASRC.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:afuel',
         'promoted_name': 'input:noisin:Engine_Parameters:afuel',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:afuel',
         'typeVar': 'Array,float',
         'units': 'lb/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:atipm: {
        'desc': 'Fan first-stage relative tip Mach number.  These are '
                 'approximated if not input.  Used if IFAN=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:atipm',
         'promoted_name': 'input:noisin:Engine_Parameters:atipm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:atipm',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:atipm2: {
        'desc': 'Fan second-stage relative tip Mach number.  These are '
                 'approximated if not input.  Used if IFAN=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:atipm2',
         'promoted_name': 'input:noisin:Engine_Parameters:atipm2',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:atipm2',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:awafan: {
        'desc': 'Total engine airflow.  Used if IFAN=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:awafan',
         'promoted_name': 'input:noisin:Engine_Parameters:awafan',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:awafan',
         'typeVar': 'Array,float',
         'units': 'lb/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:adelt: {
        'desc': 'Fan temperature rise.  Used if IFAN=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:adelt',
         'promoted_name': 'input:noisin:Engine_Parameters:adelt',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:adelt',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:afpr: {
        'desc': 'Fan pressure ratio.  This is not needed if ADELT is '
                 'input.  Otherwise, values for ADELT will be calculated '
                 'using AFANEF and AFANF2 values.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:afpr',
         'promoted_name': 'input:noisin:Engine_Parameters:afpr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:afpr',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:afanef: {
        'desc': 'Fan first-stage efficiency.  These are required if AFPR is '
                 'supplied rather than ADELT.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:afanef',
         'promoted_name': 'input:noisin:Engine_Parameters:afanef',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:afanef',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:afanf2: {
        'desc': 'Fan second-stage efficiency.  These are required if AFPR '
                 'is supplied rather than ADELT.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:afanf2',
         'promoted_name': 'input:noisin:Engine_Parameters:afanf2',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:afanf2',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:arpm: {
        'desc': 'Fan or turbine speed.  Used if IFAN, ITURB=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:arpm',
         'promoted_name': 'input:noisin:Engine_Parameters:arpm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:arpm',
         'typeVar': 'Array,float',
         'units': 'rpm',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:awcore: {
        'desc': 'Burner and turbine airflow.  Used if ICORE or ITURB=1 and '
                 'IJET=1,2 and only if calculating GAMMAC and GASRC.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:awcore',
         'promoted_name': 'input:noisin:Engine_Parameters:awcore',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:awcore',
         'typeVar': 'Array,float',
         'units': 'lb/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:ap3: {
        'desc': 'Burner inlet pressure.  Used if ICORE=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:ap3',
         'promoted_name': 'input:noisin:Engine_Parameters:ap3',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:ap3',
         'typeVar': 'Array,float',
         'units': 'psf',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:at3: {
        'desc': 'Burner inlet temperature.  Used if ICORE=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:at3',
         'promoted_name': 'input:noisin:Engine_Parameters:at3',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:at3',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:at4: {
        'desc': 'Burner exit static temperature.  These are approximated '
                 'from the fuel/air ratio if not input.  Used if ICORE=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:at4',
         'promoted_name': 'input:noisin:Engine_Parameters:at4',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:at4',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:aturts: {
        'desc': 'Turbine last stage rotor relative tip speed.  These are '
                 'approximated if not input.  Used if ITURB=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:aturts',
         'promoted_name': 'input:noisin:Engine_Parameters:aturts',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:aturts',
         'typeVar': 'Array,float',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:atctur: {
        'desc': 'Turbine exit temperature.  These are assumed the same as '
                 'ATC if not supplied.  Used if ITURB=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:atctur',
         'promoted_name': 'input:noisin:Engine_Parameters:atctur',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:atctur',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:aepwr: {
        'desc': 'Horsepower supplied to propeller.  Used if IPROP=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:aepwr',
         'promoted_name': 'input:noisin:Engine_Parameters:aepwr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:aepwr',
         'typeVar': 'Array,float',
         'units': 'hp',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:athrst: {
        'desc': 'Propeller thrust.  Used if IPROP=1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:athrst',
         'promoted_name': 'input:noisin:Engine_Parameters:athrst',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:athrst',
         'typeVar': 'Array,float',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsp9: {
        'desc': 'Nozzle pressure ratio: entance total to ambient static.  '
                 'Used for M*S code jet predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsp9',
         'promoted_name': 'input:noisin:Engine_Parameters:amsp9',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsp9',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amstt3: {
        'desc': 'Nozzle exit total temperature.  Used for M*S code jet '
                 'predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amstt3',
         'promoted_name': 'input:noisin:Engine_Parameters:amstt3',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amstt3',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsa9: {
        'desc': 'Nozzle exit area.  Used for M*S code jet predictions, '
                 'IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsa9',
         'promoted_name': 'input:noisin:Engine_Parameters:amsa9',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsa9',
         'typeVar': 'Array,float',
         'units': 'ft*ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsa7: {
        'desc': 'Nozzle ejector chute area ratio.  Used for M*S code jet '
                 'predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsa7',
         'promoted_name': 'input:noisin:Engine_Parameters:amsa7',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsa7',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsaa8: {
        'desc': 'Inner nozzle flow area.  Used for M*S code jet '
                 'predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsaa8',
         'promoted_name': 'input:noisin:Engine_Parameters:amsaa8',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsaa8',
         'typeVar': 'Array,float',
         'units': 'ft*ft',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amstt4: {
        'desc': 'Inner nozzle exit total temperature.  Used for M*S code '
                 'jet predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amstt4',
         'promoted_name': 'input:noisin:Engine_Parameters:amstt4',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amstt4',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsp4: {
        'desc': 'Inner nozzle pressure ratio: entrance total to ambient '
                 'static.  Used for M*S code jet predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsp4',
         'promoted_name': 'input:noisin:Engine_Parameters:amsp4',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsp4',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amstt5: {
        'desc': 'Outer nozzle exit total temperature.  Used for M*S code '
                 'jet predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amstt5',
         'promoted_name': 'input:noisin:Engine_Parameters:amstt5',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amstt5',
         'typeVar': 'Array,float',
         'units': 'degR',
         'val': array([], dtype=float64)}
      input:noisin:Engine_Parameters:amsp5: {
        'desc': 'Outer nozzle pressure ratio: entrance total to ambient '
                 'static.  Used for M*S code jet predictions, IJET=5',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Engine_Parameters:amsp5',
         'promoted_name': 'input:noisin:Engine_Parameters:amsp5',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Engine_Parameters:amsp5',
         'typeVar': 'Array,float',
         'val': array([], dtype=float64)}
      input:noisin:Core:csupp: {
        'desc': 'Core suppression spectrum',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Core:csupp',
         'promoted_name': 'input:noisin:Core:csupp',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Core:csupp',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Core:gamma: {
        'desc': 'Specific heat ratio;  required if using AP3 rather than AT3',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Core:gamma',
         'promoted_name': 'input:noisin:Core:gamma',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Core:gamma',
         'typeVar': 'Float',
         'val': 1.4}
      input:noisin:Core:imod: {
        'aliases': ('Yes', 'No'),
         'desc': 'Use modified core level prediction',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Core:imod',
         'promoted_name': 'input:noisin:Core:imod',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Core:imod',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Core:dtemd: {
        'desc': 'Design turbine temperature drop',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Core:dtemd',
         'promoted_name': 'input:noisin:Core:dtemd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Core:dtemd',
         'typeVar': 'Float',
         'units': 'degR',
         'val': -1.0}
      input:noisin:Core:ecdop: {
        'desc': 'Exponent on source motion (Doppler) amplification on core '
                 'noise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Core:ecdop',
         'promoted_name': 'input:noisin:Core:ecdop',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Core:ecdop',
         'typeVar': 'Float',
         'val': 2.0}
      input:noisin:Basic:iepn: {
        'aliases': ('Stage III', 'Stage III - Delta', 'Find max. EPNL'),
         'desc': '= 0, Stage III\n'
                 '= 1, Stage III - Delta dB (see DEPNT, DEPNS and DEPNL)\n'
                 '=2, Find the X-coordinate where the maximum EPNL occurs.  '
                 'NOB, XO and YO must be input.  YO should be constant.  '
                 'IEPN=2 is usually used to get a sideline (YO) noise for GA '
                 'aircraft.',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:iepn',
         'promoted_name': 'input:noisin:Basic:iepn',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:iepn',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:depnt: {
        'desc': 'Increment below Stage III for takeoff (see IEPN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:depnt',
         'promoted_name': 'input:noisin:Basic:depnt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Basic:depnt',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Basic:depns: {
        'desc': 'Increment below Stage III for sideline (see IEPN).\n'
                 'If IEPN=2, DEPNS is the upper limit for sideline noise.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:depns',
         'promoted_name': 'input:noisin:Basic:depns',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Basic:depns',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Basic:depnl: {
        'desc': 'Increment below Stage III for landing (see IEPN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:depnl',
         'promoted_name': 'input:noisin:Basic:depnl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Basic:depnl',
         'typeVar': 'Float',
         'val': 0.0}
      input:noisin:Basic:itrade: {
        'aliases': ('Trade', 'No trade'),
         'desc': 'Option to trade 2 dB between sideline and flyover noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:itrade',
         'promoted_name': 'input:noisin:Basic:itrade',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:itrade',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:ijet: {
        'aliases': (        'None',
                             'Stone/Clark',
                             'Kresja',
                             'Stone ALLJET',
                             'Stone JET181',
                             'GE M*S',
                             'SAE A-21 (ANOPP)'),
         'desc': 'Jet noise option',
         'optionsVal': (0, 1, 2, 3, 4, 5, 6),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:ijet',
         'promoted_name': 'input:noisin:Basic:ijet',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:ijet',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:ifan: {
        'aliases': ('None', 'Heidmann', 'Gliebe'),
         'desc': 'Fan noise option',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:ifan',
         'promoted_name': 'input:noisin:Basic:ifan',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:ifan',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:icore: {
        'aliases': ('None', 'Core noise'),
         'desc': 'Core noise option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:icore',
         'promoted_name': 'input:noisin:Basic:icore',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:icore',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:iturb: {
        'aliases': ('None', 'Turbine noise'),
         'desc': 'Turbine noise option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:iturb',
         'promoted_name': 'input:noisin:Basic:iturb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:iturb',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:iprop: {
        'aliases': ('None', 'SAE', 'Gutin'),
         'desc': 'Propeller noise option',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:iprop',
         'promoted_name': 'input:noisin:Basic:iprop',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:iprop',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:iflap: {
        'aliases': ('None', 'Flap & jet/flap noise'),
         'desc': 'Flap noise/Jet-flap impingement noise option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:iflap',
         'promoted_name': 'input:noisin:Basic:iflap',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:iflap',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:iairf: {
        'aliases': ('None', 'Airframe noise'),
         'desc': 'Airframe noise option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:iairf',
         'promoted_name': 'input:noisin:Basic:iairf',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:iairf',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Basic:igear: {
        'aliases': ('None', 'Approx. gear box noise'),
         'desc': 'Gear box noise option',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Basic:igear',
         'promoted_name': 'input:noisin:Basic:igear',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Basic:igear',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:ifl: {
        'aliases': ('Slotted flap noise', 'No slotted flap noise'),
         'desc': 'Include slotted flap noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:ifl',
         'promoted_name': 'input:noisin:Airframe:ifl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:ifl',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:nf: {
        'desc': 'Number of trailing edge flap slots for IFL = 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:nf',
         'promoted_name': 'input:noisin:Airframe:nf',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:nf',
         'typeVar': 'Int',
         'val': 2}
      input:noisin:Airframe:pfchd: {
        'desc': 'Average chord for slotted flap, ft or fraction of wing '
                 'chord.  Used only if IFL = 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:pfchd',
         'promoted_name': 'input:noisin:Airframe:pfchd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:pfchd',
         'typeVar': 'Float',
         'val': 0.25}
      input:noisin:Airframe:itypw: {
        'aliases': ('Conventional', 'Delta'),
         'desc': 'Type of wing',
         'optionsVal': (1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:itypw',
         'promoted_name': 'input:noisin:Airframe:itypw',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:itypw',
         'typeVar': 'Enum',
         'val': 1}
      input:noisin:Airframe:iclean: {
        'aliases': ('Aerodynamically clean', 'Conventional'),
         'desc': 'Aerodynamically clean aircraft',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:iclean',
         'promoted_name': 'input:noisin:Airframe:iclean',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:iclean',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:iwing: {
        'aliases': ('Wing, horiz., vert. tail noise', 'No wing, tail noise'),
         'desc': 'Wing, horizontal and vertical tail noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:iwing',
         'promoted_name': 'input:noisin:Airframe:iwing',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:iwing',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:islat: {
        'aliases': ('Slatted l.e. noise', 'No slatted l.e. noise'),
         'desc': 'Slatted leading edge noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:islat',
         'promoted_name': 'input:noisin:Airframe:islat',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:islat',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:ilg: {
        'aliases': ('Landing gear noise', 'No landing gear noise'),
         'desc': 'Nose and main landing gear noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:ilg',
         'promoted_name': 'input:noisin:Airframe:ilg',
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:ilg',
         'typeVar': 'Enum',
         'val': 0}
      input:noisin:Airframe:ng: {
        'desc': 'NG(0):  Number of nose gear trucks\n'
                 'NG(1):  Number of main gear trucks',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:ng',
         'promoted_name': 'input:noisin:Airframe:ng',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:ng',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Airframe:nw: {
        'desc': 'NW(0):  Number of wheels per nose gear truck\n'
                 'NW(1):  Number of wheels per main gear truck',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:nw',
         'promoted_name': 'input:noisin:Airframe:nw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:nw',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:noisin:Airframe:dw: {
        'desc': 'DW(0):  Diameter of nose gear tires\n'
                 'DW(1):  Diameter of main gear tires',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:dw',
         'promoted_name': 'input:noisin:Airframe:dw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:dw',
         'typeVar': 'Array',
         'units': 'ft',
         'val': array([], dtype=float64)}
      input:noisin:Airframe:cg: {
        'desc': 'CG(0):  Ratio of nose strut length to DW(0)\n'
                 'CG(1):  Ratio of main strut length to DW(1)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:noisin:Airframe:cg',
         'promoted_name': 'input:noisin:Airframe:cg',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:noisin:Airframe:cg',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Program_Control:mprint: {
        'aliases': ('Short Summary', 'Normal'),
         'desc': 'Print control \n'
                 ' = 0, Print only 3-5 line summary for each analysis. '
                 'Usually used only for contour plots (IOPT = 4) \n'
                 ' = 1, Normal output for all analyses',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:mprint',
         'promoted_name': 'input:option:Program_Control:mprint',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:mprint',
         'typeVar': 'Enum',
         'val': 1}
      input:option:Program_Control:iopt: {
        'aliases': (        'Analysis',
                             'Parametric Variation',
                             'Optimization',
                             'Contour or Thumbprint plot'),
         'desc': 'Execution Type',
         'optionsVal': (1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:iopt',
         'promoted_name': 'input:option:Program_Control:iopt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:iopt',
         'typeVar': 'Enum',
         'val': 1}
      input:option:Program_Control:ianal: {
        'aliases': (        'Weights',
                             'Weights and Aerodynamics',
                             'Full Analysis',
                             'Propulsion'),
         'desc': 'Analysis Type',
         'optionsVal': (1, 2, 3, 4),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:ianal',
         'promoted_name': 'input:option:Program_Control:ianal',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:ianal',
         'typeVar': 'Enum',
         'val': 3}
      input:option:Program_Control:ineng: {
        'aliases': ('If necessary', 'Yes'),
         'desc': 'Force engine Data Read',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:ineng',
         'promoted_name': 'input:option:Program_Control:ineng',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:ineng',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Program_Control:itakof: {
        'aliases': ('No', 'Yes (Namelist &TOLIN required)'),
         'desc': 'Detailed takeoff',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:itakof',
         'promoted_name': 'input:option:Program_Control:itakof',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:itakof',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Program_Control:iland: {
        'aliases': ('No', 'Yes (Namelist &TOLIN required)'),
         'desc': 'Detailed landing',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:iland',
         'promoted_name': 'input:option:Program_Control:iland',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:iland',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Program_Control:nopro: {
        'aliases': ('No', 'Yes'),
         'desc': 'Generate takeoff and climb profiles (Namelists &TOLIN '
                 '&PROIN and &SEGIN required)',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:nopro',
         'promoted_name': 'input:option:Program_Control:nopro',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:nopro',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Program_Control:noise: {
        'aliases': (        'No',
                             'Yes (Namelist &COSTIN required)',
                             'Yes for final analysis only'),
         'desc': 'Calculate noise',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:noise',
         'promoted_name': 'input:option:Program_Control:noise',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:noise',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Program_Control:icost: {
        'aliases': ('No', 'Yes (Namelist &COSTIN required)'),
         'desc': 'Calculate costs',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:icost',
         'promoted_name': 'input:option:Program_Control:icost',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:icost',
         'typeVar': 'Enum',
         'val': 1}
      input:option:Program_Control:ifite: {
        'aliases': (        'Transports',
                             'Fighter/attack',
                             'General aviation',
                             'Blended wing body'),
         'desc': 'Weight equations',
         'optionsVal': (0, 1, 2, 3),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Program_Control:ifite',
         'promoted_name': 'input:option:Program_Control:ifite',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Program_Control:ifite',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:ixfl: {
        'aliases': ('No', 'Yes'),
         'desc': 'Generate mission summary plot files',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:ixfl',
         'promoted_name': 'input:option:Plot_Files:ixfl',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:ixfl',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:npfile: {
        'aliases': ('No', 'Yes', 'XFlops'),
         'desc': 'Output takeoff and climb profiles for use with ANOPP '
                 'preprocessor (andin)',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:npfile',
         'promoted_name': 'input:option:Plot_Files:npfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:npfile',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:ipolp: {
        'aliases': (        'None',
                             'Drag polars at existing Mach numbers',
                             'User specified Mach numbers'),
         'desc': 'Drag polar plot data',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:ipolp',
         'promoted_name': 'input:option:Plot_Files:ipolp',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:ipolp',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:polalt: {
        'desc': 'Altitude for drag polar plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:polalt',
         'promoted_name': 'input:option:Plot_Files:polalt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:polalt',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:option:Plot_Files:pmach: {
        'desc': 'Mach numbers for drag polar plot data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:pmach',
         'promoted_name': 'input:option:Plot_Files:pmach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:pmach',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Plot_Files:ipltth: {
        'aliases': ('None', 'Initial engine', 'Final scaled engine'),
         'desc': 'Generate engine plot data',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:ipltth',
         'promoted_name': 'input:option:Plot_Files:ipltth',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:ipltth',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:iplths: {
        'aliases': ('No', 'Yes'),
         'desc': 'Design history plot data',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:iplths',
         'promoted_name': 'input:option:Plot_Files:iplths',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:iplths',
         'typeVar': 'Enum',
         'val': 0}
      input:option:Plot_Files:cnfile: {
        'desc': 'Contour or thumbprint plot data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:cnfile',
         'promoted_name': 'input:option:Plot_Files:cnfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:cnfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:msfile: {
        'desc': 'Mission summary data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:msfile',
         'promoted_name': 'input:option:Plot_Files:msfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:msfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:crfile: {
        'desc': 'Cruise schedule summary data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:crfile',
         'promoted_name': 'input:option:Plot_Files:crfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:crfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:tofile: {
        'desc': 'Takeoff and landing aerodynamic and thrust data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:tofile',
         'promoted_name': 'input:option:Plot_Files:tofile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:tofile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:nofile: {
        'desc': 'Takeoff and climb profile data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:nofile',
         'promoted_name': 'input:option:Plot_Files:nofile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:nofile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:apfile: {
        'desc': 'Drag polar plot data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:apfile',
         'promoted_name': 'input:option:Plot_Files:apfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:apfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:thfile: {
        'desc': 'Engine plot data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:thfile',
         'promoted_name': 'input:option:Plot_Files:thfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:thfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:hsfile: {
        'desc': 'Design history plot filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:hsfile',
         'promoted_name': 'input:option:Plot_Files:hsfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:hsfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Plot_Files:psfile: {
        'desc': 'Excess power and load factor plot data filename',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Plot_Files:psfile',
         'promoted_name': 'input:option:Plot_Files:psfile',
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Plot_Files:psfile',
         'typeVar': 'Str',
         'val': ''}
      input:option:Excess_Power_Plot:xmax: {
        'desc': 'Maximum Mach number for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:xmax',
         'promoted_name': 'input:option:Excess_Power_Plot:xmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:xmax',
         'typeVar': 'Float',
         'val': 0.9}
      input:option:Excess_Power_Plot:xmin: {
        'desc': 'Minimum Mach number for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:xmin',
         'promoted_name': 'input:option:Excess_Power_Plot:xmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:xmin',
         'typeVar': 'Float',
         'val': 0.3}
      input:option:Excess_Power_Plot:xinc: {
        'desc': 'Mach number increment for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:xinc',
         'promoted_name': 'input:option:Excess_Power_Plot:xinc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:xinc',
         'typeVar': 'Float',
         'val': 0.2}
      input:option:Excess_Power_Plot:ymax: {
        'desc': 'Maximum altitude for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:ymax',
         'promoted_name': 'input:option:Excess_Power_Plot:ymax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:ymax',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 40000.0}
      input:option:Excess_Power_Plot:ymin: {
        'desc': 'Minimum altitude for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:ymin',
         'promoted_name': 'input:option:Excess_Power_Plot:ymin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:ymin',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:option:Excess_Power_Plot:yinc: {
        'desc': 'Altitude increment for plots',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:yinc',
         'promoted_name': 'input:option:Excess_Power_Plot:yinc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:yinc',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10000.0}
      input:option:Excess_Power_Plot:pltnz: {
        'desc': 'Nz at which Ps contours are plotted (or Nz)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:pltnz',
         'promoted_name': 'input:option:Excess_Power_Plot:pltnz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:pltnz',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:pltpc: {
        'desc': 'Engine power (fraction if =< 1; else setting)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:pltpc',
         'promoted_name': 'input:option:Excess_Power_Plot:pltpc',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:pltpc',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:ipstdg: {
        'desc': 'Store drag schedule (see Namelist &MISSIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:ipstdg',
         'promoted_name': 'input:option:Excess_Power_Plot:ipstdg',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:ipstdg',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:pltwt: {
        'desc': 'Fixed weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:pltwt',
         'promoted_name': 'input:option:Excess_Power_Plot:pltwt',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:pltwt',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:ipltsg: {
        'desc': 'Weight at start of mission segment IPLTSG is used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:ipltsg',
         'promoted_name': 'input:option:Excess_Power_Plot:ipltsg',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:ipltsg',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:pltfm: {
        'desc': 'Fraction of fuel burned',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:pltfm',
         'promoted_name': 'input:option:Excess_Power_Plot:pltfm',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:pltfm',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:option:Excess_Power_Plot:pltwta: {
        'desc': 'Delta weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:option:Excess_Power_Plot:pltwta',
         'promoted_name': 'input:option:Excess_Power_Plot:pltwta',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:option:Excess_Power_Plot:pltwta',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:proin:npol: {
        'desc': 'Number of drag polars to be printed out (Default = size of '
                 'dflap)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:npol',
         'promoted_name': 'input:proin:npol',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:npol',
         'typeVar': 'Int',
         'val': 0}
      input:proin:alpro: {
        'desc': 'Angles of attack for each drag polar',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:alpro',
         'promoted_name': 'input:proin:alpro',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:alpro',
         'typeVar': 'Array',
         'units': 'deg',
         'val': array([], dtype=float64)}
      input:proin:clpro: {
        'desc': 'Lift coefficients for each drag polar',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:clpro',
         'promoted_name': 'input:proin:clpro',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:clpro',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:proin:cdpro: {
        'desc': 'Drag coefficients for each drag polar',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:cdpro',
         'promoted_name': 'input:proin:cdpro',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:cdpro',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:proin:dflap: {
        'desc': 'Flap deflection corresponding to each drag polar.  Used '
                 'only for output',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:dflap',
         'promoted_name': 'input:proin:dflap',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:dflap',
         'typeVar': 'Array,float',
         'units': 'deg',
         'val': array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.])}
      input:proin:ntime: {
        'aliases': ('Print', 'No print'),
         'desc': 'Option for printing detailed takeoff and climb profiles '
                 'for noise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:ntime',
         'promoted_name': 'input:proin:ntime',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:ntime',
         'typeVar': 'Enum',
         'val': 0}
      input:proin:ipcmax: {
        'desc': 'Maximum engine power code (This variable could be used, '
                 'for example, to limit takeoff and climb to dry power '
                 'settings on an afterburning engine.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:ipcmax',
         'promoted_name': 'input:proin:ipcmax',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:ipcmax',
         'typeVar': 'Int',
         'val': 1}
      input:proin:keas: {
        'aliases': ('Knots equivalent airspeed (keas)', 'True airspeed'),
         'desc': 'Type of velocity given by VFIX in namelist &SEGIN',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:keas',
         'promoted_name': 'input:proin:keas',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:keas',
         'typeVar': 'Enum',
         'val': 0}
      input:proin:txf: {
        'desc': 'Fuel used in taxiing out to runway (Default is computed in '
                 'mission analysis)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:txf',
         'promoted_name': 'input:proin:txf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:proin:txf',
         'typeVar': 'Float',
         'units': 'lb',
         'val': -1.0}
      input:proin:alpmin: {
        'desc': 'Minimum angle of attack during climb segment',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:alpmin',
         'promoted_name': 'input:proin:alpmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:proin:alpmin',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:proin:gamlim: {
        'desc': 'Minimum flight path angle during fixed angle of attack '
                 'segments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:gamlim',
         'promoted_name': 'input:proin:gamlim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:proin:gamlim',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:proin:inm: {
        'aliases': ('Generate', 'Do not generate'),
         'desc': 'Option to generate data files necessary for transporting '
                 'FLOPS takeoff and climb profile data to the FAA Integrated '
                 'Noise Model (INM) program',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:inm',
         'promoted_name': 'input:proin:inm',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:inm',
         'typeVar': 'Enum',
         'val': 0}
      input:proin:iatr: {
        'aliases': ('ATR', 'No ATR'),
         'desc': 'Automatic thrust restoration indicator option (INM=1, has '
                 'no effect of takeoff and climb profile)',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:iatr',
         'promoted_name': 'input:proin:iatr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:iatr',
         'typeVar': 'Enum',
         'val': 0}
      input:proin:fzf: {
        'desc': 'Maneuver speed factor (INM=1)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:fzf',
         'promoted_name': 'input:proin:fzf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:proin:fzf',
         'typeVar': 'Float',
         'val': 1.25}
      input:proin:thclmb: {
        'desc': 'Climb throttle setting (INM=1)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:thclmb',
         'promoted_name': 'input:proin:thclmb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:proin:thclmb',
         'typeVar': 'Float',
         'val': -1.0}
      input:proin:flapid: {
        'desc': 'Six character label for each of the NPOL input drag '
                 'polars, for example, "gearup"',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:proin:flapid',
         'promoted_name': 'input:proin:flapid',
         'size': 0,
         'top_promoted_name': 'my_flops.input:proin:flapid',
         'typeVar': 'Array',
         'val': []}
      input:rfhin:tmach: {
        'desc': 'Mach numbers in increasing order',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:tmach',
         'promoted_name': 'input:rfhin:tmach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:tmach',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:cdmin: {
        'desc': 'Minimum drag for each Mach number.\n'
                 'The lift dependent drag coefficient for the Ith Mach '
                 'number is computed from:\n'
                 '\n'
                 'CD = CDMIN(I) + CK(I) * [CL - CLB(I)] ** 2\n'
                 '+ C1SW(I) * (SW/REFAS - REFBS) ** EXPS\n'
                 '+ C1TH(I) * (THRUST/REFAT - REFBT) ** EXPT\n'
                 '\n'
                 'where SW and THRUST are the current values for the wing '
                 'area and for the thrust per engine, and CL is the lift '
                 'coefficient.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:cdmin',
         'promoted_name': 'input:rfhin:cdmin',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:cdmin',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:ck: {
        'desc': 'Drag-due-to-lift factors for each Mach number',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:ck',
         'promoted_name': 'input:rfhin:ck',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:ck',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:clb: {
        'desc': 'Lift coefficients corresponding to each CDMIN',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:clb',
         'promoted_name': 'input:rfhin:clb',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:clb',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:c1sw: {
        'desc': 'Coefficient for wing area term for each Mach number.  May '
                 'be a drag coefficient or D/Q depending on the values of '
                 'REFAS, REFBS and EXPS.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:c1sw',
         'promoted_name': 'input:rfhin:c1sw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:c1sw',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:c1th: {
        'desc': 'Coefficient for thrust term for each Mach number.  May be '
                 'a drag coefficient or D/Q depending on the values of '
                 'REFAT, REFBT and EXPT.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:c1th',
         'promoted_name': 'input:rfhin:c1th',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rfhin:c1th',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:rfhin:refas: {
        'desc': 'Wing area reference value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:refas',
         'promoted_name': 'input:rfhin:refas',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:refas',
         'typeVar': 'Float',
         'val': 1.0}
      input:rfhin:refbs: {
        'desc': 'Wing area base value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:refbs',
         'promoted_name': 'input:rfhin:refbs',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:refbs',
         'typeVar': 'Float',
         'val': 0.0}
      input:rfhin:exps: {
        'desc': 'Wing area term exponent',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:exps',
         'promoted_name': 'input:rfhin:exps',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:exps',
         'typeVar': 'Float',
         'val': 1.0}
      input:rfhin:refat: {
        'desc': 'Thrust reference value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:refat',
         'promoted_name': 'input:rfhin:refat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:refat',
         'typeVar': 'Float',
         'val': 1.0}
      input:rfhin:refbt: {
        'desc': 'Thrust base value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:refbt',
         'promoted_name': 'input:rfhin:refbt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:refbt',
         'typeVar': 'Float',
         'val': 0.0}
      input:rfhin:expt: {
        'desc': 'Thrust term exponent',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:rfhin:expt',
         'promoted_name': 'input:rfhin:expt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rfhin:expt',
         'typeVar': 'Float',
         'val': 1.0}
      input:syntin:Variables:desrng: {
        'desc': 'Design range, n.mi. (or endurance, min.). See INDR in '
                 'Namelist &MISSIN (Overrides input in Namelist &CONFIN).',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:desrng',
         'promoted_name': 'input:syntin:Variables:desrng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:desrng',
         'typeVar': 'Float',
         'val': -1.0}
      input:syntin:Variables:vappr: {
        'desc': 'Maximum allowable landing approach velocity (Overrides '
                 'input in Namelist &AERIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:vappr',
         'promoted_name': 'input:syntin:Variables:vappr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:vappr',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': -1.0}
      input:syntin:Variables:flto: {
        'desc': 'Maximum allowable takeoff field length (Overrides input in '
                 'Namelist &AERIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:flto',
         'promoted_name': 'input:syntin:Variables:flto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:flto',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:syntin:Variables:flldg: {
        'desc': 'Maximum allowable landing field length (Overrides input in '
                 'Namelist &AERIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:flldg',
         'promoted_name': 'input:syntin:Variables:flldg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:flldg',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:syntin:Variables:exfcap: {
        'desc': 'Minimum allowable excess fuel capacity',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:exfcap',
         'promoted_name': 'input:syntin:Variables:exfcap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:exfcap',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:syntin:Variables:cdtmax: {
        'desc': 'Maximum allowable compressor discharge temperature '
                 '(Overrides input in Namelist &ENGINE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:cdtmax',
         'promoted_name': 'input:syntin:Variables:cdtmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:cdtmax',
         'typeVar': 'Float',
         'units': 'degR',
         'val': -1.0}
      input:syntin:Variables:cdpmax: {
        'desc': 'Maximum allowable compressor discharge pressure (Overrides '
                 'input in Namelist &ENGINE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:cdpmax',
         'promoted_name': 'input:syntin:Variables:cdpmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:cdpmax',
         'typeVar': 'Float',
         'units': 'psi',
         'val': -1.0}
      input:syntin:Variables:vjmax: {
        'desc': 'Maximum allowable jet velocity (Overrides input in '
                 'Namelist &ENGINE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:vjmax',
         'promoted_name': 'input:syntin:Variables:vjmax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:vjmax',
         'typeVar': 'Float',
         'units': 'ft/s',
         'val': -1.0}
      input:syntin:Variables:stmin: {
        'desc': 'Minimum allowable specific thrust (Overrides input in '
                 'Namelist &ENGINE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:stmin',
         'promoted_name': 'input:syntin:Variables:stmin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:stmin',
         'typeVar': 'Float',
         'units': 'lb/lb/s',
         'val': -1.0}
      input:syntin:Variables:armax: {
        'desc': 'Maximum allowable ratio of the bypass area to the core '
                 'area of a mixed flow turbofan (Overrides input in Namelist '
                 '&ENGINE',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:armax',
         'promoted_name': 'input:syntin:Variables:armax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:armax',
         'typeVar': 'Float',
         'val': -1.0}
      input:syntin:Variables:gnox: {
        'desc': 'Maximum allowable NOx emissions',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:gnox',
         'promoted_name': 'input:syntin:Variables:gnox',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:gnox',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:syntin:Variables:roclim: {
        'desc': 'Minimum allowable potential rate of climb during climb '
                 'segments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:roclim',
         'promoted_name': 'input:syntin:Variables:roclim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:roclim',
         'typeVar': 'Float',
         'units': 'ft/min',
         'val': 100.0}
      input:syntin:Variables:dhdtlm: {
        'desc': 'Minimum allowable actual rate of climb during climb '
                 'segments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:dhdtlm',
         'promoted_name': 'input:syntin:Variables:dhdtlm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:dhdtlm',
         'typeVar': 'Float',
         'units': 'ft/min',
         'val': 100.0}
      input:syntin:Variables:tmglim: {
        'desc': 'Minimum allowable thrust margin, (Thrust-Drag)/Drag, '
                 'during climb segments',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:tmglim',
         'promoted_name': 'input:syntin:Variables:tmglim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Variables:tmglim',
         'typeVar': 'Float',
         'val': 0.1}
      input:syntin:Variables:ig: {
        'desc': '= 1, Ith behavioral constraint is used in optimization\n'
                 '= 0, Otherwise',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:ig',
         'promoted_name': 'input:syntin:Variables:ig',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Variables:ig',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:syntin:Variables:ibfgs: {
        'aliases': (        'Davidon-Fletcher-Powell',
                             'Broyden-Fletcher-Goldfarb-Shano',
                             'Conjugate Gradient (Polak-Ribiere)',
                             'Steepest Descent',
                             'Univariate Search',
                             'Kreisselmeier-Steinhauser with DFP'),
         'desc': 'Search algorithm for optimization',
         'optionsVal': (0, 1, 2, 3, 4, 5),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:ibfgs',
         'promoted_name': 'input:syntin:Variables:ibfgs',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Variables:ibfgs',
         'typeVar': 'Enum',
         'val': 1}
      input:syntin:Variables:itfine: {
        'aliases': ('Yes', 'No'),
         'desc': 'Option to set IRW = 1 for final analysis',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Variables:itfine',
         'promoted_name': 'input:syntin:Variables:itfine',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Variables:itfine',
         'typeVar': 'Enum',
         'val': 0}
      input:syntin:Optimization_Control:ndd: {
        'desc': 'Number of drawdowns (Defaults to analysis only - no '
                 'optimization is performed.  Suggested value = 3 or 4)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:ndd',
         'promoted_name': 'input:syntin:Optimization_Control:ndd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:ndd',
         'typeVar': 'Int',
         'val': 0}
      input:syntin:Optimization_Control:rk: {
        'desc': 'Initial value of RK (Default internally computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:rk',
         'promoted_name': 'input:syntin:Optimization_Control:rk',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:rk',
         'typeVar': 'Float',
         'val': 0.0}
      input:syntin:Optimization_Control:fdd: {
        'desc': 'RK multiplier for successive drawdowns',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:fdd',
         'promoted_name': 'input:syntin:Optimization_Control:fdd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:fdd',
         'typeVar': 'Float',
         'val': 0.2}
      input:syntin:Optimization_Control:nlin: {
        'desc': 'Maximum number of gradients per drawdown (Default = number '
                 'of active design variables times 2)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:nlin',
         'promoted_name': 'input:syntin:Optimization_Control:nlin',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:nlin',
         'typeVar': 'Int',
         'val': -1}
      input:syntin:Optimization_Control:nstep: {
        'desc': 'Maximum number of steps per one-dimensional minimization '
                 '(Default = 20)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:nstep',
         'promoted_name': 'input:syntin:Optimization_Control:nstep',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:nstep',
         'typeVar': 'Int',
         'val': 20}
      input:syntin:Optimization_Control:ef: {
        'desc': 'Limits one-dimensional minimization step size to EF times '
                 'previous step',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:ef',
         'promoted_name': 'input:syntin:Optimization_Control:ef',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:ef',
         'typeVar': 'Float',
         'val': 3.0}
      input:syntin:Optimization_Control:eps: {
        'desc': 'Fraction of initial design variable value used as a finite '
                 'difference delta',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:eps',
         'promoted_name': 'input:syntin:Optimization_Control:eps',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:eps',
         'typeVar': 'Float',
         'val': 0.001}
      input:syntin:Optimization_Control:amult: {
        'desc': 'The initial step in a one-dimensional search is controlled '
                 'by the design variable value times EPS times AMULT',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:amult',
         'promoted_name': 'input:syntin:Optimization_Control:amult',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:amult',
         'typeVar': 'Float',
         'val': 10.0}
      input:syntin:Optimization_Control:dep: {
        'desc': 'One-dimensional search convergence criterion on step size '
                 'as a fraction of move distance',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:dep',
         'promoted_name': 'input:syntin:Optimization_Control:dep',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:dep',
         'typeVar': 'Float',
         'val': 0.001}
      input:syntin:Optimization_Control:accux: {
        'desc': 'One-dimensional search convergence criterion on step size '
                 'as a fraction of initial design variable value',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:accux',
         'promoted_name': 'input:syntin:Optimization_Control:accux',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:accux',
         'typeVar': 'Float',
         'val': 0.0003}
      input:syntin:Optimization_Control:glm: {
        'desc': 'Value of G at which constraint switches to quadratic '
                 'extended form, a value of .002 is recommended',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:glm',
         'promoted_name': 'input:syntin:Optimization_Control:glm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:glm',
         'typeVar': 'Float',
         'val': 0.0}
      input:syntin:Optimization_Control:gfact: {
        'desc': 'Scaling factor for each behavioral constraint',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:gfact',
         'promoted_name': 'input:syntin:Optimization_Control:gfact',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:gfact',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:syntin:Optimization_Control:autscl: {
        'desc': 'Design variable scale factor exponent.  Scale factors for '
                 'design variables default to VALUE ** AUTSCL',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:autscl',
         'promoted_name': 'input:syntin:Optimization_Control:autscl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:autscl',
         'typeVar': 'Float',
         'val': 1.0}
      input:syntin:Optimization_Control:icent: {
        'aliases': ('Forward', 'Central'),
         'desc': 'Type of differencing to be used in gradient calculations',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:icent',
         'promoted_name': 'input:syntin:Optimization_Control:icent',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:icent',
         'typeVar': 'Enum',
         'val': 0}
      input:syntin:Optimization_Control:rhomin: {
        'desc': 'Starting value for RHO, a scalar multiplying factor used '
                 'in the KS function.  (Default is computed internally)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:rhomin',
         'promoted_name': 'input:syntin:Optimization_Control:rhomin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:rhomin',
         'typeVar': 'Float',
         'val': 0.0}
      input:syntin:Optimization_Control:rhomax: {
        'desc': 'Maximum value for RHO',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:rhomax',
         'promoted_name': 'input:syntin:Optimization_Control:rhomax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:rhomax',
         'typeVar': 'Float',
         'val': 300.0}
      input:syntin:Optimization_Control:rhodel: {
        'desc': 'RHO increment (Default is computed internally)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:rhodel',
         'promoted_name': 'input:syntin:Optimization_Control:rhodel',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:rhodel',
         'typeVar': 'Float',
         'val': 0.0}
      input:syntin:Optimization_Control:itmax: {
        'desc': 'Maximum number of iterations',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:itmax',
         'promoted_name': 'input:syntin:Optimization_Control:itmax',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:itmax',
         'typeVar': 'Int',
         'val': 30}
      input:syntin:Optimization_Control:jprnt: {
        'desc': 'KS module print control\n'
                 '= 0, No output from the KS module\n'
                 '= 999, Maximum output',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:jprnt',
         'promoted_name': 'input:syntin:Optimization_Control:jprnt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:jprnt',
         'typeVar': 'Int',
         'val': 2}
      input:syntin:Optimization_Control:rdfun: {
        'desc': 'If the relative change in the KS function is less than '
                 'RDFUN for three consecutive iterations, optimization is '
                 'terminated.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:rdfun',
         'promoted_name': 'input:syntin:Optimization_Control:rdfun',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:rdfun',
         'typeVar': 'Float',
         'val': 0.01}
      input:syntin:Optimization_Control:adfun: {
        'desc': 'If the absolute change in the KS function is less than '
                 'ADFUN for three consecutive iterations, optimization is '
                 'terminated.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:syntin:Optimization_Control:adfun',
         'promoted_name': 'input:syntin:Optimization_Control:adfun',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:syntin:Optimization_Control:adfun',
         'typeVar': 'Float',
         'val': 0.001}
      input:tolin:Thrust_Reverser:inthrv: {
        'desc': '= -1, Use takeoff thrust\n'
                 '=  0, Input thrust values will be used\n'
                 '=  1, Input values will be scaled\n'
                 '>  1, Scaled engine deck for the (INTHRV-1)th power '
                 'setting will be used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:inthrv',
         'promoted_name': 'input:tolin:Thrust_Reverser:inthrv',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:inthrv',
         'typeVar': 'Int',
         'val': -1}
      input:tolin:Thrust_Reverser:rvfact: {
        'desc': 'Fraction of thrust reversed - net  (Real values should be '
                 'negative)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:rvfact',
         'promoted_name': 'input:tolin:Thrust_Reverser:rvfact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:rvfact',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Thrust_Reverser:velrv: {
        'desc': 'Velocities for reverse thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:velrv',
         'promoted_name': 'input:tolin:Thrust_Reverser:velrv',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:velrv',
         'typeVar': 'Array',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:tolin:Thrust_Reverser:thrrv: {
        'desc': 'Thrust values',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:thrrv',
         'promoted_name': 'input:tolin:Thrust_Reverser:thrrv',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:thrrv',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:tolin:Thrust_Reverser:tirvrs: {
        'desc': 'Time after touchdown to reverse thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:tirvrs',
         'promoted_name': 'input:tolin:Thrust_Reverser:tirvrs',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:tirvrs',
         'typeVar': 'Float',
         'units': 's',
         'val': 5.0}
      input:tolin:Thrust_Reverser:revcut: {
        'desc': 'Cutoff velocity for thrust reverser',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:revcut',
         'promoted_name': 'input:tolin:Thrust_Reverser:revcut',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:revcut',
         'typeVar': 'Float',
         'units': 'nmi',
         'val': -1000.0}
      input:tolin:Thrust_Reverser:clrev: {
        'desc': 'Change in lift coefficient due to thrust reverser',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:clrev',
         'promoted_name': 'input:tolin:Thrust_Reverser:clrev',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:clrev',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Thrust_Reverser:cdrev: {
        'desc': 'Change in drag coefficient due to thrust reverser',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Thrust_Reverser:cdrev',
         'promoted_name': 'input:tolin:Thrust_Reverser:cdrev',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Thrust_Reverser:cdrev',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Takeoff:cltom: {
        'desc': 'Maximum CL for takeoff (Default, see &AERIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:cltom',
         'promoted_name': 'input:tolin:Takeoff:cltom',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:cltom',
         'typeVar': 'Float',
         'val': -1.0}
      input:tolin:Takeoff:cdmto: {
        'desc': 'Minimum CD for takeoff, typically, this is the drag '
                 'coefficient at zero lift',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:cdmto',
         'promoted_name': 'input:tolin:Takeoff:cdmto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:cdmto',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Takeoff:fcdmto: {
        'desc': 'Fraction of CDMTO due to wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:fcdmto',
         'promoted_name': 'input:tolin:Takeoff:fcdmto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:fcdmto',
         'typeVar': 'Float',
         'val': 0.3}
      input:tolin:Takeoff:almxto: {
        'desc': 'Maximum angle of attack during takeoff',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:almxto',
         'promoted_name': 'input:tolin:Takeoff:almxto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:almxto',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 25.0}
      input:tolin:Takeoff:obsto: {
        'desc': 'Takeoff obstacle height (Defaults, Transport = 35., '
                 'Fighter = 50.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:obsto',
         'promoted_name': 'input:tolin:Takeoff:obsto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:obsto',
         'typeVar': 'Float',
         'units': 'ft',
         'val': -1.0}
      input:tolin:Takeoff:alpto: {
        'desc': 'Angles of attack for takeoff polar',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:alpto',
         'promoted_name': 'input:tolin:Takeoff:alpto',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:alpto',
         'typeVar': 'Array',
         'units': 'deg',
         'val': array([-100.])}
      input:tolin:Takeoff:clto: {
        'desc': 'Lift coefficients for takeoff polar.  These are not '
                 'generated internally',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:clto',
         'promoted_name': 'input:tolin:Takeoff:clto',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:clto',
         'typeVar': 'Array',
         'val': array([-100.])}
      input:tolin:Takeoff:cdto: {
        'desc': 'Drag coefficients for takeoff polar.  These are not '
                 'generated internally',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:cdto',
         'promoted_name': 'input:tolin:Takeoff:cdto',
         'shape': (1,),
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:cdto',
         'typeVar': 'Array',
         'val': array([-100.])}
      input:tolin:Takeoff:inthto: {
        'desc': '= 0, Input thrust values will be used\n'
                 '= 1, The input values will be scaled\n'
                 '> 1, Scaled engine data deck for the (INTHTO-1)th power '
                 'setting will be used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:inthto',
         'promoted_name': 'input:tolin:Takeoff:inthto',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:inthto',
         'typeVar': 'Int',
         'val': 0}
      input:tolin:Takeoff:velto: {
        'desc': 'Velocities for takeoff thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:velto',
         'promoted_name': 'input:tolin:Takeoff:velto',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:velto',
         'typeVar': 'Array',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:tolin:Takeoff:thrto: {
        'desc': 'Thrust values',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:thrto',
         'promoted_name': 'input:tolin:Takeoff:thrto',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:thrto',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:tolin:Takeoff:alprot: {
        'desc': 'Maximum angle of attack during rotation phase of takeoff '
                 '(Default = ALMXTO)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:alprot',
         'promoted_name': 'input:tolin:Takeoff:alprot',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:alprot',
         'typeVar': 'Float',
         'val': -100.0}
      input:tolin:Takeoff:vrotat: {
        'desc': 'Minimum rotation start speed, knots or fraction of Vstall',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:vrotat',
         'promoted_name': 'input:tolin:Takeoff:vrotat',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:vrotat',
         'typeVar': 'Float',
         'val': 1.05}
      input:tolin:Takeoff:vangl: {
        'desc': 'Rotation rate',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:vangl',
         'promoted_name': 'input:tolin:Takeoff:vangl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:vangl',
         'typeVar': 'Float',
         'units': 'deg/s',
         'val': 2.0}
      input:tolin:Takeoff:thfact: {
        'desc': 'Thrust multiplier for input or extracted thrust data',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:thfact',
         'promoted_name': 'input:tolin:Takeoff:thfact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:thfact',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Takeoff:ftocl: {
        'desc': 'Factor for takeoff lift.  Also applied to drag polars '
                 'input in &PROIN',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:ftocl',
         'promoted_name': 'input:tolin:Takeoff:ftocl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:ftocl',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Takeoff:ftocd: {
        'desc': 'Factor for takeoff drag.  Also applied to drag polars '
                 'input in &PROIN',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:ftocd',
         'promoted_name': 'input:tolin:Takeoff:ftocd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:ftocd',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Takeoff:igobs: {
        'aliases': ('Liftoff + TDELG', 'Obstacle + TDELG'),
         'desc': 'Gear retraction switch',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:igobs',
         'promoted_name': 'input:tolin:Takeoff:igobs',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:igobs',
         'typeVar': 'Enum',
         'val': 0}
      input:tolin:Takeoff:tdelg: {
        'desc': 'Time delay after liftoff/obstacle before start of landing '
                 'gear retraction',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:tdelg',
         'promoted_name': 'input:tolin:Takeoff:tdelg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:tdelg',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.0}
      input:tolin:Takeoff:tigear: {
        'desc': 'Time required to retract landing gear.  Landing gear drag '
                 'is reduced using a cosine function.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:tigear',
         'promoted_name': 'input:tolin:Takeoff:tigear',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:tigear',
         'typeVar': 'Float',
         'units': 's',
         'val': 2.0}
      input:tolin:Takeoff:ibal: {
        'aliases': (        'pre-1998 FAA rules',
                             'post-1998 FAA rules',
                             'Do not compute'),
         'desc': 'Option to compute balanced field length',
         'optionsVal': (1, 2, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:ibal',
         'promoted_name': 'input:tolin:Takeoff:ibal',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:ibal',
         'typeVar': 'Enum',
         'val': 1}
      input:tolin:Takeoff:itxout: {
        'aliases': ('Ramp weight - taxi out fuel', 'Ramp weight'),
         'desc': 'Weight to use for takeoff field length calculations',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:itxout',
         'promoted_name': 'input:tolin:Takeoff:itxout',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:itxout',
         'typeVar': 'Enum',
         'val': 0}
      input:tolin:Takeoff:pilott: {
        'desc': 'Actual pilot reaction time from engine failure to brake '
                 'application.  Spoilers, brakes, and thrust reversal are '
                 'assumed to become effective and engine cutback occurs at '
                 'PILOTT + 2 seconds after engine failure.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:pilott',
         'promoted_name': 'input:tolin:Takeoff:pilott',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:pilott',
         'typeVar': 'Float',
         'units': 's',
         'val': 1.0}
      input:tolin:Takeoff:tispa: {
        'desc': 'Not currently used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:tispa',
         'promoted_name': 'input:tolin:Takeoff:tispa',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:tispa',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.0}
      input:tolin:Takeoff:tibra: {
        'desc': 'Not currently used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:tibra',
         'promoted_name': 'input:tolin:Takeoff:tibra',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:tibra',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.0}
      input:tolin:Takeoff:tirva: {
        'desc': 'Not currently used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:tirva',
         'promoted_name': 'input:tolin:Takeoff:tirva',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:tirva',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.0}
      input:tolin:Takeoff:ispol: {
        'aliases': ('Not used', 'Used'),
         'desc': 'Option for spoiler use during aborted takeoff',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:ispol',
         'promoted_name': 'input:tolin:Takeoff:ispol',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:ispol',
         'typeVar': 'Enum',
         'val': 1}
      input:tolin:Takeoff:irev: {
        'aliases': (        'Not used',
                             'Only if all engines operational',
                             'Always used'),
         'desc': 'Option for thrust reversal during aborted takeoff',
         'optionsVal': (0, 1, 2),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Takeoff:irev',
         'promoted_name': 'input:tolin:Takeoff:irev',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Takeoff:irev',
         'typeVar': 'Enum',
         'val': 1}
      input:tolin:Landing:clldm: {
        'desc': 'Maximum CL for landing (Default, see &AERIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:clldm',
         'promoted_name': 'input:tolin:Landing:clldm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:clldm',
         'typeVar': 'Float',
         'val': -1.0}
      input:tolin:Landing:cdmld: {
        'desc': 'Minimum CD for landing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:cdmld',
         'promoted_name': 'input:tolin:Landing:cdmld',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:cdmld',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Landing:fcdmld: {
        'desc': 'Fraction of CDMLD due to wing (Default = FCDMTO)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:fcdmld',
         'promoted_name': 'input:tolin:Landing:fcdmld',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:fcdmld',
         'typeVar': 'Float',
         'val': -1.0}
      input:tolin:Landing:almxld: {
        'desc': 'Maximum angle of attack during landing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:almxld',
         'promoted_name': 'input:tolin:Landing:almxld',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:almxld',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 25.0}
      input:tolin:Landing:obsld: {
        'desc': 'Landing obstacle height',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:obsld',
         'promoted_name': 'input:tolin:Landing:obsld',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:obsld',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 50.0}
      input:tolin:Landing:alpld: {
        'desc': 'Angles of attack for landing polar',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:alpld',
         'promoted_name': 'input:tolin:Landing:alpld',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:alpld',
         'typeVar': 'Array',
         'units': 'deg',
         'val': array([], dtype=float64)}
      input:tolin:Landing:clld: {
        'desc': 'Lift coefficients for landing polar.  These are not '
                 'generated internally',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:clld',
         'promoted_name': 'input:tolin:Landing:clld',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:clld',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:tolin:Landing:cdld: {
        'desc': 'Drag coefficients for landing polar.  These are not '
                 'generated internally',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:cdld',
         'promoted_name': 'input:tolin:Landing:cdld',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:cdld',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:tolin:Landing:inthld: {
        'desc': '= 0, Input thrust values will be used\n'
                 '= 1, The input values will be scaled\n'
                 '> 1, Scaled engine data deck will be used',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:inthld',
         'promoted_name': 'input:tolin:Landing:inthld',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:inthld',
         'typeVar': 'Int',
         'val': 0}
      input:tolin:Landing:velld: {
        'desc': 'Velocities for landing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:velld',
         'promoted_name': 'input:tolin:Landing:velld',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:velld',
         'typeVar': 'Array',
         'units': 'ft/s',
         'val': array([], dtype=float64)}
      input:tolin:Landing:thrld: {
        'desc': 'Thrust values',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:thrld',
         'promoted_name': 'input:tolin:Landing:thrld',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:thrld',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:tolin:Landing:thdry: {
        'desc': 'Maximum dry thrust at missed appproach for fighters '
                 '(Default = takeoff thrust)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:thdry',
         'promoted_name': 'input:tolin:Landing:thdry',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:thdry',
         'typeVar': 'Float',
         'units': 'lb',
         'val': -1.0}
      input:tolin:Landing:aprhgt: {
        'desc': 'Height above ground for start of approach',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:aprhgt',
         'promoted_name': 'input:tolin:Landing:aprhgt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:aprhgt',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 100.0}
      input:tolin:Landing:aprang: {
        'desc': 'Approach flight path angle',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:aprang',
         'promoted_name': 'input:tolin:Landing:aprang',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:aprang',
         'typeVar': 'Float',
         'units': 'deg',
         'val': -3.0}
      input:tolin:Landing:fldcl: {
        'desc': 'Factor for landing lift',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:fldcl',
         'promoted_name': 'input:tolin:Landing:fldcl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:fldcl',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Landing:fldcd: {
        'desc': 'Factor for landing drag',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:fldcd',
         'promoted_name': 'input:tolin:Landing:fldcd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:fldcd',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Landing:tdsink: {
        'desc': 'Sink rate at touchdown (Must be positive if input)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:tdsink',
         'promoted_name': 'input:tolin:Landing:tdsink',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:tdsink',
         'typeVar': 'Float',
         'units': 'ft/s',
         'val': 0.0}
      input:tolin:Landing:vangld: {
        'desc': 'Flare rate (Default = VANGL)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:vangld',
         'promoted_name': 'input:tolin:Landing:vangld',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:vangld',
         'typeVar': 'Float',
         'units': 'deg/s',
         'val': 0.0}
      input:tolin:Landing:noflar: {
        'aliases': ('No flare', 'Flare'),
         'desc': 'Option for flare during landing.  If no flare, sink rate '
                 'at touchdown is the approach sink rate with ground effects.',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:noflar',
         'promoted_name': 'input:tolin:Landing:noflar',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:noflar',
         'typeVar': 'Enum',
         'val': 0}
      input:tolin:Landing:tispol: {
        'desc': 'Time after touchdown to spoiler actuation',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:tispol',
         'promoted_name': 'input:tolin:Landing:tispol',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:tispol',
         'typeVar': 'Float',
         'units': 's',
         'val': 2.0}
      input:tolin:Landing:ticut: {
        'desc': 'Time after touchdown to cut back of engines to zero thrust',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:ticut',
         'promoted_name': 'input:tolin:Landing:ticut',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:ticut',
         'typeVar': 'Float',
         'units': 's',
         'val': 3.0}
      input:tolin:Landing:tibrak: {
        'desc': 'Time after touchdown to brake application',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:tibrak',
         'promoted_name': 'input:tolin:Landing:tibrak',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:tibrak',
         'typeVar': 'Float',
         'units': 's',
         'val': 4.0}
      input:tolin:Landing:acclim: {
        'desc': 'Deceleration limit',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:acclim',
         'promoted_name': 'input:tolin:Landing:acclim',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Landing:acclim',
         'typeVar': 'Float',
         'units': 'ft/(s*s)',
         'val': 16.0}
      input:tolin:Landing:magrup: {
        'aliases': (        'Gear up during missed approach',
                             'Gear down during missed approach',
                             'Use default'),
         'desc': 'Missed approach landing gear switch',
         'optionsVal': (1, 0, -1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Landing:magrup',
         'promoted_name': 'input:tolin:Landing:magrup',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Landing:magrup',
         'typeVar': 'Enum',
         'val': -1}
      input:tolin:Integration_Intervals:delvto: {
        'desc': 'Velocity step during ground run',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:delvto',
         'promoted_name': 'input:tolin:Integration_Intervals:delvto',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:delvto',
         'typeVar': 'Float',
         'units': 'ft/s',
         'val': 4.0}
      input:tolin:Integration_Intervals:deltro: {
        'desc': 'Time step during rotation',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:deltro',
         'promoted_name': 'input:tolin:Integration_Intervals:deltro',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:deltro',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.2}
      input:tolin:Integration_Intervals:deltcl: {
        'desc': 'Time step during climbout',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:deltcl',
         'promoted_name': 'input:tolin:Integration_Intervals:deltcl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:deltcl',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.2}
      input:tolin:Integration_Intervals:delhap: {
        'desc': 'Altitude step during approach',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:delhap',
         'promoted_name': 'input:tolin:Integration_Intervals:delhap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:delhap',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10.0}
      input:tolin:Integration_Intervals:deldfl: {
        'desc': 'Distance step during flare',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:deldfl',
         'promoted_name': 'input:tolin:Integration_Intervals:deldfl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:deldfl',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 10.0}
      input:tolin:Integration_Intervals:deltrn: {
        'desc': 'Time step during runout',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Integration_Intervals:deltrn',
         'promoted_name': 'input:tolin:Integration_Intervals:deltrn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Integration_Intervals:deltrn',
         'typeVar': 'Float',
         'units': 's',
         'val': 0.25}
      input:tolin:Basic:apa: {
        'desc': 'Airport altitude',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:apa',
         'promoted_name': 'input:tolin:Basic:apa',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:apa',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:tolin:Basic:dtct: {
        'desc': 'Delta temperature from standard day.  (This parameter is '
                 'independent from the DTC in Namelist &MISSIN and DTCE in '
                 'Namelist &ENGINE.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:dtct',
         'promoted_name': 'input:tolin:Basic:dtct',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:dtct',
         'typeVar': 'Float',
         'units': 'degC',
         'val': 0.0}
      input:tolin:Basic:swref: {
        'desc': 'Wing area on which takeoff and landing drag polars are '
                 'based (Default = SW, Namelist &CONFIN). If different from '
                 'SW, polars will be scaled.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:swref',
         'promoted_name': 'input:tolin:Basic:swref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:swref',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': -1.0}
      input:tolin:Basic:arret: {
        'desc': 'Wing aspect ratio on which takeoff and landing drag polars '
                 'are based (Default = AR, Namelist &CONFIN). If different '
                 'from AR, polars will be modified.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:arret',
         'promoted_name': 'input:tolin:Basic:arret',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:arret',
         'typeVar': 'Float',
         'val': -1.0}
      input:tolin:Basic:whgt: {
        'desc': 'Wing height above ground',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:whgt',
         'promoted_name': 'input:tolin:Basic:whgt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:whgt',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 8.0}
      input:tolin:Basic:alprun: {
        'desc': 'Angle of attack on ground',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:alprun',
         'promoted_name': 'input:tolin:Basic:alprun',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:alprun',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:tolin:Basic:tinc: {
        'desc': 'Thrust incidence on ground',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:tinc',
         'promoted_name': 'input:tolin:Basic:tinc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:tinc',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:tolin:Basic:rollmu: {
        'desc': 'Coefficient of rolling friction',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:rollmu',
         'promoted_name': 'input:tolin:Basic:rollmu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:rollmu',
         'typeVar': 'Float',
         'val': 0.025}
      input:tolin:Basic:brakmu: {
        'desc': 'Coefficient of friction, brakes on',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:brakmu',
         'promoted_name': 'input:tolin:Basic:brakmu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:brakmu',
         'typeVar': 'Float',
         'val': 0.3}
      input:tolin:Basic:cdgear: {
        'desc': 'Landing gear drag coefficient',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:cdgear',
         'promoted_name': 'input:tolin:Basic:cdgear',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:cdgear',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Basic:cdeout: {
        'desc': 'Delta drag coefficient due to engine out condition.  '
                 'Includes effect of stopped or windmilling engine and the '
                 'trim drag associated with compensating for asymmetric '
                 'thrust.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:cdeout',
         'promoted_name': 'input:tolin:Basic:cdeout',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:cdeout',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Basic:clspol: {
        'desc': 'Spoiler delta lift coefficient (Should be negative)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:clspol',
         'promoted_name': 'input:tolin:Basic:clspol',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:clspol',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Basic:cdspol: {
        'desc': 'Spoiler delta drag coefficient',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:cdspol',
         'promoted_name': 'input:tolin:Basic:cdspol',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:cdspol',
         'typeVar': 'Float',
         'val': 0.0}
      input:tolin:Basic:incgef: {
        'aliases': ('Ground effects', 'No ground effects'),
         'desc': 'Ground effects switch',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:incgef',
         'promoted_name': 'input:tolin:Basic:incgef',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Basic:incgef',
         'typeVar': 'Enum',
         'val': 1}
      input:tolin:Basic:argef: {
        'desc': 'Aspect ratio factor for ground effects',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:argef',
         'promoted_name': 'input:tolin:Basic:argef',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:tolin:Basic:argef',
         'typeVar': 'Float',
         'val': 1.0}
      input:tolin:Basic:itime: {
        'aliases': ('Print', 'No print'),
         'desc': 'Detailed takeoff and landing profiles print option',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:tolin:Basic:itime',
         'promoted_name': 'input:tolin:Basic:itime',
         'size': 0,
         'top_promoted_name': 'my_flops.input:tolin:Basic:itime',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:Wing_Data:span: {
        'desc': 'Wing span (optional, see &CONFIN - SW and AR)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:span',
         'promoted_name': 'input:wtin:Wing_Data:span',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:span',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Wing_Data:dih: {
        'desc': 'Wing dihedral (positive) or anhedral (negative) angle',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:dih',
         'promoted_name': 'input:wtin:Wing_Data:dih',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:dih',
         'typeVar': 'Float',
         'units': 'deg',
         'val': 0.0}
      input:wtin:Wing_Data:flapr: {
        'desc': 'Flap ratio -- ratio of total movable wing surface area '
                 '(flaps, elevators, spoilers, etc.) to wing area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:flapr',
         'promoted_name': 'input:wtin:Wing_Data:flapr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:flapr',
         'typeVar': 'Float',
         'val': 0.333}
      input:wtin:Wing_Data:glov: {
        'desc': 'Total glove and bat area beyond theoretical wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:glov',
         'promoted_name': 'input:wtin:Wing_Data:glov',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:glov',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:wtin:Wing_Data:varswp: {
        'desc': 'Fraction of wing variable sweep weight penalty = 0., '
                 'Fixed-geometry wing = 1., Full variable-sweep wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:varswp',
         'promoted_name': 'input:wtin:Wing_Data:varswp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:varswp',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Wing_Data:fcomp: {
        'desc': 'Decimal fraction of amount of composites used in wing '
                 'structure = 0., No composites = 1., Maximum use of '
                 'composites, approximately equivalent to FRWI1=.6, '
                 'FRWI2=.83, FRWI3=.7 (Not necessarily all composite) This '
                 'only applies to the wing.  Use override parameters for '
                 'other components such as FRHT=.75, FRVT=.75, FRFU=.82, '
                 'FRLGN=.85, FRLGM=.85, FRNA=.8',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:fcomp',
         'promoted_name': 'input:wtin:Wing_Data:fcomp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:fcomp',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Wing_Data:faert: {
        'desc': 'Decimal fraction of amount of aeroelastic tailoring used '
                 'in design of wing = 0., No aeroelastic tailoring = 1., '
                 'Maximum aeroelastic tailoring',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:faert',
         'promoted_name': 'input:wtin:Wing_Data:faert',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:faert',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Wing_Data:fstrt: {
        'desc': 'Wing strut-bracing factor = 0., No wing strut = 1., Full '
                 'benefit from strut bracing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Wing_Data:fstrt',
         'promoted_name': 'input:wtin:Wing_Data:fstrt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Wing_Data:fstrt',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Tails_Fins:sht: {
        'desc': 'Horizontal tail theoretical area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:sht',
         'promoted_name': 'input:wtin:Tails_Fins:sht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:sht',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:wtin:Tails_Fins:swpht: {
        'desc': 'Horizontal tail 25% chord sweep angle (Default = SWEEP, '
                 'Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:swpht',
         'promoted_name': 'input:wtin:Tails_Fins:swpht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:swpht',
         'typeVar': 'Float',
         'units': 'deg',
         'val': -100.0}
      input:wtin:Tails_Fins:arht: {
        'desc': 'Horizontal tail theoretical aspect ratio (Default = AR/2, '
                 'Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:arht',
         'promoted_name': 'input:wtin:Tails_Fins:arht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:arht',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:trht: {
        'desc': 'Horizontal tail theoretical taper ratio (Default = TR, '
                 'Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:trht',
         'promoted_name': 'input:wtin:Tails_Fins:trht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:trht',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:tcht: {
        'desc': 'Thickness-chord ratio for the horizontal tail (Default = '
                 'TCA, Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:tcht',
         'promoted_name': 'input:wtin:Tails_Fins:tcht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:tcht',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Tails_Fins:hht: {
        'desc': 'Decimal fraction of vertical tail span where horizontal '
                 'tail is mounted = 0. for body mounted (Default for '
                 'transports with all engines on the wing and for fighters) '
                 '= 1. for T tail (Default for transports with multiple '
                 'engines on the fuselage)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:hht',
         'promoted_name': 'input:wtin:Tails_Fins:hht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:hht',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:nvert: {
        'desc': 'Number of vertical tails',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:nvert',
         'promoted_name': 'input:wtin:Tails_Fins:nvert',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:nvert',
         'typeVar': 'Int',
         'val': 1}
      input:wtin:Tails_Fins:svt: {
        'desc': 'Vertical tail theoretical area (per tail)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:svt',
         'promoted_name': 'input:wtin:Tails_Fins:svt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:svt',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:wtin:Tails_Fins:swpvt: {
        'desc': 'Vertical tail sweep angle at 25% chord (Default = SWPHT)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:swpvt',
         'promoted_name': 'input:wtin:Tails_Fins:swpvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:swpvt',
         'typeVar': 'Float',
         'units': 'deg',
         'val': -100.0}
      input:wtin:Tails_Fins:arvt: {
        'desc': 'Vertical tail theoretical aspect ratio (Default = ARHT/2)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:arvt',
         'promoted_name': 'input:wtin:Tails_Fins:arvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:arvt',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:trvt: {
        'desc': 'Vertical tail theoretical taper ratio (Default = TRHT)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:trvt',
         'promoted_name': 'input:wtin:Tails_Fins:trvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:trvt',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:tcvt: {
        'desc': 'Thickness-chord ratio for the vertical tail (Default = '
                 'TCHT)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:tcvt',
         'promoted_name': 'input:wtin:Tails_Fins:tcvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:tcvt',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Tails_Fins:nfin: {
        'desc': 'Number of fins',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:nfin',
         'promoted_name': 'input:wtin:Tails_Fins:nfin',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:nfin',
         'typeVar': 'Int',
         'val': 0}
      input:wtin:Tails_Fins:sfin: {
        'desc': 'Vertical fin theoretical area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:sfin',
         'promoted_name': 'input:wtin:Tails_Fins:sfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:sfin',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:wtin:Tails_Fins:arfin: {
        'desc': 'Vertical fin theoretical aspect ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:arfin',
         'promoted_name': 'input:wtin:Tails_Fins:arfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:arfin',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:trfin: {
        'desc': 'Vertical fin theoretical taper ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:trfin',
         'promoted_name': 'input:wtin:Tails_Fins:trfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:trfin',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:swpfin: {
        'desc': 'Vertical fin sweep angle at 25% chord',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:swpfin',
         'promoted_name': 'input:wtin:Tails_Fins:swpfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:swpfin',
         'typeVar': 'Float',
         'units': 'deg',
         'val': -100.0}
      input:wtin:Tails_Fins:tcfin: {
        'desc': 'Vertical fin thickness - chord ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:tcfin',
         'promoted_name': 'input:wtin:Tails_Fins:tcfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:tcfin',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Tails_Fins:scan: {
        'desc': 'Canard theoretical area',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:scan',
         'promoted_name': 'input:wtin:Tails_Fins:scan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:scan',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': 0.0}
      input:wtin:Tails_Fins:swpcan: {
        'desc': 'Canard sweep angle at 25% chord',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:swpcan',
         'promoted_name': 'input:wtin:Tails_Fins:swpcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:swpcan',
         'typeVar': 'Float',
         'units': 'deg',
         'val': -100.0}
      input:wtin:Tails_Fins:arcan: {
        'desc': 'Canard theoretical aspect ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:arcan',
         'promoted_name': 'input:wtin:Tails_Fins:arcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:arcan',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:trcan: {
        'desc': 'Canard theoretical taper ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:trcan',
         'promoted_name': 'input:wtin:Tails_Fins:trcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:trcan',
         'typeVar': 'Float',
         'val': -100.0}
      input:wtin:Tails_Fins:tccan: {
        'desc': 'Canard thickness-chord ratio (Default = TCHT)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Tails_Fins:tccan',
         'promoted_name': 'input:wtin:Tails_Fins:tccan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Tails_Fins:tccan',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Propulsion:new: {
        'desc': 'Number of wing mounted engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:new',
         'promoted_name': 'input:wtin:Propulsion:new',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:new',
         'typeVar': 'Int',
         'val': 2}
      input:wtin:Propulsion:nef: {
        'desc': 'Number of fuselage mounted engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:nef',
         'promoted_name': 'input:wtin:Propulsion:nef',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:nef',
         'typeVar': 'Int',
         'val': 0}
      input:wtin:Propulsion:thrso: {
        'desc': 'Rated thrust of baseline engine as described in Engine '
                 'Deck (Default = THRUST, see &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:thrso',
         'promoted_name': 'input:wtin:Propulsion:thrso',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:thrso',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 40000.0}
      input:wtin:Propulsion:weng: {
        'desc': 'Weight of each baseline engine or bare engine if WINL and '
                 'WNOZ (below) are supplied (Default = THRSO/5.5 for '
                 'transports and THRSO/8 for fighters)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:weng',
         'promoted_name': 'input:wtin:Propulsion:weng',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:weng',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Propulsion:eexp: {
        'desc': 'Engine weight scaling parameter\n'
                 'W(Engine) = WENG*(THRUST/THRSO)**EEXP\n'
                 'If EEXP is less than 0.3,\n'
                 'W(Engine) = WENG + (THRUST-THRSO)*EEXP',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:eexp',
         'promoted_name': 'input:wtin:Propulsion:eexp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:eexp',
         'typeVar': 'Float',
         'val': 1.15}
      input:wtin:Propulsion:winl: {
        'desc': 'Inlet weight for baseline engine if not included in WENG '
                 'above',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:winl',
         'promoted_name': 'input:wtin:Propulsion:winl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:winl',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Propulsion:einl: {
        'desc': 'Inlet weight scaling exponent\n'
                 'W(Inlet) = WINL*(THRUST/THRSO)**EINL',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:einl',
         'promoted_name': 'input:wtin:Propulsion:einl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:einl',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Propulsion:wnoz: {
        'desc': 'Nozzle weight for baseline engine if not included in WENG '
                 'above',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:wnoz',
         'promoted_name': 'input:wtin:Propulsion:wnoz',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:wnoz',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Propulsion:enoz: {
        'desc': 'Nozzle weight scaling exponent\n'
                 'W(Nozzle) = WNOZ*(THRUST/THRSO)**ENOZ',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:enoz',
         'promoted_name': 'input:wtin:Propulsion:enoz',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:enoz',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Propulsion:xnac: {
        'desc': 'Average length of baseline engine nacelles.  Scaled by '
                 'SQRT(THRUST/THRSO)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:xnac',
         'promoted_name': 'input:wtin:Propulsion:xnac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:xnac',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Propulsion:dnac: {
        'desc': 'Average diameter of baseline engine nacelles.  Scaled by '
                 'SQRT(THRUST/THRSO)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:dnac',
         'promoted_name': 'input:wtin:Propulsion:dnac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:dnac',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Propulsion:wpmisc: {
        'desc': 'Additional miscellaneous propulsion system weight or '
                 'fraction of engine weight if < 1.  This is added to the '
                 'engine control and starter weight and may be overridden if '
                 'WPMSC is input.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Propulsion:wpmisc',
         'promoted_name': 'input:wtin:Propulsion:wpmisc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Propulsion:wpmisc',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Override:frwi: {
        'desc': 'Total wing weight - fixed weight overrides FRWI1, FRWI2, '
                 'FRWI3, FRWI4 below, scale factor is cumulative \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component\n'
                 ' \n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frwi',
         'promoted_name': 'input:wtin:Override:frwi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frwi',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frwi1: {
        'desc': 'First term in wing weight equation - loosely corresponds '
                 'to bending material weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component\n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frwi1',
         'promoted_name': 'input:wtin:Override:frwi1',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frwi1',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frwi2: {
        'desc': 'Second term in wing weight equation - loosely corresponds '
                 'to control surfaces, spars and ribs \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component\n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frwi2',
         'promoted_name': 'input:wtin:Override:frwi2',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frwi2',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frwi3: {
        'desc': 'Third term in wing weight equation - miscellaneous, just '
                 'because it',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frwi3',
         'promoted_name': 'input:wtin:Override:frwi3',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frwi3',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frwi4: {
        'desc': 'Fourth term in wing weight equation - miscellaneous, just '
                 'because it',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frwi4',
         'promoted_name': 'input:wtin:Override:frwi4',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frwi4',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frht: {
        'desc': 'Horizontal tail weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frht',
         'promoted_name': 'input:wtin:Override:frht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frht',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frvt: {
        'desc': 'Vertical tail weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frvt',
         'promoted_name': 'input:wtin:Override:frvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frvt',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frfin: {
        'desc': 'Wing vertical fin weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frfin',
         'promoted_name': 'input:wtin:Override:frfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frfin',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frcan: {
        'desc': 'Canard weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frcan',
         'promoted_name': 'input:wtin:Override:frcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frcan',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frfu: {
        'desc': 'Fuselage weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frfu',
         'promoted_name': 'input:wtin:Override:frfu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frfu',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frlgn: {
        'desc': 'Landing gear weight, nose \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frlgn',
         'promoted_name': 'input:wtin:Override:frlgn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frlgn',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frlgm: {
        'desc': 'Landing gear weight, main \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frlgm',
         'promoted_name': 'input:wtin:Override:frlgm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frlgm',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frna: {
        'desc': 'Total weight of nacelles and/or air induction system \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frna',
         'promoted_name': 'input:wtin:Override:frna',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frna',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wthr: {
        'desc': 'Total weight of thrust reversers\n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wthr',
         'promoted_name': 'input:wtin:Override:wthr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wthr',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Override:wpmsc: {
        'desc': 'Weight of miscellaneous propulsion systems such as engine '
                 'controls, starter and wiring \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wpmsc',
         'promoted_name': 'input:wtin:Override:wpmsc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wpmsc',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wfsys: {
        'desc': 'Weight of fuel system \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wfsys',
         'promoted_name': 'input:wtin:Override:wfsys',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wfsys',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:frsc: {
        'desc': 'Surface controls weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:frsc',
         'promoted_name': 'input:wtin:Override:frsc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:frsc',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wapu: {
        'desc': 'Auxiliary power unit weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wapu',
         'promoted_name': 'input:wtin:Override:wapu',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wapu',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:win: {
        'desc': 'Instrument Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:win',
         'promoted_name': 'input:wtin:Override:win',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:win',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:whyd: {
        'desc': 'Hydraulics Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:whyd',
         'promoted_name': 'input:wtin:Override:whyd',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:whyd',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:welec: {
        'desc': 'Electrical Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:welec',
         'promoted_name': 'input:wtin:Override:welec',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:welec',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wavonc: {
        'desc': 'Avionics Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wavonc',
         'promoted_name': 'input:wtin:Override:wavonc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wavonc',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:warm: {
        'desc': 'Armament Group weight - includes thermal protection system '
                 'or armor and fixed weapons\n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:warm',
         'promoted_name': 'input:wtin:Override:warm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:warm',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Override:wfurn: {
        'desc': 'Furnishings Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wfurn',
         'promoted_name': 'input:wtin:Override:wfurn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wfurn',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wac: {
        'desc': 'Air Conditioning Group weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wac',
         'promoted_name': 'input:wtin:Override:wac',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wac',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wai: {
        'desc': 'Transports: Anti-icing Group weight\n'
                 '            Fighters:   Auxiliary gear \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wai',
         'promoted_name': 'input:wtin:Override:wai',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wai',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wuf: {
        'desc': 'Weight of unusable fuel \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wuf',
         'promoted_name': 'input:wtin:Override:wuf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wuf',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:woil: {
        'desc': 'Engine oil weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:woil',
         'promoted_name': 'input:wtin:Override:woil',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:woil',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wsrv: {
        'desc': 'Transports: Passenger service weight\n'
                 '             Fighters: Ammunition and nonfixed weapons '
                 'weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wsrv',
         'promoted_name': 'input:wtin:Override:wsrv',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wsrv',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wcon: {
        'desc': 'Transports: Cargo and baggage container weight Fighters:   '
                 'Miscellaneous operating items weight If < 0.5, as a '
                 'fraction of Gross Weight \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wcon',
         'promoted_name': 'input:wtin:Override:wcon',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wcon',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wauxt: {
        'desc': 'Auxiliary fuel tank weight (Fighters only) \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wauxt',
         'promoted_name': 'input:wtin:Override:wauxt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wauxt',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wflcrb: {
        'desc': 'Total weight of flight crew and baggage\n'
                 '           (Defaults:  Transports    - 225.*NFLCR\n'
                 '           Fighters      - 215.*NFLCR\n'
                 '           Carrier-based - 180.*NFLCR)\n'
                 '           \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wflcrb',
         'promoted_name': 'input:wtin:Override:wflcrb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wflcrb',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:wstuab: {
        'desc': 'Total weight of cabin crew and baggage (Default = '
                 '155.*NSTU + 200.*NGALC) \n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:wstuab',
         'promoted_name': 'input:wtin:Override:wstuab',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:wstuab',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Override:ewmarg: {
        'desc': 'Empty weight margin (Special Option) - delta weight added '
                 'to Weight Empty.  If abs(EWMARG) < 5., it is interpreted '
                 'as a fraction of calculated Weight Empty.  May be positive '
                 'or negative\n'
                 ' < 0., negative of starting weight which will be modified '
                 'as appropriate during optimization or parametric '
                 'variation\n'
                 ' \n'
                 ' = 0., no weight for that component\n'
                 ' \n'
                 ' > 0. but < 5., scale factor applied to internally '
                 'computed weight\n'
                 ' \n'
                 ' > 5., actual fixed weight for component',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Override:ewmarg',
         'promoted_name': 'input:wtin:Override:ewmarg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Override:ewmarg',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:OEW_Calculations:ispowe: {
        'aliases': ('Normal FLOPS', 'Special eqn for OEW'),
         'desc': '= 0, Normal FLOPS weight equations will be used\n'
                 '= 1, Special equation for Operating Weight Empty will be '
                 'used:\n'
                 '            \n'
                 '            OWE = SPWTH*THRUST + SPWSW*SW + SPWGW*GW + '
                 'SPWCON\n'
                 '            \n'
                 '            Structures group weights will be scaled to '
                 'meet the calculated OWE.\n'
                 '            \n'
                 '            = 2, Use response surface for weights - '
                 'available only in DOSS version',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:OEW_Calculations:ispowe',
         'promoted_name': 'input:wtin:OEW_Calculations:ispowe',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:OEW_Calculations:ispowe',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:OEW_Calculations:spwth: {
        'desc': 'Multiplier for thrust/engine in special equation for '
                 'Operating Weight Empty\n'
                 'SPWTH = \n'
                 '                                  AIRFLOWref\n'
                 '(PODsclr + dOEWsclr) * ------------\n'
                 '                               SLSTHRUSTref\n'
                 '            ',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:OEW_Calculations:spwth',
         'promoted_name': 'input:wtin:OEW_Calculations:spwth',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:OEW_Calculations:spwth',
         'typeVar': 'Float',
         'units': 'lb/lb',
         'val': 2.2344}
      input:wtin:OEW_Calculations:spwsw: {
        'desc': 'Multiplier for wing area in special equation for Operating '
                 'Weight Empty',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:OEW_Calculations:spwsw',
         'promoted_name': 'input:wtin:OEW_Calculations:spwsw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:OEW_Calculations:spwsw',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 9.5}
      input:wtin:OEW_Calculations:spwgw: {
        'desc': 'Multiplier for gross weight in special equation for '
                 'Operating Weight Empty\n'
                 'SPWGW = \n'
                 '            MTOWsclr+OEWgrwth*MTOWgrwth\n'
                 '        -----------------------------------\n'
                 '            1. + MTOWgrowth\n'
                 '\n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:OEW_Calculations:spwgw',
         'promoted_name': 'input:wtin:OEW_Calculations:spwgw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:OEW_Calculations:spwgw',
         'typeVar': 'Float',
         'units': 'lb/lb',
         'val': 0.104087}
      input:wtin:OEW_Calculations:spwcon: {
        'desc': 'Constant weight term in special equation for Operating '
                 'Weight Empty\n'
                 '            \n'
                 'SPWCON = OEWuncycled\n'
                 '            - MTOWscalar*MTOWuncycled\n'
                 '            - WINGscalar*SWref\n'
                 '            - (PODscalar + dOEWscalar)\n'
                 '            *AIRFLOWref\n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:OEW_Calculations:spwcon',
         'promoted_name': 'input:wtin:OEW_Calculations:spwcon',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:OEW_Calculations:spwcon',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 38584.0}
      input:wtin:Landing_Gear:xmlg: {
        'desc': 'Length of extended main landing gear oleo (Default is '
                 'computed internally)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:xmlg',
         'promoted_name': 'input:wtin:Landing_Gear:xmlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:xmlg',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Landing_Gear:xnlg: {
        'desc': 'Length of extended nose landing gear oleo (Default is '
                 'computed internally)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:xnlg',
         'promoted_name': 'input:wtin:Landing_Gear:xnlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:xnlg',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Landing_Gear:wldg: {
        'desc': 'Design landing weight (if WRATIO is input in Namelist '
                 '&AERIN, WLDG = GW*WRATIO) See Namelist &AERIN for WRATIO '
                 'defaults.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:wldg',
         'promoted_name': 'input:wtin:Landing_Gear:wldg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:wldg',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Landing_Gear:mldwt: {
        'desc': '= 1, The design landing weight is set to the end of '
                 'descent weight for the main mission plus DLDWT.  Use only '
                 'if IRW = 1 in Namelist &MISSIN.  = 0, The design landing '
                 'weight is determined by WLDG above or WRATIO in Namelist '
                 '&AERIN',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:mldwt',
         'promoted_name': 'input:wtin:Landing_Gear:mldwt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:mldwt',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:Landing_Gear:dldwt: {
        'desc': 'Delta landing weight for MLDWT = 1',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:dldwt',
         'promoted_name': 'input:wtin:Landing_Gear:dldwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:dldwt',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Landing_Gear:carbas: {
        'desc': 'Carrier based aircraft switch, affects weight of flight '
                 'crew, avionics and nose gear = 1., Carrier based = 0., '
                 'Land based',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Landing_Gear:carbas',
         'promoted_name': 'input:wtin:Landing_Gear:carbas',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Landing_Gear:carbas',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Inertia:inrtia: {
        'aliases': ('Calculate', 'Do not calculate'),
         'desc': '= 1, Aircraft inertias will be calculated = 0, Otherwise',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:inrtia',
         'promoted_name': 'input:wtin:Inertia:inrtia',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:inrtia',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:Inertia:zht: {
        'desc': 'Vertical C.G. of the horizontal tail (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zht',
         'promoted_name': 'input:wtin:Inertia:zht',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zht',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zvt: {
        'desc': 'Vertical C.G. of the vertical tail (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zvt',
         'promoted_name': 'input:wtin:Inertia:zvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zvt',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zfin: {
        'desc': 'Vertical C.G. of the vertical fin (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zfin',
         'promoted_name': 'input:wtin:Inertia:zfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zfin',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:yfin: {
        'desc': 'Lateral C.G. of the vertical fin (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:yfin',
         'promoted_name': 'input:wtin:Inertia:yfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:yfin',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zef: {
        'desc': 'Vertical C.G. of two forward mounted engines (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zef',
         'promoted_name': 'input:wtin:Inertia:zef',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zef',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:yef: {
        'desc': 'Lateral C.G. of two forward mounted engines (optional, may '
                 'be input as a fraction of the semispan)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:yef',
         'promoted_name': 'input:wtin:Inertia:yef',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:yef',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zea: {
        'desc': 'Vertical C.G. of one or two aft mounted engines (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zea',
         'promoted_name': 'input:wtin:Inertia:zea',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zea',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:yea: {
        'desc': 'Lateral C.G. of one or two aft mounted engines (optional, '
                 'may be input as a fraction of the semispan)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:yea',
         'promoted_name': 'input:wtin:Inertia:yea',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:yea',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zbw: {
        'desc': 'Lowermost point of wing root airfoil section',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zbw',
         'promoted_name': 'input:wtin:Inertia:zbw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zbw',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zap: {
        'desc': 'Vertical C.G. of Auxiliary Power Unit (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zap',
         'promoted_name': 'input:wtin:Inertia:zap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zap',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:zrvt: {
        'desc': 'Vertical datum line (Water Line) of vertical tail '
                 'theoretical root chord (optional, if blank assumes at '
                 'maximum height of fuselage)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:zrvt',
         'promoted_name': 'input:wtin:Inertia:zrvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:zrvt',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:ymlg: {
        'desc': 'Lateral C.G. of extended main landing gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:ymlg',
         'promoted_name': 'input:wtin:Inertia:ymlg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:ymlg',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:yfuse: {
        'desc': 'Lateral C.G. of outboard fuselage if there is more than '
                 'one fuselage',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:yfuse',
         'promoted_name': 'input:wtin:Inertia:yfuse',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:yfuse',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:yvert: {
        'desc': 'Lateral C.G. of outboard vertical tail if there is more '
                 'than one vertical tail',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:yvert',
         'promoted_name': 'input:wtin:Inertia:yvert',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:yvert',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Inertia:swtff: {
        'desc': 'Gross fuselage wetted area (Default = internally computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:swtff',
         'promoted_name': 'input:wtin:Inertia:swtff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:swtff',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Inertia:tcr: {
        'desc': 'Wing root thickness-chord ratio (Default = TOC(0) or TCA '
                 'in &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tcr',
         'promoted_name': 'input:wtin:Inertia:tcr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tcr',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Inertia:tct: {
        'desc': 'Wing tip thickness-chord ratio (Default = TOC(NETAW) or '
                 'TCA in &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tct',
         'promoted_name': 'input:wtin:Inertia:tct',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tct',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Inertia:incpay: {
        'aliases': ('Passengers-etc in fuse', 'All payload in tanks'),
         'desc': 'For inertia calculations, all mission fuel is placed in '
                 '"tanks." \n'
                 ' \n'
                 ' = 1, Include passengers, passenger baggage, and cargo in '
                 'the fuselage and contents for inertia calculations. \n'
                 ' \n'
                 ' = 0, For inertia calculations, all payload (passengers, '
                 'passenger baggage, and cargo) are placed in "tanks" like '
                 'the fuel',
         'optionsVal': (1, 0),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:incpay',
         'promoted_name': 'input:wtin:Inertia:incpay',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:incpay',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:Inertia:tx: {
        'desc': 'x coordinates of the centroid of the Ith tank',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tx',
         'promoted_name': 'input:wtin:Inertia:tx',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tx',
         'typeVar': 'Array',
         'units': 'inch',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:ty: {
        'desc': 'y coordinates of the centroid of the Ith tank',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:ty',
         'promoted_name': 'input:wtin:Inertia:ty',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:ty',
         'typeVar': 'Array',
         'units': 'inch',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:tz: {
        'desc': 'z coordinates of the centroid of the Ith tank',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tz',
         'promoted_name': 'input:wtin:Inertia:tz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tz',
         'typeVar': 'Array',
         'units': 'inch',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:tl: {
        'desc': 'Length of the Ith tank (optional, used only in calculating '
                 'I0',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tl',
         'promoted_name': 'input:wtin:Inertia:tl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tl',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:tw: {
        'desc': 'Width of the Ith tank (optional, used only in calculating '
                 'I0',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tw',
         'promoted_name': 'input:wtin:Inertia:tw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tw',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:td: {
        'desc': 'Depth of the Ith tank (optional, used only in calculating '
                 'I0',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:td',
         'promoted_name': 'input:wtin:Inertia:td',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:td',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Inertia:tf: {
        'desc': 'Weight of fuel (or payload) in Ith tank for the Jth fuel '
                 'condition NOTE: Dimensions are [J,I]',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Inertia:tf',
         'promoted_name': 'input:wtin:Inertia:tf',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Inertia:tf',
         'typeVar': 'Array',
         'units': 'lb',
         'val': array([], dtype=float64)}
      input:wtin:Fuselage:nfuse: {
        'desc': 'Number of fuselages',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuselage:nfuse',
         'promoted_name': 'input:wtin:Fuselage:nfuse',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Fuselage:nfuse',
         'typeVar': 'Int',
         'val': 1}
      input:wtin:Fuselage:xl: {
        'desc': 'Fuselage total length (See Fuselage Design Data)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuselage:xl',
         'promoted_name': 'input:wtin:Fuselage:xl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuselage:xl',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Fuselage:wf: {
        'desc': 'Maximum fuselage width',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuselage:wf',
         'promoted_name': 'input:wtin:Fuselage:wf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuselage:wf',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Fuselage:df: {
        'desc': 'Maximum fuselage depth',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuselage:df',
         'promoted_name': 'input:wtin:Fuselage:df',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuselage:df',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Fuselage:xlp: {
        'desc': 'Length of passenger compartment (Default is internally '
                 'computed)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuselage:xlp',
         'promoted_name': 'input:wtin:Fuselage:xlp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuselage:xlp',
         'typeVar': 'Float',
         'units': 'ft',
         'val': 0.0}
      input:wtin:Fuel_System:ntank: {
        'desc': 'Number of fuel tanks',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:ntank',
         'promoted_name': 'input:wtin:Fuel_System:ntank',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:ntank',
         'typeVar': 'Int',
         'val': 7}
      input:wtin:Fuel_System:fulwmx: {
        'desc': 'Total fuel capacity of wing.  The default is internally '
                 'calculated from:\n'
                 ' \n'
                 '                             TCA * SW**2         TR\n'
                 ' FULWMX = FWMAX * ---------- * ( 1 - -------- )\n'
                 '                                SPAN         (1+TR)**2\n'
                 ' \n'
                 ' Where the default value of FWMAX is 23.  If FULWMX is '
                 'input < 50, it is interpreted as FWMAX and the above '
                 'equation is used.  This equation is also used for scaling '
                 'when the wing area, t/c, aspect ratio, or taper ratio is '
                 'varied or optimized.\n'
                 ' \n'
                 ' Alternatively,  FULWMX = FUELRF + FUSCLA*(SW**1.5 - '
                 'FSWREF**1.5)\n'
                 ' + FUSCLB*(SW - FSWREF)\n',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fulwmx',
         'promoted_name': 'input:wtin:Fuel_System:fulwmx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fulwmx',
         'typeVar': 'Float',
         'units': 'lb',
         'val': -1.0}
      input:wtin:Fuel_System:fulden: {
        'desc': 'Fuel density ratio for alternate fuels compared to jet '
                 'fuel (typical density of 6.7 lb/gal), used in the '
                 'calculation of FULWMX (if FULWMX is not input) and in the '
                 'calculation of fuel system weight.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fulden',
         'promoted_name': 'input:wtin:Fuel_System:fulden',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fulden',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Fuel_System:fuelrf: {
        'desc': 'Fuel capacity at FSWREF for alternate method',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fuelrf',
         'promoted_name': 'input:wtin:Fuel_System:fuelrf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fuelrf',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Fuel_System:fswref: {
        'desc': 'Reference wing area for alternate method (Default = SW in '
                 'Namelist &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fswref',
         'promoted_name': 'input:wtin:Fuel_System:fswref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fswref',
         'typeVar': 'Float',
         'units': 'ft*ft',
         'val': -1.0}
      input:wtin:Fuel_System:fuscla: {
        'desc': 'Alternate fuel capacity scaling method - Factor A',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fuscla',
         'promoted_name': 'input:wtin:Fuel_System:fuscla',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fuscla',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Fuel_System:fusclb: {
        'desc': 'Alternate fuel capacity scaling method - Factor B',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fusclb',
         'promoted_name': 'input:wtin:Fuel_System:fusclb',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fusclb',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Fuel_System:fulfmx: {
        'desc': 'Total fuel capacity of fuselage (wing ',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fulfmx',
         'promoted_name': 'input:wtin:Fuel_System:fulfmx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fulfmx',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Fuel_System:ifufu: {
        'desc': '= 1, Fuselage fuel capacity is adjusted to meet the '
                 'required fuel capacity for the primary mission.  Use only '
                 'if IRW = 1 in Namelist &MISSIN, and use with care - some '
                 'passengers can',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:ifufu',
         'promoted_name': 'input:wtin:Fuel_System:ifufu',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:ifufu',
         'typeVar': 'Int',
         'val': 0}
      input:wtin:Fuel_System:fulaux: {
        'desc': 'Auxiliary (external) fuel tank capacity (Fighters only)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Fuel_System:fulaux',
         'promoted_name': 'input:wtin:Fuel_System:fulaux',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Fuel_System:fulaux',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Detailed_Wing:etaw: {
        'desc': 'Wing station location - fraction of semispan or distance '
                 'from fuselage centerline.  Typically, goes from 0. to 1.  '
                 'Input fixed distances (>1.1) are not scaled with changes '
                 'in span.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:etaw',
         'promoted_name': 'input:wtin:Detailed_Wing:etaw',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:etaw',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Detailed_Wing:chd: {
        'desc': 'Chord length - fraction of semispan or actual chord.   '
                 'Actual chord lengths (>5.) are not scaled.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:chd',
         'promoted_name': 'input:wtin:Detailed_Wing:chd',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:chd',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Detailed_Wing:toc: {
        'desc': 'Thickness - chord ratio',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:toc',
         'promoted_name': 'input:wtin:Detailed_Wing:toc',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:toc',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Detailed_Wing:swl: {
        'desc': 'Sweep of load path.  Typically parallel to rear spar '
                 'tending toward max t/c of airfoil.  The Ith value is used '
                 'between wing stations I and I+1.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:swl',
         'promoted_name': 'input:wtin:Detailed_Wing:swl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:swl',
         'typeVar': 'Array',
         'units': 'deg',
         'val': array([], dtype=float64)}
      input:wtin:Detailed_Wing:etae: {
        'desc': 'Engine locations - fraction of semispan or distance from '
                 'fuselage centerline.  Actual distances are not scaled with '
                 'changes in span.  NEW/2 values are input',
         'dtype': array([], dtype=float64),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:etae',
         'promoted_name': 'input:wtin:Detailed_Wing:etae',
         'shape': (4,),
         'size': 4,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:etae',
         'typeVar': 'Array',
         'val': array([ 0.3,  0.6,  0. ,  0. ])}
      input:wtin:Detailed_Wing:pctl: {
        'desc': 'Fraction of load carried by defined wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:pctl',
         'promoted_name': 'input:wtin:Detailed_Wing:pctl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:pctl',
         'typeVar': 'Float',
         'val': 1.0}
      input:wtin:Detailed_Wing:arref: {
        'desc': 'Reference aspect ratio (Default = AR in &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:arref',
         'promoted_name': 'input:wtin:Detailed_Wing:arref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:arref',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Detailed_Wing:tcref: {
        'desc': 'Reference thickness-chord ratio (Default = TCA in &CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:tcref',
         'promoted_name': 'input:wtin:Detailed_Wing:tcref',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:tcref',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Detailed_Wing:nstd: {
        'desc': 'Number of integration stations',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:nstd',
         'promoted_name': 'input:wtin:Detailed_Wing:nstd',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:nstd',
         'typeVar': 'Int',
         'val': 50}
      input:wtin:Detailed_Wing:pdist: {
        'desc': 'Pressure distribution indicator\n'
                 '= 0., Input distribution - see below\n'
                 '= 1., Triangular distribution\n'
                 '= 2., Elliptical distribution\n'
                 '= 3., Rectangular distribution PDIST is a continuous '
                 'variable, i.e., a value of 1.5 would be half way between '
                 'triangular and elliptical.\n'
                 'CAUTION - the constants in the wing weight calculations '
                 'were correlated with existing aircraft assuming an '
                 'elliptical distribution.  Use the default value unless you '
                 'have a good reason not to.',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:pdist',
         'promoted_name': 'input:wtin:Detailed_Wing:pdist',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:pdist',
         'typeVar': 'Float',
         'val': 2.0}
      input:wtin:Detailed_Wing:etap: {
        'desc': 'Fraction of wing semispan',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:etap',
         'promoted_name': 'input:wtin:Detailed_Wing:etap',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:etap',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Detailed_Wing:pval: {
        'desc': 'Relative spanwise pressure at ETAP(J)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Detailed_Wing:pval',
         'promoted_name': 'input:wtin:Detailed_Wing:pval',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Detailed_Wing:pval',
         'typeVar': 'Array',
         'val': array([], dtype=float64)}
      input:wtin:Crew_Payload:npf: {
        'desc': 'Number of first class passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:npf',
         'promoted_name': 'input:wtin:Crew_Payload:npf',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:npf',
         'typeVar': 'Int',
         'val': 20}
      input:wtin:Crew_Payload:npb: {
        'desc': 'Number of business class passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:npb',
         'promoted_name': 'input:wtin:Crew_Payload:npb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:npb',
         'typeVar': 'Int',
         'val': 0}
      input:wtin:Crew_Payload:npt: {
        'desc': 'Number of tourist passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:npt',
         'promoted_name': 'input:wtin:Crew_Payload:npt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:npt',
         'typeVar': 'Int',
         'val': 180}
      input:wtin:Crew_Payload:nstu: {
        'desc': 'Number of flight attendants (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:nstu',
         'promoted_name': 'input:wtin:Crew_Payload:nstu',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:nstu',
         'typeVar': 'Int',
         'val': -1}
      input:wtin:Crew_Payload:ngalc: {
        'desc': 'Number of galley crew (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:ngalc',
         'promoted_name': 'input:wtin:Crew_Payload:ngalc',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:ngalc',
         'typeVar': 'Int',
         'val': -1}
      input:wtin:Crew_Payload:nflcr: {
        'desc': 'Number of flight crew (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:nflcr',
         'promoted_name': 'input:wtin:Crew_Payload:nflcr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:nflcr',
         'typeVar': 'Int',
         'val': -1}
      input:wtin:Crew_Payload:wppass: {
        'desc': 'Weight per passenger',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:wppass',
         'promoted_name': 'input:wtin:Crew_Payload:wppass',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:wppass',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 165.0}
      input:wtin:Crew_Payload:bpp: {
        'desc': 'Weight of baggage per passenger (Default = 35., or 40. if '
                 'DESRNG in Namelist &CONFIN > 900., or 44. if DESRNG > '
                 '2900.)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:bpp',
         'promoted_name': 'input:wtin:Crew_Payload:bpp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:bpp',
         'typeVar': 'Float',
         'units': 'lb',
         'val': -1.0}
      input:wtin:Crew_Payload:cargf: {
        'desc': 'Military cargo aircraft floor factor = 0., Passenger '
                 'transport\n'
                 '= 1., Military cargo transport floor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:cargf',
         'promoted_name': 'input:wtin:Crew_Payload:cargf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:cargf',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Crew_Payload:cargow: {
        'desc': 'Cargo carried in wing (Weight of wing-mounted external '
                 'stores for fighters)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:cargow',
         'promoted_name': 'input:wtin:Crew_Payload:cargow',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:cargow',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Crew_Payload:cargof: {
        'desc': 'Cargo (other than passenger baggage) carried in fuselage '
                 '(Fuselage external stores for fighters)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Crew_Payload:cargof',
         'promoted_name': 'input:wtin:Crew_Payload:cargof',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Crew_Payload:cargof',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgw: {
        'desc': 'Longitudinal C.G. of wing',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgw',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgw',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cght: {
        'desc': 'Longitudinal C.G. of horizontal tail',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cght',
         'promoted_name': 'input:wtin:Center_of_Gravity:cght',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cght',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgvt: {
        'desc': 'Longitudinal C.G. of vertical tail',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgvt',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgvt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgvt',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgfin: {
        'desc': 'Longitudinal C.G. of wing vertical fins',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgfin',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgfin',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgfin',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgcan: {
        'desc': 'Longitudinal C.G. of canard',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgcan',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgcan',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgcan',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgf: {
        'desc': 'Longitudinal C.G. of fuselage',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgf',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgf',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cglgn: {
        'desc': 'Longitudinal C.G. of nose landing gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cglgn',
         'promoted_name': 'input:wtin:Center_of_Gravity:cglgn',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cglgn',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cglgm: {
        'desc': 'Longitudinal C.G. of main landing gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cglgm',
         'promoted_name': 'input:wtin:Center_of_Gravity:cglgm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cglgm',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgef: {
        'desc': 'Longitudinal C.G. of two forward mounted engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgef',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgef',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgef',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgea: {
        'desc': 'Longitudinal C.G. of one or two aft mounted engines',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgea',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgea',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgea',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgap: {
        'desc': 'Longitudinal C.G. of auxiliary power unit',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgap',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgap',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgap',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgav: {
        'desc': 'Longitudinal C.G. of avionics group (optional)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgav',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgav',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgav',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgarm: {
        'desc': 'Longitudinal C.G. of armament group - includes thermal '
                 'protection system or armor and fixed weapons (Default = '
                 'CGF)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgarm',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgarm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgarm',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgcr: {
        'desc': 'Longitudinal C.G. of flight crew',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgcr',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgcr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgcr',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgp: {
        'desc': 'Longitudinal C.G. of passengers',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgp',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgp',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgp',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgcw: {
        'desc': 'Longitudinal C.G. of wing cargo or external stores',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgcw',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgcw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgcw',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgcf: {
        'desc': 'Longitudinal C.G. of fuselage cargo or external stores',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgcf',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgcf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgcf',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgzwf: {
        'desc': 'Longitudinal C.G. of fuselage fuel',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgzwf',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgzwf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgzwf',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgfwf: {
        'desc': 'Longitudinal C.G. of wing fuel in full condition',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgfwf',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgfwf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgfwf',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgais: {
        'desc': 'Longitudinal C.G. of air induction system',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgais',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgais',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgais',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgacon: {
        'desc': 'Longitudinal C.G. of air conditioning system',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgacon',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgacon',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgacon',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgaxg: {
        'desc': 'Longitudinal C.G. of auxiliary gear',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgaxg',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgaxg',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgaxg',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgaxt: {
        'desc': 'Longitudinal C.G. of auxiliary tanks',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgaxt',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgaxt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgaxt',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgammo: {
        'desc': 'Longitudinal C.G. of ammunition and nonfixed weapons',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgammo',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgammo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgammo',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Center_of_Gravity:cgmis: {
        'desc': 'Longitudinal C.G. of miscellaneous operating items',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Center_of_Gravity:cgmis',
         'promoted_name': 'input:wtin:Center_of_Gravity:cgmis',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Center_of_Gravity:cgmis',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Basic:ulf: {
        'desc': 'Structural ultimate load factor',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:ulf',
         'promoted_name': 'input:wtin:Basic:ulf',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:ulf',
         'typeVar': 'Float',
         'val': 3.75}
      input:wtin:Basic:dgw: {
        'desc': 'Design gross weight - fraction of GW (see &CONFIN) or '
                 'weight',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:dgw',
         'promoted_name': 'input:wtin:Basic:dgw',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:dgw',
         'typeVar': 'Float',
         'units': 'lb',
         'val': 1.0}
      input:wtin:Basic:vmmo: {
        'desc': 'Maximum operating Mach number (Default = VCMN, Namelist '
                 '&CONFIN)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:vmmo',
         'promoted_name': 'input:wtin:Basic:vmmo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:vmmo',
         'typeVar': 'Float',
         'val': 0.0}
      input:wtin:Basic:nwref: {
        'aliases': (        'Ramp weight',
                             'Zero fuel weight',
                             'Operating weight empty',
                             'Weight empty'),
         'desc': 'The number of the reference weight for percentage weight '
                 'output.',
         'optionsVal': (39, 37, 33, 26),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:nwref',
         'promoted_name': 'input:wtin:Basic:nwref',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Basic:nwref',
         'typeVar': 'Enum',
         'val': 39}
      input:wtin:Basic:cgrefl: {
        'desc': 'Reference length for percentage C.G. location output '
                 '(Default = XL*12., fuselage length)',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:cgrefl',
         'promoted_name': 'input:wtin:Basic:cgrefl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:cgrefl',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Basic:cgrefx: {
        'desc': 'X - location of start of reference length',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:cgrefx',
         'promoted_name': 'input:wtin:Basic:cgrefx',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:cgrefx',
         'typeVar': 'Float',
         'units': 'inch',
         'val': 0.0}
      input:wtin:Basic:mywts: {
        'aliases': ('Compute weight', 'User-specified'),
         'desc': '= 0, Weights will be computed\n'
                 ' = 1, Otherwise (See User-Specified Weights, Namelist '
                 '&MISSIN)',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:mywts',
         'promoted_name': 'input:wtin:Basic:mywts',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Basic:mywts',
         'typeVar': 'Enum',
         'val': 0}
      input:wtin:Basic:hydpr: {
        'desc': 'Hydraulic system pressure',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:hydpr',
         'promoted_name': 'input:wtin:Basic:hydpr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:hydpr',
         'typeVar': 'Float',
         'units': 'psi',
         'val': 3000.0}
      input:wtin:Basic:wpaint: {
        'desc': 'Weight of paint for all wetted areas',
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:wpaint',
         'promoted_name': 'input:wtin:Basic:wpaint',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:wtin:Basic:wpaint',
         'typeVar': 'Float',
         'units': 'psf',
         'val': 0.0}
      input:wtin:Basic:ialtwt: {
        'aliases': ('Normal', 'Alternate'),
         'desc': '= 1, Alternate weight equations for some components will '
                 'be used (Special option)\n'
                 '= 0, Normal FLOPS weight equations will be used',
         'optionsVal': (0, 1),
         'pass_by_obj': True,
         'pathname': 'my_flops.input:wtin:Basic:ialtwt',
         'promoted_name': 'input:wtin:Basic:ialtwt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:wtin:Basic:ialtwt',
         'typeVar': 'Enum',
         'val': 0}
      input:rerun0:desrng: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:desrng',
         'promoted_name': 'input:rerun0:desrng',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:desrng',
         'units': 'nmi.s',
         'val': 2000.0}
      input:rerun0:mywts: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:mywts',
         'promoted_name': 'input:rerun0:mywts',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:mywts',
         'val': 1}
      input:rerun0:rampwt: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:rampwt',
         'promoted_name': 'input:rerun0:rampwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:rampwt',
         'units': 'lb',
         'val': -1.0}
      input:rerun0:dowe: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:dowe',
         'promoted_name': 'input:rerun0:dowe',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:dowe',
         'units': 'lb',
         'val': -1.0}
      input:rerun0:paylod: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:paylod',
         'promoted_name': 'input:rerun0:paylod',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:paylod',
         'units': 'lb',
         'val': -1.0}
      input:rerun0:fuemax: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:fuemax',
         'promoted_name': 'input:rerun0:fuemax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:fuemax',
         'units': 'lb',
         'val': -1.0}
      input:rerun0:itakof: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:itakof',
         'promoted_name': 'input:rerun0:itakof',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:itakof',
         'val': -1}
      input:rerun0:iland: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:iland',
         'promoted_name': 'input:rerun0:iland',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:iland',
         'val': -1}
      input:rerun0:nopro: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:nopro',
         'promoted_name': 'input:rerun0:nopro',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:nopro',
         'val': -1}
      input:rerun0:noise: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:noise',
         'promoted_name': 'input:rerun0:noise',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:noise',
         'val': -1}
      input:rerun0:icost: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:icost',
         'promoted_name': 'input:rerun0:icost',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:icost',
         'val': -1}
      input:rerun0:wsr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:wsr',
         'promoted_name': 'input:rerun0:wsr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:wsr',
         'val': 0.0}
      input:rerun0:twr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:twr',
         'promoted_name': 'input:rerun0:twr',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:twr',
         'val': 0.0}
      input:rerun0:missin:Basic:indr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:indr',
         'promoted_name': 'input:rerun0:missin:Basic:indr',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:indr',
         'val': -999}
      input:rerun0:missin:Basic:fact: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fact',
         'promoted_name': 'input:rerun0:missin:Basic:fact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fact',
         'val': -999.0}
      input:rerun0:missin:Basic:fleak: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fleak',
         'promoted_name': 'input:rerun0:missin:Basic:fleak',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fleak',
         'val': -999.0}
      input:rerun0:missin:Basic:fcdo: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fcdo',
         'promoted_name': 'input:rerun0:missin:Basic:fcdo',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fcdo',
         'val': -999.0}
      input:rerun0:missin:Basic:fcdi: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fcdi',
         'promoted_name': 'input:rerun0:missin:Basic:fcdi',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fcdi',
         'val': -999.0}
      input:rerun0:missin:Basic:fcdsub: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fcdsub',
         'promoted_name': 'input:rerun0:missin:Basic:fcdsub',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fcdsub',
         'val': -999.0}
      input:rerun0:missin:Basic:fcdsup: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:fcdsup',
         'promoted_name': 'input:rerun0:missin:Basic:fcdsup',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:fcdsup',
         'val': -999.0}
      input:rerun0:missin:Basic:iskal: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:iskal',
         'promoted_name': 'input:rerun0:missin:Basic:iskal',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:iskal',
         'val': -999}
      input:rerun0:missin:Basic:owfact: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:owfact',
         'promoted_name': 'input:rerun0:missin:Basic:owfact',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:owfact',
         'val': -999.0}
      input:rerun0:missin:Basic:iflag: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:iflag',
         'promoted_name': 'input:rerun0:missin:Basic:iflag',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:iflag',
         'val': 0}
      input:rerun0:missin:Basic:msumpt: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:msumpt',
         'promoted_name': 'input:rerun0:missin:Basic:msumpt',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:msumpt',
         'val': -999}
      input:rerun0:missin:Basic:dtc: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:dtc',
         'promoted_name': 'input:rerun0:missin:Basic:dtc',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:dtc',
         'val': -999.0}
      input:rerun0:missin:Basic:irw: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:irw',
         'promoted_name': 'input:rerun0:missin:Basic:irw',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:irw',
         'val': -999}
      input:rerun0:missin:Basic:rtol: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:rtol',
         'promoted_name': 'input:rerun0:missin:Basic:rtol',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:rtol',
         'val': -999.0}
      input:rerun0:missin:Basic:nhold: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:nhold',
         'promoted_name': 'input:rerun0:missin:Basic:nhold',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:nhold',
         'val': -999}
      input:rerun0:missin:Basic:iata: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:iata',
         'promoted_name': 'input:rerun0:missin:Basic:iata',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:iata',
         'val': -999}
      input:rerun0:missin:Basic:tlwind: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:tlwind',
         'promoted_name': 'input:rerun0:missin:Basic:tlwind',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:tlwind',
         'val': -999.0}
      input:rerun0:missin:Basic:dwt: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:dwt',
         'promoted_name': 'input:rerun0:missin:Basic:dwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:dwt',
         'val': -999.0}
      input:rerun0:missin:Basic:offdr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:offdr',
         'promoted_name': 'input:rerun0:missin:Basic:offdr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:offdr',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Basic:idoq: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:idoq',
         'promoted_name': 'input:rerun0:missin:Basic:idoq',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:idoq',
         'val': -999}
      input:rerun0:missin:Basic:nsout: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:nsout',
         'promoted_name': 'input:rerun0:missin:Basic:nsout',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:nsout',
         'val': -999}
      input:rerun0:missin:Basic:nsadj: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:nsadj',
         'promoted_name': 'input:rerun0:missin:Basic:nsadj',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:nsadj',
         'val': -999}
      input:rerun0:missin:Basic:mirror: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Basic:mirror',
         'promoted_name': 'input:rerun0:missin:Basic:mirror',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Basic:mirror',
         'val': -999}
      input:rerun0:missin:Store_Drag:stma: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Store_Drag:stma',
         'promoted_name': 'input:rerun0:missin:Store_Drag:stma',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Store_Drag:stma',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Store_Drag:cdst: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Store_Drag:cdst',
         'promoted_name': 'input:rerun0:missin:Store_Drag:cdst',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Store_Drag:cdst',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Store_Drag:istcl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Store_Drag:istcl',
         'promoted_name': 'input:rerun0:missin:Store_Drag:istcl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Store_Drag:istcl',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Store_Drag:istcr: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Store_Drag:istcr',
         'promoted_name': 'input:rerun0:missin:Store_Drag:istcr',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Store_Drag:istcr',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Store_Drag:istde: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Store_Drag:istde',
         'promoted_name': 'input:rerun0:missin:Store_Drag:istde',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Store_Drag:istde',
         'val': -999}
      input:rerun0:missin:User_Weights:mywts: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:User_Weights:mywts',
         'promoted_name': 'input:rerun0:missin:User_Weights:mywts',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:User_Weights:mywts',
         'val': -999}
      input:rerun0:missin:User_Weights:rampwt: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:User_Weights:rampwt',
         'promoted_name': 'input:rerun0:missin:User_Weights:rampwt',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:User_Weights:rampwt',
         'val': -999.0}
      input:rerun0:missin:User_Weights:dowe: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:User_Weights:dowe',
         'promoted_name': 'input:rerun0:missin:User_Weights:dowe',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:User_Weights:dowe',
         'val': -999.0}
      input:rerun0:missin:User_Weights:paylod: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:User_Weights:paylod',
         'promoted_name': 'input:rerun0:missin:User_Weights:paylod',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:User_Weights:paylod',
         'val': -999.0}
      input:rerun0:missin:User_Weights:fuemax: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:User_Weights:fuemax',
         'promoted_name': 'input:rerun0:missin:User_Weights:fuemax',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:User_Weights:fuemax',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:takotm: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:takotm',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:takotm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:takotm',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:taxotm: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:taxotm',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:taxotm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:taxotm',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:apprtm: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:apprtm',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:apprtm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:apprtm',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:appfff: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:appfff',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:appfff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:appfff',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:taxitm: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:taxitm',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:taxitm',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:taxitm',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:ittff: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:ittff',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:ittff',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:ittff',
         'val': -999}
      input:rerun0:missin:Ground_Operations:takoff: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:takoff',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:takoff',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:takoff',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:txfufl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:txfufl',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:txfufl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:txfufl',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:ftkofl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:ftkofl',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:ftkofl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:ftkofl',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:ftxofl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:ftxofl',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:ftxofl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:ftxofl',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:ftxifl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:ftxifl',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:ftxifl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:ftxifl',
         'val': -999.0}
      input:rerun0:missin:Ground_Operations:faprfl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Ground_Operations:faprfl',
         'promoted_name': 'input:rerun0:missin:Ground_Operations:faprfl',
         'shape': 1,
         'size': 1,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Ground_Operations:faprfl',
         'val': -999.0}
      input:rerun0:missin:Turn_Segments:xnz: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Turn_Segments:xnz',
         'promoted_name': 'input:rerun0:missin:Turn_Segments:xnz',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Turn_Segments:xnz',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Turn_Segments:xcl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Turn_Segments:xcl',
         'promoted_name': 'input:rerun0:missin:Turn_Segments:xcl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Turn_Segments:xcl',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Turn_Segments:xmach: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Turn_Segments:xmach',
         'promoted_name': 'input:rerun0:missin:Turn_Segments:xmach',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Turn_Segments:xmach',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:nclimb: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:nclimb',
         'promoted_name': 'input:rerun0:missin:Climb:nclimb',
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:nclimb',
         'val': -999}
      input:rerun0:missin:Climb:clmmin: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:clmmin',
         'promoted_name': 'input:rerun0:missin:Climb:clmmin',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:clmmin',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:clmmax: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:clmmax',
         'promoted_name': 'input:rerun0:missin:Climb:clmmax',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:clmmax',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:clamin: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:clamin',
         'promoted_name': 'input:rerun0:missin:Climb:clamin',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:clamin',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:clamax: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:clamax',
         'promoted_name': 'input:rerun0:missin:Climb:clamax',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:clamax',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:nincl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:nincl',
         'promoted_name': 'input:rerun0:missin:Climb:nincl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:nincl',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:fwf: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:fwf',
         'promoted_name': 'input:rerun0:missin:Climb:fwf',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:fwf',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:ncrcl: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:ncrcl',
         'promoted_name': 'input:rerun0:missin:Climb:ncrcl',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:ncrcl',
         'val': array([], dtype=float64)}
      input:rerun0:missin:Climb:cldcd: {
        'pass_by_obj': True,
         'pathname': 'my_flops.input:rerun0:missin:Climb:cldcd',
         'promoted_name': 'input:rerun0:missin:Climb:cldcd',
         'shape': (0,),
         'size': 0,
         'top_promoted_name': 'my_flops.input:rerun0:missin:Climb:cldcd',
         'val': array([], dtype=float64)}